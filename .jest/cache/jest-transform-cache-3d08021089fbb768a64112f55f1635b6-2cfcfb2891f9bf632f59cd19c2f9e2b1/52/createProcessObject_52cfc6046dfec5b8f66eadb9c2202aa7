22246bbc5c7e5a45d2a05c01082fceb2
'use strict';

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = _default;

var _deepCyclicCopy = _interopRequireDefault(require("./deepCyclicCopy"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var BLACKLIST = new Set(['env', 'mainModule', '_events']);
var isWin32 = process.platform === 'win32';
var proto = Object.getPrototypeOf(process.env);

function createProcessEnv() {
  var real = Object.create(proto);
  var lookup = {};

  function deletePropertyWin32(_target, key) {
    for (var name in real) {
      if (real.hasOwnProperty(name)) {
        if (typeof key === 'string') {
          if (name.toLowerCase() === key.toLowerCase()) {
            delete real[name];
            delete lookup[name.toLowerCase()];
          }
        } else {
          if (key === name) {
            delete real[name];
            delete lookup[name];
          }
        }
      }
    }

    return true;
  }

  function deleteProperty(_target, key) {
    delete real[key];
    delete lookup[key];
    return true;
  }

  function getProperty(_target, key) {
    return real[key];
  }

  function getPropertyWin32(_target, key) {
    if (typeof key === 'string') {
      return lookup[key in proto ? key : key.toLowerCase()];
    } else {
      return real[key];
    }
  }

  var proxy = new Proxy(real, {
    deleteProperty: isWin32 ? deletePropertyWin32 : deleteProperty,
    get: isWin32 ? getPropertyWin32 : getProperty,
    set: function set(_target, key, value) {
      var strValue = '' + value;

      if (typeof key === 'string') {
        lookup[key.toLowerCase()] = strValue;
      }

      real[key] = strValue;
      return true;
    }
  });
  return (0, _extends2.default)(proxy, process.env);
}

function _default() {
  var process = require('process');

  var newProcess = (0, _deepCyclicCopy.default)(process, {
    blacklist: BLACKLIST,
    keepPrototype: true
  });

  try {
    newProcess[Symbol.toStringTag] = 'process';
  } catch (e) {
    if (newProcess[Symbol.toStringTag] !== 'process') {
      e.message = 'Unable to set toStringTag on process. Please open up an issue at https://github.com/facebook/jest\n\n' + e.message;
      throw e;
    }
  }

  var proto = process;

  while (proto = Object.getPrototypeOf(proto)) {
    if (typeof proto.constructor === 'function') {
      proto.constructor.call(newProcess);
    }
  }

  newProcess.env = createProcessEnv();

  newProcess.send = function () {
    return true;
  };

  Object.defineProperty(newProcess, 'domain', {
    get: function get() {
      return process.domain;
    }
  });
  return newProcess;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNyZWF0ZVByb2Nlc3NPYmplY3QuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwiX2RlZmF1bHQiLCJfZGVlcEN5Y2xpY0NvcHkiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJCTEFDS0xJU1QiLCJTZXQiLCJpc1dpbjMyIiwicHJvY2VzcyIsInBsYXRmb3JtIiwicHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsImVudiIsImNyZWF0ZVByb2Nlc3NFbnYiLCJyZWFsIiwiY3JlYXRlIiwibG9va3VwIiwiZGVsZXRlUHJvcGVydHlXaW4zMiIsIl90YXJnZXQiLCJrZXkiLCJuYW1lIiwiaGFzT3duUHJvcGVydHkiLCJ0b0xvd2VyQ2FzZSIsImRlbGV0ZVByb3BlcnR5IiwiZ2V0UHJvcGVydHkiLCJnZXRQcm9wZXJ0eVdpbjMyIiwicHJveHkiLCJQcm94eSIsImdldCIsInNldCIsInN0clZhbHVlIiwibmV3UHJvY2VzcyIsImJsYWNrbGlzdCIsImtlZXBQcm90b3R5cGUiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImUiLCJtZXNzYWdlIiwiY29uc3RydWN0b3IiLCJjYWxsIiwic2VuZCIsImRvbWFpbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxFQUFBQSxLQUFLLEVBQUU7QUFEb0MsQ0FBN0M7QUFHQUQsT0FBTyxDQUFDRSxPQUFSLEdBQWtCQyxRQUFsQjs7QUFFQSxJQUFJQyxlQUFlLEdBQUdDLHNCQUFzQixDQUFDQyxPQUFPLG9CQUFSLENBQTVDOztBQUVBLFNBQVNELHNCQUFULENBQWdDRSxHQUFoQyxFQUFxQztBQUNuQyxTQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEI7QUFBQ0ws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S0EsU0FBT1YsVUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuXG52YXIgX2RlZXBDeWNsaWNDb3B5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCcuL2RlZXBDeWNsaWNDb3B5JykpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge2RlZmF1bHQ6IG9ian07XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbmNvbnN0IEJMQUNLTElTVCA9IG5ldyBTZXQoWydlbnYnLCAnbWFpbk1vZHVsZScsICdfZXZlbnRzJ10pO1xuY29uc3QgaXNXaW4zMiA9IHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMic7XG5jb25zdCBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm9jZXNzLmVudik7IC8vIFRoZSBcInByb2Nlc3MuZW52XCIgb2JqZWN0IGhhcyBhIGJ1bmNoIG9mIHBhcnRpY3VsYXJpdGllczogZmlyc3QsIGl0IGRvZXMgbm90XG4vLyBkaXJlY3RseSBleHRlbmQgZnJvbSBPYmplY3Q7IHNlY29uZCwgaXQgY29udmVydHMgYW55IGFzc2lnbmVkIHZhbHVlIHRvIGFcbi8vIHN0cmluZzsgYW5kIHRoaXJkLCBpdCBpcyBjYXNlLWluc2Vuc2l0aXZlIGluIFdpbmRvd3MuIFdlIHVzZSBhIHByb3h5IGhlcmUgdG9cbi8vIG1pbWljIGl0IChzZWUgaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9wcm9jZXNzLmh0bWwjcHJvY2Vzc19wcm9jZXNzX2VudikuXG5cbmZ1bmN0aW9uIGNyZWF0ZVByb2Nlc3NFbnYoKSB7XG4gIGNvbnN0IHJlYWwgPSBPYmplY3QuY3JlYXRlKHByb3RvKTtcbiAgY29uc3QgbG9va3VwID0ge307XG5cbiAgZnVuY3Rpb24gZGVsZXRlUHJvcGVydHlXaW4zMihfdGFyZ2V0LCBrZXkpIHtcbiAgICBmb3IgKGNvbnN0IG5hbWUgaW4gcmVhbCkge1xuICAgICAgaWYgKHJlYWwuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKG5hbWUudG9Mb3dlckNhc2UoKSA9PT0ga2V5LnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgIGRlbGV0ZSByZWFsW25hbWVdO1xuICAgICAgICAgICAgZGVsZXRlIGxvb2t1cFtuYW1lLnRvTG93ZXJDYXNlKCldO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoa2V5ID09PSBuYW1lKSB7XG4gICAgICAgICAgICBkZWxldGUgcmVhbFtuYW1lXTtcbiAgICAgICAgICAgIGRlbGV0ZSBsb29rdXBbbmFtZV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBkZWxldGVQcm9wZXJ0eShfdGFyZ2V0LCBrZXkpIHtcbiAgICBkZWxldGUgcmVhbFtrZXldO1xuICAgIGRlbGV0ZSBsb29rdXBba2V5XTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFByb3BlcnR5KF90YXJnZXQsIGtleSkge1xuICAgIHJldHVybiByZWFsW2tleV07XG4gIH1cblxuICBmdW5jdGlvbiBnZXRQcm9wZXJ0eVdpbjMyKF90YXJnZXQsIGtleSkge1xuICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIGxvb2t1cFtrZXkgaW4gcHJvdG8gPyBrZXkgOiBrZXkudG9Mb3dlckNhc2UoKV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZWFsW2tleV07XG4gICAgfVxuICB9XG5cbiAgY29uc3QgcHJveHkgPSBuZXcgUHJveHkocmVhbCwge1xuICAgIGRlbGV0ZVByb3BlcnR5OiBpc1dpbjMyID8gZGVsZXRlUHJvcGVydHlXaW4zMiA6IGRlbGV0ZVByb3BlcnR5LFxuICAgIGdldDogaXNXaW4zMiA/IGdldFByb3BlcnR5V2luMzIgOiBnZXRQcm9wZXJ0eSxcblxuICAgIHNldChfdGFyZ2V0LCBrZXksIHZhbHVlKSB7XG4gICAgICBjb25zdCBzdHJWYWx1ZSA9ICcnICsgdmFsdWU7XG5cbiAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xuICAgICAgICBsb29rdXBba2V5LnRvTG93ZXJDYXNlKCldID0gc3RyVmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJlYWxba2V5XSA9IHN0clZhbHVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24ocHJveHksIHByb2Nlc3MuZW52KTtcbn1cblxuZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gIGNvbnN0IHByb2Nlc3MgPSByZXF1aXJlKCdwcm9jZXNzJyk7XG5cbiAgY29uc3QgbmV3UHJvY2VzcyA9ICgwLCBfZGVlcEN5Y2xpY0NvcHkuZGVmYXVsdCkocHJvY2Vzcywge1xuICAgIGJsYWNrbGlzdDogQkxBQ0tMSVNULFxuICAgIGtlZXBQcm90b3R5cGU6IHRydWVcbiAgfSk7XG5cbiAgdHJ5IHtcbiAgICAvLyBUaGlzIGZhaWxzIG9uIE5vZGUgMTIsIGJ1dCBpdCdzIGFscmVhZHkgc2V0IHRvICdwcm9jZXNzJ1xuICAgIG5ld1Byb2Nlc3NbU3ltYm9sLnRvU3RyaW5nVGFnXSA9ICdwcm9jZXNzJztcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIE1ha2Ugc3VyZSBpdCdzIGFjdHVhbGx5IHNldCBpbnN0ZWFkIG9mIHBvdGVudGlhbGx5IGlnbm9yaW5nIGVycm9yc1xuICAgIGlmIChuZXdQcm9jZXNzW1N5bWJvbC50b1N0cmluZ1RhZ10gIT09ICdwcm9jZXNzJykge1xuICAgICAgZS5tZXNzYWdlID1cbiAgICAgICAgJ1VuYWJsZSB0byBzZXQgdG9TdHJpbmdUYWcgb24gcHJvY2Vzcy4gUGxlYXNlIG9wZW4gdXAgYW4gaXNzdWUgYXQgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2plc3RcXG5cXG4nICtcbiAgICAgICAgZS5tZXNzYWdlO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH0gLy8gU2VxdWVudGlhbGx5IGV4ZWN1dGUgYWxsIGNvbnN0cnVjdG9ycyBvdmVyIHRoZSBvYmplY3QuXG5cbiAgbGV0IHByb3RvID0gcHJvY2VzcztcblxuICB3aGlsZSAoKHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSkpIHtcbiAgICBpZiAodHlwZW9mIHByb3RvLmNvbnN0cnVjdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwcm90by5jb25zdHJ1Y3Rvci5jYWxsKG5ld1Byb2Nlc3MpO1xuICAgIH1cbiAgfVxuXG4gIG5ld1Byb2Nlc3MuZW52ID0gY3JlYXRlUHJvY2Vzc0VudigpO1xuXG4gIG5ld1Byb2Nlc3Muc2VuZCA9ICgpID0+IHRydWU7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld1Byb2Nlc3MsICdkb21haW4nLCB7XG4gICAgZ2V0KCkge1xuICAgICAgcmV0dXJuIHByb2Nlc3MuZG9tYWluO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBuZXdQcm9jZXNzO1xufVxuIl19