6dacbce443bc93ee4e9767b3253038cf
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.itemsSlice = exports.itemsSelector = exports.default = void 0;

var _objectDestructuringEmpty2 = _interopRequireDefault(require("@babel/runtime/helpers/objectDestructuringEmpty"));

var _toolkit = require("@reduxjs/toolkit");

var initialState = {
  items: [{
    id: 1,
    name: 'French Fries with Ketchup',
    price: 223,
    image: require("../assets/images/plate__french-fries.png"),
    alt: 'French Fries',
    count: 0
  }, {
    id: 2,
    name: 'Salmon and Vegetables',
    price: 512,
    image: require("../assets/images/plate__salmon-vegetables.png"),
    alt: 'Salmon and Vegetables',
    count: 0
  }, {
    id: 3,
    name: 'Spaghetti Meat Sauce',
    price: 782,
    image: require("../assets/images/plate__spaghetti-meat-sauce.png"),
    alt: 'Spaghetti with Meat Sauce',
    count: 0
  }, {
    id: 4,
    name: 'Bacon, Eggs, and Toast',
    price: 599,
    image: require("../assets/images/plate__bacon-eggs.png"),
    alt: 'Bacon, Eggs, and Toast',
    count: 0
  }, {
    id: 5,
    name: 'Chicken Salad with Parmesan',
    price: 698,
    image: require("../assets/images/plate__chicken-salad.png"),
    alt: 'Chicken Salad with Parmesan',
    count: 0
  }, {
    id: 6,
    name: 'Fish Sticks and Fries',
    price: 634,
    image: require("../assets/images/plate__fish-sticks-fries.png"),
    alt: 'Fish Sticks and Fries',
    count: 0
  }]
};
var itemsSlice = (0, _toolkit.createSlice)({
  name: 'items',
  initialState: initialState,
  reducers: {}
});
exports.itemsSlice = itemsSlice;
(0, _objectDestructuringEmpty2.default)(itemsSlice.actions);

var itemsSelector = function itemsSelector(state) {
  return state.allItems;
};

exports.itemsSelector = itemsSelector;
var _default = itemsSlice.reducer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZW1zLnNsaWNlLnRzIl0sIm5hbWVzIjpbImluaXRpYWxTdGF0ZSIsIml0ZW1zIiwiaWQiLCJuYW1lIiwicHJpY2UiLCJpbWFnZSIsInJlcXVpcmUiLCJhbHQiLCJjb3VudCIsIml0ZW1zU2xpY2UiLCJyZWR1Y2VycyIsImFjdGlvbnMiLCJpdGVtc1NlbGVjdG9yIiwic3RhdGUiLCJhbGxJdGVtcyIsInJlZHVjZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQWdCQSxJQUFNQSxZQUF1QixHQUFHO0FBQzlCQyxFQUFBQSxLQUFLLEVBQUUsQ0FDTDtBQUNFQyxJQUFBQSxFQUFFLEVBQUUsQ0FETjtBQUVFQyxJQUFBQSxJQUFJLEVBQUUsMkJBRlI7QUFHRUMsSUFBQUEsS0FBSyxFQUFFLEdBSFQ7QUFJRUMsSUFBQUEsS0FBSyxFQUFFQyxPQUFPLDRDQUpoQjtBQUtFQyxJQUFBQSxHQUFHLEVBQUUsY0FMUDtBQU1FQyxJQUFBQSxLQUFLLEVBQUU7QUFOVCxHQURLLEVBU0w7QUFDRU4sSUFBQUEsRUFBRSxFQUFFLENBRE47QUFFRUMsSUFBQUEsSUFBSSxFQUFFLHVCQUZSO0FBR0VDLElBQUFBLEtBQUssRUFBRSxHQUhUO0FBSUVDLElBQUFBLEtBQUssRUFBRUMsT0FBTyxpREFKaEI7QUFLRUMsSUFBQUEsR0FBRyxFQUFFLHVCQUxQO0FBTUVDLElBQUFBLEtBQUssRUFBRTtBQU5ULEdBVEssRUFpQkw7QUFDRU4sSUFBQUEsRUFBRSxFQUFFLENBRE47QUFFRUMsSUFBQUEsSUFBSSxFQUFFLHNCQUZSO0FBR0VDLElBQUFBLEtBQUssRUFBRSxHQUhUO0FBSUVDLElBQUFBLEtBQUssRUFBRUMsT0FBTyxvREFKaEI7QUFLRUMsSUFBQUEsR0FBRyxFQUFFLDJCQUxQO0FBTUVDLElBQUFBLEtBQUssRUFBRTtBQU5ULEdBakJLLEVBeUJMO0FBQ0VOLElBQUFBLEVBQUUsRUFBRSxDQUROO0FBRUVDLElBQUFBLElBQUksRUFBRSx3QkFGUjtBQUdFQyxJQUFBQSxLQUFLLEVBQUUsR0FIVDtBQUlFQyxJQUFBQSxLQUFLLEVBQUVDLE9BQU8sMENBSmhCO0FBS0VDLElBQUFBLEdBQUcsRUFBRSx3QkFMUDtBQU1FQyxJQUFBQSxLQUFLLEVBQUU7QUFOVCxHQXpCSyxFQWlDTDtBQUNFTixJQUFBQSxFQUFFLEVBQUUsQ0FETjtBQUVFQyxJQUFBQSxJQUFJLEVBQUUsNkJBRlI7QUFHRUMsSUFBQUEsS0FBSyxFQUFFLEdBSFQ7QUFJRUMsSUFBQUEsS0FBSyxFQUFFQyxPQUFPLDZDQUpoQjtBQUtFQyxJQUFBQSxHQUFHLEVBQUUsNkJBTFA7QUFNRUMsSUFBQUEsS0FBSyxFQUFFO0FBTlQsR0FqQ0ssRUF5Q0w7QUFDRU4sSUFBQUEsRUFBRSxFQUFFLENBRE47QUFFRUMsSUFBQUEsSUFBSSxFQUFFLHVCQUZSO0FBR0VDLElBQUFBLEtBQUssRUFBRSxHQUhUO0FBSUVDLElBQUFBLEtBQUssRUFBRUMsT0FBTyxpREFKaEI7QUFLRUMsSUFBQUEsR0FBRyxFQUFFLHVCQUxQO0FBTUVDLElBQUFBLEtBQUssRUFBRTtBQU5ULEdBekNLO0FBRHVCLENBQWhDO0FBcURPLElBQU1DLFVBQVUsR0FBRywwQkFBWTtBQUNwQ04sRUFBQUEsSUFBSSxFQUFFLE9BRDhCO0FBRXBDSCxFQUFBQSxZQUFZLEVBQVpBLFlBRm9DO0FBR3BDVSxFQUFBQSxRQUFRLEVBQUU7QUFIMEIsQ0FBWixDQUFuQjs7QUFNQSx3Q0FBV0QsVUFBVSxDQUFDRSxPQUF0Qjs7QUFFQSxJQUFNQyxhQUFhLEdBQUcsU0FBaEJBLGFBQWdCLENBQUNDLEtBQUQ7QUFBQSxTQUFzQkEsS0FBSyxDQUFDQyxRQUE1QjtBQUFBLENBQXRCOzs7ZUFFUUwsVUFBVSxDQUFDTSxPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtjcmVhdGVTbGljZSwgUGF5bG9hZEFjdGlvbn0gZnJvbSAnQHJlZHV4anMvdG9vbGtpdCdcbmltcG9ydCB0eXBlIHtSb290U3RhdGV9IGZyb20gJy4vaW5kZXgnXG5cbmV4cG9ydCB0eXBlIEl0ZW0gPSB7XG4gIGlkOiBudW1iZXJcbiAgbmFtZTogc3RyaW5nXG4gIHByaWNlOiBudW1iZXJcbiAgaW1hZ2U6IHN0cmluZ1xuICBhbHQ6IHN0cmluZ1xuICBjb3VudDogbnVtYmVyXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSXRlbVN0YXRlIHtcbiAgaXRlbXM6IEl0ZW1bXVxufVxuXG5jb25zdCBpbml0aWFsU3RhdGU6IEl0ZW1TdGF0ZSA9IHtcbiAgaXRlbXM6IFtcbiAgICB7XG4gICAgICBpZDogMSxcbiAgICAgIG5hbWU6ICdGcmVuY2ggRnJpZXMgd2l0aCBLZXRjaHVwJyxcbiAgICAgIHByaWNlOiAyMjMsXG4gICAgICBpbWFnZTogcmVxdWlyZSgnLi4vYXNzZXRzL2ltYWdlcy9wbGF0ZV9fZnJlbmNoLWZyaWVzLnBuZycpLFxuICAgICAgYWx0OiAnRnJlbmNoIEZyaWVzJyxcbiAgICAgIGNvdW50OiAwLFxuICAgIH0sXG4gICAge1xuICAgICAgaWQ6IDIsXG4gICAgICBuYW1lOiAnU2FsbW9uIGFuZCBWZWdldGFibGVzJyxcbiAgICAgIHByaWNlOiA1MTIsXG4gICAgICBpbWFnZTogcmVxdWlyZSgnLi4vYXNzZXRzL2ltYWdlcy9wbGF0ZV9fc2FsbW9uLXZlZ2V0YWJsZXMucG5nJyksXG4gICAgICBhbHQ6ICdTYWxtb24gYW5kIFZlZ2V0YWJsZXMnLFxuICAgICAgY291bnQ6IDAsXG4gICAgfSxcbiAgICB7XG4gICAgICBpZDogMyxcbiAgICAgIG5hbWU6ICdTcGFnaGV0dGkgTWVhdCBTYXVjZScsXG4gICAgICBwcmljZTogNzgyLFxuICAgICAgaW1hZ2U6IHJlcXVpcmUoJy4uL2Fzc2V0cy9pbWFnZXMvcGxhdGVfX3NwYWdoZXR0aS1tZWF0LXNhdWNlLnBuZycpLFxuICAgICAgYWx0OiAnU3BhZ2hldHRpIHdpdGggTWVhdCBTYXVjZScsXG4gICAgICBjb3VudDogMCxcbiAgICB9LFxuICAgIHtcbiAgICAgIGlkOiA0LFxuICAgICAgbmFtZTogJ0JhY29uLCBFZ2dzLCBhbmQgVG9hc3QnLFxuICAgICAgcHJpY2U6IDU5OSxcbiAgICAgIGltYWdlOiByZXF1aXJlKCcuLi9hc3NldHMvaW1hZ2VzL3BsYXRlX19iYWNvbi1lZ2dzLnBuZycpLFxuICAgICAgYWx0OiAnQmFjb24sIEVnZ3MsIGFuZCBUb2FzdCcsXG4gICAgICBjb3VudDogMCxcbiAgICB9LFxuICAgIHtcbiAgICAgIGlkOiA1LFxuICAgICAgbmFtZTogJ0NoaWNrZW4gU2FsYWQgd2l0aCBQYXJtZXNhbicsXG4gICAgICBwcmljZTogNjk4LFxuICAgICAgaW1hZ2U6IHJlcXVpcmUoJy4uL2Fzc2V0cy9pbWFnZXMvcGxhdGVfX2NoaWNrZW4tc2FsYWQucG5nJyksXG4gICAgICBhbHQ6ICdDaGlja2VuIFNhbGFkIHdpdGggUGFybWVzYW4nLFxuICAgICAgY291bnQ6IDAsXG4gICAgfSxcbiAgICB7XG4gICAgICBpZDogNixcbiAgICAgIG5hbWU6ICdGaXNoIFN0aWNrcyBhbmQgRnJpZXMnLFxuICAgICAgcHJpY2U6IDYzNCxcbiAgICAgIGltYWdlOiByZXF1aXJlKCcuLi9hc3NldHMvaW1hZ2VzL3BsYXRlX19maXNoLXN0aWNrcy1mcmllcy5wbmcnKSxcbiAgICAgIGFsdDogJ0Zpc2ggU3RpY2tzIGFuZCBGcmllcycsXG4gICAgICBjb3VudDogMCxcbiAgICB9LFxuICBdLFxufVxuXG5leHBvcnQgY29uc3QgaXRlbXNTbGljZSA9IGNyZWF0ZVNsaWNlKHtcbiAgbmFtZTogJ2l0ZW1zJyxcbiAgaW5pdGlhbFN0YXRlLFxuICByZWR1Y2Vyczoge30sXG59KVxuXG5leHBvcnQgY29uc3Qge30gPSBpdGVtc1NsaWNlLmFjdGlvbnNcblxuZXhwb3J0IGNvbnN0IGl0ZW1zU2VsZWN0b3IgPSAoc3RhdGU6IFJvb3RTdGF0ZSkgPT4gc3RhdGUuYWxsSXRlbXNcblxuZXhwb3J0IGRlZmF1bHQgaXRlbXNTbGljZS5yZWR1Y2VyXG4iXX0=