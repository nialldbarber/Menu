{"version":3,"sources":["defaultMemoize.js"],"names":["Object","defineProperty","exports","value","createCacheKeyComparator","defaultEqualityCheck","defaultMemoize","NOT_FOUND","createSingletonCache","equals","entry","get","key","put","getEntries","clear","undefined","createLruCache","maxSize","entries","cacheIndex","findIndex","splice","unshift","length","pop","a","b","equalityCheck","areArgumentsShallowlyEqual","prev","next","i","func","equalityCheckOrOptions","providedOptions","_providedOptions$equa","_providedOptions$maxS","resultEqualityCheck","comparator","cache","memoized","arguments","apply","matchingEntry","find","clearCache"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,wBAAR,GAAmCA,wBAAnC;AACAF,OAAO,CAACG,oBAAR,GAA+B,KAAK,CAApC;AACAH,OAAO,CAACI,cAAR,GAAyBA,cAAzB;AAGA,IAAIC,SAAS,GAAG,WAAhB;;AAEA,SAASC,oBAAT,CAA8BC,MAA9B,EAAsC;AACpC,MAAIC,KAAJ;AACA,SAAO;AACLC,IAAAA,GAAG,EAAE,SAASA,GAAT,CAAaC,GAAb,EAAkB;AACrB,UAAIF,KAAK,IAAID,MAAM,CAACC,KAAK,CAACE,GAAP,EAAYA,GAAZ,CAAnB,EAAqC;AACnC,eAAOF,KAAK,CAACP,KAAb;AACD;;AAED,aAAOI,SAAP;AACD,KAPI;AAQLM,IAAAA,GAAG,EAAE,SAASA,GAAT,CAAaD,GAAb,EAAkBT,KAAlB,EAAyB;AAC5BO,MAAAA,KAAK,GAAG;AACNE,QAAAA,GAAG,EAAEA,GADC;AAENT,QAAAA,KAAK,EAAEA;AAFD,OAAR;AAID,KAbI;AAcLW,IAAAA,UAAU,EAAE,SAASA,UAAT,GAAsB;AAChC,aAAOJ,KAAK,GAAG,CAACA,KAAD,CAAH,GAAa,EAAzB;AACD,KAhBI;AAiBLK,IAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtBL,MAAAA,KAAK,GAAGM,SAAR;AACD;AAnBI,GAAP;AAqBD;;AAED,SAASC,cAAT,CAAwBC,OAAxB,EAAiCT,MAAjC,EAAyC;AACvC,MAAIU,OAAO,GAAG,EAAd;;AAEA,WAASR,GAAT,CAAaC,GAAb,EAAkB;AAChB,QAAIQ,UAAU,GAAGD,OAAO,CAACE,SAAR,CAAkB,UAAUX,KAAV,EAAiB;AAClD,aAAOD,MAAM,CAACG,GAAD,EAAMF,KAAK,CAACE,GAAZ,CAAb;AACD,KAFgB,CAAjB;;AAIA,QAAIQ,UAAU,GAAG,CAAC,CAAlB,EAAqB;AACnB,UAAIV,KAAK,GAAGS,OAAO,CAACC,UAAD,CAAnB;;AAEA,UAAIA,UAAU,GAAG,CAAjB,EAAoB;AAClBD,QAAAA,OAAO,CAACG,MAAR,CAAeF,UAAf,EAA2B,CAA3B;AACAD,QAAAA,OAAO,CAACI,OAAR,CAAgBb,KAAhB;AACD;;AAED,aAAOA,KAAK,CAACP,KAAb;AACD;;AAGD,WAAOI,SAAP;AACD;;AAED,WAASM,GAAT,CAAaD,GAAb,EAAkBT,KAAlB,EAAyB;AACvB,QAAIQ,GAAG,CAACC,GAAD,CAAH,KAAaL,SAAjB,EAA4B;AAE1BY,MAAAA,OAAO,CAACI,OAAR,CAAgB;AACdX,QAAAA,GAAG,EAAEA,GADS;AAEdT,QAAAA,KAAK,EAAEA;AAFO,OAAhB;;AAKA,UAAIgB,OAAO,CAACK,MAAR,GAAiBN,OAArB,EAA8B;AAC5BC,QAAAA,OAAO,CAACM,GAAR;AACD;AACF;AACF;;AAED,WAASX,UAAT,GAAsB;AACpB,WAAOK,OAAP;AACD;;AAED,WAASJ,KAAT,GAAiB;AACfI,IAAAA,OAAO,GAAG,EAAV;AACD;;AAED,SAAO;AACLR,IAAAA,GAAG,EAAEA,GADA;AAELE,IAAAA,GAAG,EAAEA,GAFA;AAGLC,IAAAA,UAAU,EAAEA,UAHP;AAILC,IAAAA,KAAK,EAAEA;AAJF,GAAP;AAMD;;AAED,IAAIV,oBAAoB,GAAG,SAASA,oBAAT,CAA8BqB,CAA9B,EAAiCC,CAAjC,EAAoC;AAC7D,SAAOD,CAAC,KAAKC,CAAb;AACD,CAFD;;AAIAzB,OAAO,CAACG,oBAAR,GAA+BA,oBAA/B;;AAEA,SAASD,wBAAT,CAAkCwB,aAAlC,EAAiD;AAC/C,SAAO,SAASC,0BAAT,CAAoCC,IAApC,EAA0CC,IAA1C,EAAgD;AACrD,QAAID,IAAI,KAAK,IAAT,IAAiBC,IAAI,KAAK,IAA1B,IAAkCD,IAAI,CAACN,MAAL,KAAgBO,IAAI,CAACP,MAA3D,EAAmE;AACjE,aAAO,KAAP;AACD;;AAGD,QAAIA,MAAM,GAAGM,IAAI,CAACN,MAAlB;;AAEA,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,MAApB,EAA4BQ,CAAC,EAA7B,EAAiC;AAC/B,UAAI,CAACJ,aAAa,CAACE,IAAI,CAACE,CAAD,CAAL,EAAUD,IAAI,CAACC,CAAD,CAAd,CAAlB,EAAsC;AACpC,eAAO,KAAP;AACD;AACF;;AAED,WAAO,IAAP;AACD,GAfD;AAgBD;;AAID,SAAS1B,cAAT,CAAwB2B,IAAxB,EAA8BC,sBAA9B,EAAsD;AACpD,MAAIC,eAAe,GAAG,OAAOD,sBAAP,KAAkC,QAAlC,GAA6CA,sBAA7C,GAAsE;AAC1FN,IAAAA,aAAa,EAAEM;AAD2E,GAA5F;AAGA,MAAIE,qBAAqB,GAAGD,eAAe,CAACP,aAA5C;AAAA,MACIA,aAAa,GAAGQ,qBAAqB,KAAK,KAAK,CAA/B,GAAmC/B,oBAAnC,GAA0D+B,qBAD9E;AAAA,MAEIC,qBAAqB,GAAGF,eAAe,CAACjB,OAF5C;AAAA,MAGIA,OAAO,GAAGmB,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,CAAnC,GAAuCA,qBAHrD;AAAA,MAIIC,mBAAmB,GAAGH,eAAe,CAACG,mBAJ1C;AAKA,MAAIC,UAAU,GAAGnC,wBAAwB,CAACwB,aAAD,CAAzC;AACA,MAAIY,KAAK,GAAGtB,OAAO,KAAK,CAAZ,GAAgBV,oBAAoB,CAAC+B,UAAD,CAApC,GAAmDtB,cAAc,CAACC,OAAD,EAAUqB,UAAV,CAA7E;;AAEA,WAASE,QAAT,GAAoB;AAClB,QAAItC,KAAK,GAAGqC,KAAK,CAAC7B,GAAN,CAAU+B,SAAV,CAAZ;;AAEA,QAAIvC,KAAK,KAAKI,SAAd,EAAyB;AAEvBJ,MAAAA,KAAK,GAAG8B,IAAI,CAACU,KAAL,CAAW,IAAX,EAAiBD,SAAjB,CAAR;;AAEA,UAAIJ,mBAAJ,EAAyB;AACvB,YAAInB,OAAO,GAAGqB,KAAK,CAAC1B,UAAN,EAAd;AACA,YAAI8B,aAAa,GAAGzB,OAAO,CAAC0B,IAAR,CAAa,UAAUnC,KAAV,EAAiB;AAChD,iBAAO4B,mBAAmB,CAAC5B,KAAK,CAACP,KAAP,EAAcA,KAAd,CAA1B;AACD,SAFmB,CAApB;;AAIA,YAAIyC,aAAJ,EAAmB;AACjBzC,UAAAA,KAAK,GAAGyC,aAAa,CAACzC,KAAtB;AACD;AACF;;AAEDqC,MAAAA,KAAK,CAAC3B,GAAN,CAAU6B,SAAV,EAAqBvC,KAArB;AACD;;AAED,WAAOA,KAAP;AACD;;AAEDsC,EAAAA,QAAQ,CAACK,UAAT,GAAsB,YAAY;AAChC,WAAON,KAAK,CAACzB,KAAN,EAAP;AACD,GAFD;;AAIA,SAAO0B,QAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCacheKeyComparator = createCacheKeyComparator;\nexports.defaultEqualityCheck = void 0;\nexports.defaultMemoize = defaultMemoize;\n// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nvar defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\n\nexports.defaultEqualityCheck = defaultEqualityCheck;\n\nfunction createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nfunction defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}"]}