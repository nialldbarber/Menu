a59731a6f2feb59a2ffcee38a526d21b
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = createDirectory;

function fs() {
  var data = _interopRequireWildcard(require('graceful-fs'));

  fs = function fs() {
    return data;
  };

  return data;
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== 'function') return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== 'object' && typeof obj !== 'function') {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function createDirectory(path) {
  try {
    fs().mkdirSync(path, {
      recursive: true
    });
  } catch (e) {
    if (e.code !== 'EEXIST') {
      throw e;
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNyZWF0ZURpcmVjdG9yeS5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJjcmVhdGVEaXJlY3RvcnkiLCJmcyIsImRhdGEiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwicGF0aCIsIm1rZGlyU3luYyIsInJlY3Vyc2l2ZSIsImUiLCJjb2RlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sQ0FBQ0UsT0FBUixHQUFrQkMsZUFBbEI7O0FBRUEsU0FBU0MsRUFBVCxHQUFjO0FBQ1osTUFBTUMsSUFBSSxHQUFHQyx1QkFBdUIsQ0FBQ0MsT0FBTyxDQUFDLGFBQUQsQ0FBUixDQUFwQzs7QUFFQUgsRUFBQUEsRUFBRSxHQUFHLGNBQVk7QUFDZixXQUFPQyxJQUFQO0FBQ0QsR0FGRDs7QUFJQSxTQUFPQSxJQUFQO0FBQ0Q7O0FBRUQsU0FBU0csd0JBQVQsQ0FBa0NDLFdBQWxDLEVBQStDO0FBQzdDLE1BQUksT0FBT0MsT0FBUCxLQUFtQixVQUF2QixFQUFtQyxPQUFPLElBQVA7QUFDbkMsTUFBSUMsaUJBQWlCLEdBQUcsSUFBSUQsT0FBSixFQUF4QjtBQUNBLE1BQUlFLGdCQUFnQixHQUFHLElBQUlGLE9BQUosRUFBdkI7QUFDQSxTQUFPLENBQUNGLHdCQUF3QixHQUFHLGtDQUFVQyxXQUFWLEVBQXVCO0FBQ3hELFdBQU9BLFdBQVcsR0FBR0csZ0JBQUgsR0FBc0JELGlCQUF4QztBQUNELEdBRk0sRUFFSkYsV0FGSSxDQUFQO0FBR0Q7O0FBRUQsU0FBU0gsdUJBQVQsQ0FBaUNPLEdBQWpDLEVBQXNDSixXQUF0QyxFQUFtRDtBQUNqRCxNQUFJLENBQUNBLFdBQUQsSUFBZ0JJLEdBQWhCLElBQXVCQSxHQUFHLENBQUNDLFVBQS9CLEVBQTJDO0FBQ3pDLFdBQU9ELEdBQVA7QUFDRDs7QUFDRCxNQUFJQSxHQUFHLEtBQUssSUFBUixJQUFpQixPQUFPQSxHQUFQLEtBQWUsUUFBZixJQUEyQixPQUFPQSxHQUFQLEtBQWUsVUFBL0QsRUFBNEU7QUFDMUUsV0FBTztBQUFDWCxNQUFBQSxPQUFPLEVBQUVXO0FBQVYsS0FBUDtBQUNEOztBQUNELE1BQUlFLEtBQUssR0FBR1Asd0JBQXdCLENBQUNDLFdBQUQsQ0FBcEM7O0FBQ0EsTUFBSU0sS0FBSyxJQUFJQSxLQUFLLENBQUNDLEdBQU4sQ0FBVUgsR0FBVixDQUFiLEVBQTZCO0FBQzNCLFdBQU9FLEtBQUssQ0FBQ0UsR0FBTixDQUFVSixHQUFWLENBQVA7QUFDRDs7QUFDRCxNQUFJSyxNQUFNLEdBQUcsRUFBYjtBQUNBLE1BQUlDLHFCQUFxQixHQUN2QnJCLE1BQU0sQ0FBQ0MsY0FBUCxJQUF5QkQsTUFBTSxDQUFDc0Isd0JBRGxDOztBQUVBLE9BQUssSUFBSUMsR0FBVCxJQUFnQlIsR0FBaEIsRUFBcUI7QUFDbkIsUUFBSVEsR0FBRyxLQUFLLFNBQVIsSUFBcUJ2QixNQUFNLENBQUN3QixTQUFQLENBQWlCQyxjQUFqQixDQUFnQ0MsSUFBaEMsQ0FBcUNYLEdBQXJDLEVBQTBDUSxHQUExQyxDQUF6QixFQUF5RTtBQUN2RSxVQUFJSSxJQUFJLEdBQUdOLHFCQUFxQixHQUM1QnJCLE1BQU0sQ0FBQ3NCLHdCQUFQLENBQWdDUCxHQUFoQyxFQUFxQ1EsR0FBckMsQ0FENEIsR0FFNUIsSUFGSjs7QUFHQSxVQUFJSSxJQUFJLEtBQUtBLElBQUksQ0FBQ1IsR0FBTCxJQUFZUSxJQUFJLENBQUNDLEdBQXRCLENBQVIsRUFBb0M7QUFDbEM1QixRQUFBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JtQixNQUF0QixFQUE4QkcsR0FBOUIsRUFBbUNJLElBQW5DO0FBQ0QsT0FGRCxNQUVPO0FBQ0xQLFFBQUFBLE1BQU0sQ0FBQ0csR0FBRCxDQUFOLEdBQWNSLEdBQUcsQ0FBQ1EsR0FBRCxDQUFqQjtBQUNEO0FBQ0Y7QUFDRjs7QUFDREgsRUFBQUEsTUFBTSxDQUFDaEIsT0FBUCxHQUFpQlcsR0FBakI7O0FBQ0EsTUFBSUUsS0FBSixFQUFXO0FBQ1RBLElBQUFBLEtBQUssQ0FBQ1csR0FBTixDQUFVYixHQUFWLEVBQWVLLE1BQWY7QUFDRDs7QUFDRCxTQUFPQSxNQUFQO0FBQ0Q7O0FBUUQsU0FBU2YsZUFBVCxDQUF5QndCLElBQXpCLEVBQStCO0FBQzdCLE1BQUk7QUFDRnZCLElBQUFBLEVBQUUsR0FBR3dCLFNBQUwsQ0FBZUQsSUFBZixFQUFxQjtBQUNuQkUsTUFBQUEsU0FBUyxFQUFFO0FBRFEsS0FBckI7QUFHRCxHQUpELENBSUUsT0FBT0MsQ0FBUCxFQUFVO0FBQ1YsUUFBSUEsQ0FBQyxDQUFDQyxJQUFGLEtBQVcsUUFBZixFQUF5QjtBQUN2QixZQUFNRCxDQUFOO0FBQ0Q7QUFDRjtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZURpcmVjdG9yeTtcblxuZnVuY3Rpb24gZnMoKSB7XG4gIGNvbnN0IGRhdGEgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCdncmFjZWZ1bC1mcycpKTtcblxuICBmcyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7XG4gIGlmICh0eXBlb2YgV2Vha01hcCAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIG51bGw7XG4gIHZhciBjYWNoZUJhYmVsSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7XG4gIHZhciBjYWNoZU5vZGVJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTtcbiAgcmV0dXJuIChfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiAobm9kZUludGVyb3ApIHtcbiAgICByZXR1cm4gbm9kZUludGVyb3AgPyBjYWNoZU5vZGVJbnRlcm9wIDogY2FjaGVCYWJlbEludGVyb3A7XG4gIH0pKG5vZGVJbnRlcm9wKTtcbn1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqLCBub2RlSW50ZXJvcCkge1xuICBpZiAoIW5vZGVJbnRlcm9wICYmIG9iaiAmJiBvYmouX19lc01vZHVsZSkge1xuICAgIHJldHVybiBvYmo7XG4gIH1cbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iaiAhPT0gJ2Z1bmN0aW9uJykpIHtcbiAgICByZXR1cm4ge2RlZmF1bHQ6IG9ian07XG4gIH1cbiAgdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKTtcbiAgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7XG4gICAgcmV0dXJuIGNhY2hlLmdldChvYmopO1xuICB9XG4gIHZhciBuZXdPYmogPSB7fTtcbiAgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoa2V5ICE9PSAnZGVmYXVsdCcgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3JcbiAgICAgICAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KVxuICAgICAgICA6IG51bGw7XG4gICAgICBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBuZXdPYmouZGVmYXVsdCA9IG9iajtcbiAgaWYgKGNhY2hlKSB7XG4gICAgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTtcbiAgfVxuICByZXR1cm4gbmV3T2JqO1xufVxuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5mdW5jdGlvbiBjcmVhdGVEaXJlY3RvcnkocGF0aCkge1xuICB0cnkge1xuICAgIGZzKCkubWtkaXJTeW5jKHBhdGgsIHtcbiAgICAgIHJlY3Vyc2l2ZTogdHJ1ZVxuICAgIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUuY29kZSAhPT0gJ0VFWElTVCcpIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG59XG4iXX0=