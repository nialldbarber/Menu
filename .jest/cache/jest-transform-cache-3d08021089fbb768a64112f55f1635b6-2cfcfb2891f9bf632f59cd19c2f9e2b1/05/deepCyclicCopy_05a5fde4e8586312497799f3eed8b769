27505ad0681562f5bffbf31e215c8038
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = deepCyclicCopy;
var EMPTY = new Set();

function deepCyclicCopy(value) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    blacklist: EMPTY,
    keepPrototype: false
  };
  var cycles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new WeakMap();

  if (typeof value !== 'object' || value === null) {
    return value;
  } else if (cycles.has(value)) {
    return cycles.get(value);
  } else if (Array.isArray(value)) {
    return deepCyclicCopyArray(value, options, cycles);
  } else {
    return deepCyclicCopyObject(value, options, cycles);
  }
}

function deepCyclicCopyObject(object, options, cycles) {
  var newObject = options.keepPrototype ? Object.create(Object.getPrototypeOf(object)) : {};
  var descriptors = Object.getOwnPropertyDescriptors(object);
  cycles.set(object, newObject);
  Object.keys(descriptors).forEach(function (key) {
    if (options.blacklist && options.blacklist.has(key)) {
      delete descriptors[key];
      return;
    }

    var descriptor = descriptors[key];

    if (typeof descriptor.value !== 'undefined') {
      descriptor.value = deepCyclicCopy(descriptor.value, {
        blacklist: EMPTY,
        keepPrototype: options.keepPrototype
      }, cycles);
    }

    descriptor.configurable = true;
  });
  return Object.defineProperties(newObject, descriptors);
}

function deepCyclicCopyArray(array, options, cycles) {
  var newArray = options.keepPrototype ? new (Object.getPrototypeOf(array).constructor)(array.length) : [];
  var length = array.length;
  cycles.set(array, newArray);

  for (var i = 0; i < length; i++) {
    newArray[i] = deepCyclicCopy(array[i], {
      blacklist: EMPTY,
      keepPrototype: options.keepPrototype
    }, cycles);
  }

  return newArray;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlZXBDeWNsaWNDb3B5LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsImRlZXBDeWNsaWNDb3B5IiwiRU1QVFkiLCJTZXQiLCJvcHRpb25zIiwiYmxhY2tsaXN0Iiwia2VlcFByb3RvdHlwZSIsImN5Y2xlcyIsIldlYWtNYXAiLCJoYXMiLCJnZXQiLCJBcnJheSIsImlzQXJyYXkiLCJkZWVwQ3ljbGljQ29weUFycmF5IiwiZGVlcEN5Y2xpY0NvcHlPYmplY3QiLCJvYmplY3QiLCJuZXdPYmplY3QiLCJjcmVhdGUiLCJnZXRQcm90b3R5cGVPZiIsImRlc2NyaXB0b3JzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsInNldCIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwiZGVzY3JpcHRvciIsImNvbmZpZ3VyYWJsZSIsImRlZmluZVByb3BlcnRpZXMiLCJhcnJheSIsIm5ld0FycmF5IiwiY29uc3RydWN0b3IiLCJsZW5ndGgiLCJpIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sQ0FBQ0UsT0FBUixHQUFrQkMsY0FBbEI7QUFRQSxJQUFNQyxLQUFLLEdBQUcsSUFBSUMsR0FBSixFQUFkOztBQUVBLFNBQVNGLGNBQVQsQ0FDRUYsS0FERixFQU9FO0FBQUEsTUFMQUssT0FLQSx1RUFMVTtBQUNSQyxJQUFBQSxTQUFTLEVBQUVILEtBREg7QUFFUkksSUFBQUEsYUFBYSxFQUFFO0FBRlAsR0FLVjtBQUFBLE1BREFDLE1BQ0EsdUVBRFMsSUFBSUMsT0FBSixFQUNUOztBQUNBLE1BQUksT0FBT1QsS0FBUCxLQUFpQixRQUFqQixJQUE2QkEsS0FBSyxLQUFLLElBQTNDLEVBQWlEO0FBQy9DLFdBQU9BLEtBQVA7QUFDRCxHQUZELE1BRU8sSUFBSVEsTUFBTSxDQUFDRSxHQUFQLENBQVdWLEtBQVgsQ0FBSixFQUF1QjtBQUM1QixXQUFPUSxNQUFNLENBQUNHLEdBQVAsQ0FBV1gsS0FBWCxDQUFQO0FBQ0QsR0FGTSxNQUVBLElBQUlZLEtBQUssQ0FBQ0MsT0FBTixDQUFjYixLQUFkLENBQUosRUFBMEI7QUFDL0IsV0FBT2MsbUJBQW1CLENBQUNkLEtBQUQsRUFBUUssT0FBUixFQUFpQkcsTUFBakIsQ0FBMUI7QUFDRCxHQUZNLE1BRUE7QUFDTCxXQUFPTyxvQkFBb0IsQ0FBQ2YsS0FBRCxFQUFRSyxPQUFSLEVBQWlCRyxNQUFqQixDQUEzQjtBQUNEO0FBQ0Y7O0FBRUQsU0FBU08sb0JBQVQsQ0FBOEJDLE1BQTlCLEVBQXNDWCxPQUF0QyxFQUErQ0csTUFBL0MsRUFBdUQ7QUFDckQsTUFBTVMsU0FBUyxHQUFHWixPQUFPLENBQUNFLGFBQVIsR0FDZFYsTUFBTSxDQUFDcUIsTUFBUCxDQUFjckIsTUFBTSxDQUFDc0IsY0FBUCxDQUFzQkgsTUFBdEIsQ0FBZCxDQURjLEdBRWQsRUFGSjtBQUdBLE1BQU1JLFdBQVcsR0FBR3ZCLE1BQU0sQ0FBQ3dCLHlCQUFQLENBQWlDTCxNQUFqQyxDQUFwQjtBQUNBUixFQUFBQSxNQUFNLENBQUNjLEdBQVAsQ0FBV04sTUFBWCxFQUFtQkMsU0FBbkI7QUFDQXBCLEVBQUFBLE1BQU0sQ0FBQzBCLElBQVAsQ0FBWUgsV0FBWixFQUF5QkksT0FBekIsQ0FBaUMsVUFBQUMsR0FBRyxFQUFJO0FBQ3RDLFFBQUlwQixPQUFPLENBQUNDLFNBQVIsSUFBcUJELE9BQU8sQ0FBQ0MsU0FBUixDQUFrQkksR0FBbEIsQ0FBc0JlLEdBQXRCLENBQXpCLEVBQXFEO0FBQ25ELGFBQU9MLFdBQVcsQ0FBQ0ssR0FBRCxDQUFsQjtBQUNBO0FBQ0Q7O0FBRUQsUUFBTUMsVUFBVSxHQUFHTixXQUFXLENBQUNLLEdBQUQsQ0FBOUI7O0FBRUEsUUFBSSxPQUFPQyxVQUFVLENBQUMxQixLQUFsQixLQUE0QixXQUFoQyxFQUE2QztBQUMzQzBCLE1BQUFBLFVBQVUsQ0FBQzFCLEtBQVgsR0FBbUJFLGNBQWMsQ0FDL0J3QixVQUFVLENBQUMxQixLQURvQixFQUUvQjtBQUNFTSxRQUFBQSxTQUFTLEVBQUVILEtBRGI7QUFFRUksUUFBQUEsYUFBYSxFQUFFRixPQUFPLENBQUNFO0FBRnpCLE9BRitCLEVBTS9CQyxNQU4rQixDQUFqQztBQVFEOztBQUVEa0IsSUFBQUEsVUFBVSxDQUFDQyxZQUFYLEdBQTBCLElBQTFCO0FBQ0QsR0FwQkQ7QUFxQkEsU0FBTzlCLE1BQU0sQ0FBQytCLGdCQUFQLENBQXdCWCxTQUF4QixFQUFtQ0csV0FBbkMsQ0FBUDtBQUNEOztBQUVELFNBQVNOLG1CQUFULENBQTZCZSxLQUE3QixFQUFvQ3hCLE9BQXBDLEVBQTZDRyxNQUE3QyxFQUFxRDtBQUNuRCxNQUFNc0IsUUFBUSxHQUFHekIsT0FBTyxDQUFDRSxhQUFSLEdBQ2IsS0FBS1YsTUFBTSxDQUFDc0IsY0FBUCxDQUFzQlUsS0FBdEIsRUFBNkJFLFdBQWxDLEVBQStDRixLQUFLLENBQUNHLE1BQXJELENBRGEsR0FFYixFQUZKO0FBR0EsTUFBTUEsTUFBTSxHQUFHSCxLQUFLLENBQUNHLE1BQXJCO0FBQ0F4QixFQUFBQSxNQUFNLENBQUNjLEdBQVAsQ0FBV08sS0FBWCxFQUFrQkMsUUFBbEI7O0FBRUEsT0FBSyxJQUFJRyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHRCxNQUFwQixFQUE0QkMsQ0FBQyxFQUE3QixFQUFpQztBQUMvQkgsSUFBQUEsUUFBUSxDQUFDRyxDQUFELENBQVIsR0FBYy9CLGNBQWMsQ0FDMUIyQixLQUFLLENBQUNJLENBQUQsQ0FEcUIsRUFFMUI7QUFDRTNCLE1BQUFBLFNBQVMsRUFBRUgsS0FEYjtBQUVFSSxNQUFBQSxhQUFhLEVBQUVGLE9BQU8sQ0FBQ0U7QUFGekIsS0FGMEIsRUFNMUJDLE1BTjBCLENBQTVCO0FBUUQ7O0FBRUQsU0FBT3NCLFFBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBkZWVwQ3ljbGljQ29weTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuY29uc3QgRU1QVFkgPSBuZXcgU2V0KCk7XG5cbmZ1bmN0aW9uIGRlZXBDeWNsaWNDb3B5KFxuICB2YWx1ZSxcbiAgb3B0aW9ucyA9IHtcbiAgICBibGFja2xpc3Q6IEVNUFRZLFxuICAgIGtlZXBQcm90b3R5cGU6IGZhbHNlXG4gIH0sXG4gIGN5Y2xlcyA9IG5ldyBXZWFrTWFwKClcbikge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JyB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSBlbHNlIGlmIChjeWNsZXMuaGFzKHZhbHVlKSkge1xuICAgIHJldHVybiBjeWNsZXMuZ2V0KHZhbHVlKTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBkZWVwQ3ljbGljQ29weUFycmF5KHZhbHVlLCBvcHRpb25zLCBjeWNsZXMpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBkZWVwQ3ljbGljQ29weU9iamVjdCh2YWx1ZSwgb3B0aW9ucywgY3ljbGVzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZWVwQ3ljbGljQ29weU9iamVjdChvYmplY3QsIG9wdGlvbnMsIGN5Y2xlcykge1xuICBjb25zdCBuZXdPYmplY3QgPSBvcHRpb25zLmtlZXBQcm90b3R5cGVcbiAgICA/IE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCkpXG4gICAgOiB7fTtcbiAgY29uc3QgZGVzY3JpcHRvcnMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3QpO1xuICBjeWNsZXMuc2V0KG9iamVjdCwgbmV3T2JqZWN0KTtcbiAgT2JqZWN0LmtleXMoZGVzY3JpcHRvcnMpLmZvckVhY2goa2V5ID0+IHtcbiAgICBpZiAob3B0aW9ucy5ibGFja2xpc3QgJiYgb3B0aW9ucy5ibGFja2xpc3QuaGFzKGtleSkpIHtcbiAgICAgIGRlbGV0ZSBkZXNjcmlwdG9yc1trZXldO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGRlc2NyaXB0b3IgPSBkZXNjcmlwdG9yc1trZXldO1xuXG4gICAgaWYgKHR5cGVvZiBkZXNjcmlwdG9yLnZhbHVlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZGVzY3JpcHRvci52YWx1ZSA9IGRlZXBDeWNsaWNDb3B5KFxuICAgICAgICBkZXNjcmlwdG9yLnZhbHVlLFxuICAgICAgICB7XG4gICAgICAgICAgYmxhY2tsaXN0OiBFTVBUWSxcbiAgICAgICAgICBrZWVwUHJvdG90eXBlOiBvcHRpb25zLmtlZXBQcm90b3R5cGVcbiAgICAgICAgfSxcbiAgICAgICAgY3ljbGVzXG4gICAgICApO1xuICAgIH1cblxuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgfSk7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhuZXdPYmplY3QsIGRlc2NyaXB0b3JzKTtcbn1cblxuZnVuY3Rpb24gZGVlcEN5Y2xpY0NvcHlBcnJheShhcnJheSwgb3B0aW9ucywgY3ljbGVzKSB7XG4gIGNvbnN0IG5ld0FycmF5ID0gb3B0aW9ucy5rZWVwUHJvdG90eXBlXG4gICAgPyBuZXcgKE9iamVjdC5nZXRQcm90b3R5cGVPZihhcnJheSkuY29uc3RydWN0b3IpKGFycmF5Lmxlbmd0aClcbiAgICA6IFtdO1xuICBjb25zdCBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIGN5Y2xlcy5zZXQoYXJyYXksIG5ld0FycmF5KTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgbmV3QXJyYXlbaV0gPSBkZWVwQ3ljbGljQ29weShcbiAgICAgIGFycmF5W2ldLFxuICAgICAge1xuICAgICAgICBibGFja2xpc3Q6IEVNUFRZLFxuICAgICAgICBrZWVwUHJvdG90eXBlOiBvcHRpb25zLmtlZXBQcm90b3R5cGVcbiAgICAgIH0sXG4gICAgICBjeWNsZXNcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIG5ld0FycmF5O1xufVxuIl19