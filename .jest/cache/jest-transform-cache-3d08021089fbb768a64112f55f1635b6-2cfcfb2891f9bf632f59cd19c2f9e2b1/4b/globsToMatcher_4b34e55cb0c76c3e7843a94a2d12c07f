ac9f96e09adb25ee265ab3a5014b4520
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = globsToMatcher;

function _picomatch() {
  var data = _interopRequireDefault(require('picomatch'));

  _picomatch = function _picomatch() {
    return data;
  };

  return data;
}

var _replacePathSepForGlob = _interopRequireDefault(require("./replacePathSepForGlob"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var globsToMatchersMap = new Map();
var picomatchOptions = {
  dot: true
};

function globsToMatcher(globs) {
  if (globs.length === 0) {
    return function () {
      return false;
    };
  }

  var matchers = globs.map(function (glob) {
    if (!globsToMatchersMap.has(glob)) {
      var isMatch = (0, _picomatch().default)(glob, picomatchOptions, true);
      var matcher = {
        isMatch: isMatch,
        negated: isMatch.state.negated || !!isMatch.state.negatedExtglob
      };
      globsToMatchersMap.set(glob, matcher);
    }

    return globsToMatchersMap.get(glob);
  });
  return function (path) {
    var replacedPath = (0, _replacePathSepForGlob.default)(path);
    var kept = undefined;
    var negatives = 0;

    for (var i = 0; i < matchers.length; i++) {
      var _matchers$i = matchers[i],
          isMatch = _matchers$i.isMatch,
          negated = _matchers$i.negated;

      if (negated) {
        negatives++;
      }

      var matched = isMatch(replacedPath);

      if (!matched && negated) {
        kept = false;
      } else if (matched && !negated) {
        kept = true;
      }
    }

    return negatives === matchers.length ? kept !== false : !!kept;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdsb2JzVG9NYXRjaGVyLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsImdsb2JzVG9NYXRjaGVyIiwiX3BpY29tYXRjaCIsImRhdGEiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZXBsYWNlUGF0aFNlcEZvckdsb2IiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZ2xvYnNUb01hdGNoZXJzTWFwIiwiTWFwIiwicGljb21hdGNoT3B0aW9ucyIsImRvdCIsImdsb2JzIiwibGVuZ3RoIiwibWF0Y2hlcnMiLCJtYXAiLCJnbG9iIiwiaGFzIiwiaXNNYXRjaCIsIm1hdGNoZXIiLCJuZWdhdGVkIiwic3RhdGUiLCJuZWdhdGVkRXh0Z2xvYiIsInNldCIsImdldCIsInBhdGgiLCJyZXBsYWNlZFBhdGgiLCJrZXB0IiwidW5kZWZpbmVkIiwibmVnYXRpdmVzIiwiaSIsIm1hdGNoZWQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxFQUFBQSxLQUFLLEVBQUU7QUFEb0MsQ0FBN0M7QUFHQUQsT0FBTyxDQUFDRSxPQUFSLEdBQWtCQyxjQUFsQjs7QUFFQSxTQUFTQyxVQUFULEdBQXNCO0FBQ3BCLE1BQU1DLElBQUksR0FBR0Msc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxXQUFELENBQVIsQ0FBbkM7O0FBRUFILEVBQUFBLFVBQVUsR0FBRyxzQkFBWTtBQUN2QixXQUFPQyxJQUFQO0FBQ0QsR0FGRDs7QUFJQSxTQUFPQSxJQUFQO0FBQ0Q7O0FBRUQsSUFBSUcsc0JBQXNCLEdBQUdGLHNCQUFzQixDQUNqREMsT0FBTywyQkFEMEMsQ0FBbkQ7O0FBSUEsU0FBU0Qsc0JBQVQsQ0FBZ0NHLEdBQWhDLEVBQXFDO0FBQ25DLFNBQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QjtBQUFDUCxJQUFBQSxPQUFPLEVBQUVPO0FBQVYsR0FBckM7QUFDRDs7QUFRRCxJQUFNRSxrQkFBa0IsR0FBRyxJQUFJQyxHQUFKLEVBQTNCO0FBQ0EsSUFBTUMsZ0JBQWdCLEdBQUc7QUFDdkJDLEVBQUFBLEdBQUcsRUFBRTtBQURrQixDQUF6Qjs7QUFxQkEsU0FBU1gsY0FBVCxDQUF3QlksS0FBeEIsRUFBK0I7QUFDN0IsTUFBSUEsS0FBSyxDQUFDQyxNQUFOLEtBQWlCLENBQXJCLEVBQXdCO0FBR3RCLFdBQU87QUFBQSxhQUFNLEtBQU47QUFBQSxLQUFQO0FBQ0Q7O0FBRUQsTUFBTUMsUUFBUSxHQUFHRixLQUFLLENBQUNHLEdBQU4sQ0FBVSxVQUFBQyxJQUFJLEVBQUk7QUFDakMsUUFBSSxDQUFDUixrQkFBa0IsQ0FBQ1MsR0FBbkIsQ0FBdUJELElBQXZCLENBQUwsRUFBbUM7QUFDakMsVUFBTUUsT0FBTyxHQUFHLENBQUMsR0FBR2pCLFVBQVUsR0FBR0YsT0FBakIsRUFBMEJpQixJQUExQixFQUFnQ04sZ0JBQWhDLEVBQWtELElBQWxELENBQWhCO0FBQ0EsVUFBTVMsT0FBTyxHQUFHO0FBQ2RELFFBQUFBLE9BQU8sRUFBUEEsT0FEYztBQUlkRSxRQUFBQSxPQUFPLEVBQUVGLE9BQU8sQ0FBQ0csS0FBUixDQUFjRCxPQUFkLElBQXlCLENBQUMsQ0FBQ0YsT0FBTyxDQUFDRyxLQUFSLENBQWNDO0FBSnBDLE9BQWhCO0FBTUFkLE1BQUFBLGtCQUFrQixDQUFDZSxHQUFuQixDQUF1QlAsSUFBdkIsRUFBNkJHLE9BQTdCO0FBQ0Q7O0FBRUQsV0FBT1gsa0JBQWtCLENBQUNnQixHQUFuQixDQUF1QlIsSUFBdkIsQ0FBUDtBQUNELEdBYmdCLENBQWpCO0FBY0EsU0FBTyxVQUFBUyxJQUFJLEVBQUk7QUFDYixRQUFNQyxZQUFZLEdBQUcsQ0FBQyxHQUFHckIsc0JBQXNCLENBQUNOLE9BQTNCLEVBQW9DMEIsSUFBcEMsQ0FBckI7QUFDQSxRQUFJRSxJQUFJLEdBQUdDLFNBQVg7QUFDQSxRQUFJQyxTQUFTLEdBQUcsQ0FBaEI7O0FBRUEsU0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHaEIsUUFBUSxDQUFDRCxNQUE3QixFQUFxQ2lCLENBQUMsRUFBdEMsRUFBMEM7QUFDeEMsd0JBQTJCaEIsUUFBUSxDQUFDZ0IsQ0FBRCxDQUFuQztBQUFBLFVBQU9aLE9BQVAsZUFBT0EsT0FBUDtBQUFBLFVBQWdCRSxPQUFoQixlQUFnQkEsT0FBaEI7O0FBRUEsVUFBSUEsT0FBSixFQUFhO0FBQ1hTLFFBQUFBLFNBQVM7QUFDVjs7QUFFRCxVQUFNRSxPQUFPLEdBQUdiLE9BQU8sQ0FBQ1EsWUFBRCxDQUF2Qjs7QUFFQSxVQUFJLENBQUNLLE9BQUQsSUFBWVgsT0FBaEIsRUFBeUI7QUFJdkJPLFFBQUFBLElBQUksR0FBRyxLQUFQO0FBQ0QsT0FMRCxNQUtPLElBQUlJLE9BQU8sSUFBSSxDQUFDWCxPQUFoQixFQUF5QjtBQUc5Qk8sUUFBQUEsSUFBSSxHQUFHLElBQVA7QUFDRDtBQUNGOztBQU9ELFdBQU9FLFNBQVMsS0FBS2YsUUFBUSxDQUFDRCxNQUF2QixHQUFnQ2MsSUFBSSxLQUFLLEtBQXpDLEdBQWlELENBQUMsQ0FBQ0EsSUFBMUQ7QUFDRCxHQWhDRDtBQWlDRCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBnbG9ic1RvTWF0Y2hlcjtcblxuZnVuY3Rpb24gX3BpY29tYXRjaCgpIHtcbiAgY29uc3QgZGF0YSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgncGljb21hdGNoJykpO1xuXG4gIF9waWNvbWF0Y2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbnZhciBfcmVwbGFjZVBhdGhTZXBGb3JHbG9iID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChcbiAgcmVxdWlyZSgnLi9yZXBsYWNlUGF0aFNlcEZvckdsb2InKVxuKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtkZWZhdWx0OiBvYmp9O1xufVxuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5jb25zdCBnbG9ic1RvTWF0Y2hlcnNNYXAgPSBuZXcgTWFwKCk7XG5jb25zdCBwaWNvbWF0Y2hPcHRpb25zID0ge1xuICBkb3Q6IHRydWVcbn07XG4vKipcbiAqIENvbnZlcnRzIGEgbGlzdCBvZiBnbG9icyBpbnRvIGEgZnVuY3Rpb24gdGhhdCBtYXRjaGVzIGEgcGF0aCBhZ2FpbnN0IHRoZVxuICogZ2xvYnMuXG4gKlxuICogRXZlcnkgdGltZSBwaWNvbWF0Y2ggaXMgY2FsbGVkLCBpdCB3aWxsIHBhcnNlIHRoZSBnbG9iIHN0cmluZ3MgYW5kIHR1cm5cbiAqIHRoZW0gaW50byByZWdleHAgaW5zdGFuY2VzLiBJbnN0ZWFkIG9mIGNhbGxpbmcgcGljb21hdGNoIHJlcGVhdGVkbHkgd2l0aFxuICogdGhlIHNhbWUgZ2xvYnMsIHdlIGNhbiB1c2UgdGhpcyBmdW5jdGlvbiB3aGljaCB3aWxsIGJ1aWxkIHRoZSBwaWNvbWF0Y2hcbiAqIG1hdGNoZXJzIGFoZWFkIG9mIHRpbWUgYW5kIHRoZW4gaGF2ZSBhbiBvcHRpbWl6ZWQgcGF0aCBmb3IgZGV0ZXJtaW5pbmdcbiAqIHdoZXRoZXIgYW4gaW5kaXZpZHVhbCBwYXRoIG1hdGNoZXMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyBpbnRlbmRlZCB0byBtYXRjaCB0aGUgYmVoYXZpb3Igb2YgYG1pY3JvbWF0Y2goKWAuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IGlzTWF0Y2ggPSBnbG9ic1RvTWF0Y2hlcihbJyouanMnLCAnISoudGVzdC5qcyddKTtcbiAqIGlzTWF0Y2goJ3BpenphLmpzJyk7IC8vIHRydWVcbiAqIGlzTWF0Y2goJ3BpenphLnRlc3QuanMnKTsgLy8gZmFsc2VcbiAqL1xuXG5mdW5jdGlvbiBnbG9ic1RvTWF0Y2hlcihnbG9icykge1xuICBpZiAoZ2xvYnMubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gU2luY2UgdGhlcmUgd2VyZSBubyBnbG9icyBnaXZlbiwgd2UgY2FuIHNpbXBseSBoYXZlIGEgZmFzdCBwYXRoIGhlcmUgYW5kXG4gICAgLy8gcmV0dXJuIHdpdGggYSB2ZXJ5IHNpbXBsZSBmdW5jdGlvbi5cbiAgICByZXR1cm4gKCkgPT4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBtYXRjaGVycyA9IGdsb2JzLm1hcChnbG9iID0+IHtcbiAgICBpZiAoIWdsb2JzVG9NYXRjaGVyc01hcC5oYXMoZ2xvYikpIHtcbiAgICAgIGNvbnN0IGlzTWF0Y2ggPSAoMCwgX3BpY29tYXRjaCgpLmRlZmF1bHQpKGdsb2IsIHBpY29tYXRjaE9wdGlvbnMsIHRydWUpO1xuICAgICAgY29uc3QgbWF0Y2hlciA9IHtcbiAgICAgICAgaXNNYXRjaCxcbiAgICAgICAgLy8gTWF0Y2hlcnMgdGhhdCBhcmUgbmVnYXRlZCBoYXZlIGRpZmZlcmVudCBiZWhhdmlvciB0aGFuIG1hdGNoZXJzIHRoYXRcbiAgICAgICAgLy8gYXJlIG5vdCBuZWdhdGVkLCBzbyB3ZSBuZWVkIHRvIHN0b3JlIHRoaXMgaW5mb3JtYXRpb24gYWhlYWQgb2YgdGltZS5cbiAgICAgICAgbmVnYXRlZDogaXNNYXRjaC5zdGF0ZS5uZWdhdGVkIHx8ICEhaXNNYXRjaC5zdGF0ZS5uZWdhdGVkRXh0Z2xvYlxuICAgICAgfTtcbiAgICAgIGdsb2JzVG9NYXRjaGVyc01hcC5zZXQoZ2xvYiwgbWF0Y2hlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdsb2JzVG9NYXRjaGVyc01hcC5nZXQoZ2xvYik7XG4gIH0pO1xuICByZXR1cm4gcGF0aCA9PiB7XG4gICAgY29uc3QgcmVwbGFjZWRQYXRoID0gKDAsIF9yZXBsYWNlUGF0aFNlcEZvckdsb2IuZGVmYXVsdCkocGF0aCk7XG4gICAgbGV0IGtlcHQgPSB1bmRlZmluZWQ7XG4gICAgbGV0IG5lZ2F0aXZlcyA9IDA7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdGNoZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCB7aXNNYXRjaCwgbmVnYXRlZH0gPSBtYXRjaGVyc1tpXTtcblxuICAgICAgaWYgKG5lZ2F0ZWQpIHtcbiAgICAgICAgbmVnYXRpdmVzKys7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG1hdGNoZWQgPSBpc01hdGNoKHJlcGxhY2VkUGF0aCk7XG5cbiAgICAgIGlmICghbWF0Y2hlZCAmJiBuZWdhdGVkKSB7XG4gICAgICAgIC8vIFRoZSBwYXRoIHdhcyBub3QgbWF0Y2hlZCwgYW5kIHRoZSBtYXRjaGVyIGlzIGEgbmVnYXRlZCBtYXRjaGVyLCBzbyB3ZVxuICAgICAgICAvLyB3YW50IHRvIG9taXQgdGhlIHBhdGguIFRoaXMgbWVhbnMgdGhhdCB0aGUgbmVnYXRpdmUgbWF0Y2hlciBpc1xuICAgICAgICAvLyBmaWx0ZXJpbmcgdGhlIHBhdGggb3V0LlxuICAgICAgICBrZXB0ID0gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKG1hdGNoZWQgJiYgIW5lZ2F0ZWQpIHtcbiAgICAgICAgLy8gVGhlIHBhdGggd2FzIG1hdGNoZWQsIGFuZCB0aGUgbWF0Y2hlciBpcyBub3QgYSBuZWdhdGVkIG1hdGNoZXIsIHNvIHdlXG4gICAgICAgIC8vIHdhbnQgdG8ga2VlcCB0aGUgcGF0aC5cbiAgICAgICAga2VwdCA9IHRydWU7XG4gICAgICB9XG4gICAgfSAvLyBJZiBhbGwgb2YgdGhlIGdsb2JzIHdlcmUgbmVnYXRpdmUgZ2xvYnMsIHRoZW4gd2Ugd2FudCB0byBpbmNsdWRlIHRoZSBwYXRoXG4gICAgLy8gYXMgbG9uZyBhcyBpdCB3YXMgbm90IGV4cGxpY2l0bHkgbm90IGtlcHQuIE90aGVyd2lzZSBvbmx5IGluY2x1ZGVcbiAgICAvLyB0aGUgcGF0aCBpZiBpdCB3YXMga2VwdC4gVGhpcyBhbGxvd3Mgc2V0cyBvZiBnbG9icyB0aGF0IGFyZSBhbGwgbmVnYXRlZFxuICAgIC8vIHRvIGFsbG93IHNvbWUgcGF0aHMgdG8gYmUgbWF0Y2hlZCwgd2hpbGUgc2V0cyBvZiBnbG9icyB0aGF0IGFyZSBtaXhlZFxuICAgIC8vIG5lZ2F0ZWQgYW5kIG5vbi1uZWdhdGVkIHRvIGNhdXNlIHRoZSBuZWdhdGVkIG1hdGNoZXJzIHRvIG9ubHkgb21pdCBwYXRoc1xuICAgIC8vIGFuZCBub3Qga2VlcCB0aGVtLlxuXG4gICAgcmV0dXJuIG5lZ2F0aXZlcyA9PT0gbWF0Y2hlcnMubGVuZ3RoID8ga2VwdCAhPT0gZmFsc2UgOiAhIWtlcHQ7XG4gIH07XG59XG4iXX0=