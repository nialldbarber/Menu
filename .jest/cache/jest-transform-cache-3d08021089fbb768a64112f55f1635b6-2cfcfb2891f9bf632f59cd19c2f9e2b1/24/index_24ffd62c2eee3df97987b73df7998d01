1c643f9088f3398806b445668e9596c3
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function _vm() {
  var data = require('vm');

  _vm = function _vm() {
    return data;
  };

  return data;
}

function _fakeTimers() {
  var data = require('@jest/fake-timers');

  _fakeTimers = function _fakeTimers() {
    return data;
  };

  return data;
}

function _jestMock() {
  var data = require('jest-mock');

  _jestMock = function _jestMock() {
    return data;
  };

  return data;
}

function _jestUtil() {
  var data = require('jest-util');

  _jestUtil = function _jestUtil() {
    return data;
  };

  return data;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var NodeEnvironment = function () {
  function NodeEnvironment(config) {
    (0, _classCallCheck2.default)(this, NodeEnvironment);

    _defineProperty(this, 'context', void 0);

    _defineProperty(this, 'fakeTimers', void 0);

    _defineProperty(this, 'fakeTimersModern', void 0);

    _defineProperty(this, 'global', void 0);

    _defineProperty(this, 'moduleMocker', void 0);

    this.context = (0, _vm().createContext)();
    var global = this.global = (0, _vm().runInContext)('this', (0, _extends2.default)(this.context, config.testEnvironmentOptions));
    global.global = global;
    global.clearInterval = clearInterval;
    global.clearTimeout = clearTimeout;
    global.setInterval = setInterval;
    global.setTimeout = setTimeout;
    global.Buffer = Buffer;
    global.setImmediate = setImmediate;
    global.clearImmediate = clearImmediate;
    global.ArrayBuffer = ArrayBuffer;
    global.Uint8Array = Uint8Array;

    if (typeof URL !== 'undefined' && typeof URLSearchParams !== 'undefined') {
      global.URL = URL;
      global.URLSearchParams = URLSearchParams;
    }

    if (typeof TextEncoder !== 'undefined' && typeof TextDecoder !== 'undefined') {
      global.TextEncoder = TextEncoder;
      global.TextDecoder = TextDecoder;
    }

    if (typeof queueMicrotask !== 'undefined') {
      global.queueMicrotask = queueMicrotask;
    }

    if (typeof AbortController !== 'undefined') {
      global.AbortController = AbortController;
    }

    if (typeof Event !== 'undefined') {
      global.Event = Event;
    }

    if (typeof EventTarget !== 'undefined') {
      global.EventTarget = EventTarget;
    }

    (0, _jestUtil().installCommonGlobals)(global, config.globals);
    this.moduleMocker = new (_jestMock().ModuleMocker)(global);

    var timerIdToRef = function timerIdToRef(id) {
      return {
        id: id,
        ref: function ref() {
          return this;
        },
        unref: function unref() {
          return this;
        }
      };
    };

    var timerRefToId = function timerRefToId(timer) {
      return timer && timer.id || undefined;
    };

    var timerConfig = {
      idToRef: timerIdToRef,
      refToId: timerRefToId
    };
    this.fakeTimers = new (_fakeTimers().LegacyFakeTimers)({
      config: config,
      global: global,
      moduleMocker: this.moduleMocker,
      timerConfig: timerConfig
    });
    this.fakeTimersModern = new (_fakeTimers().ModernFakeTimers)({
      config: config,
      global: global
    });
  }

  (0, _createClass2.default)(NodeEnvironment, [{
    key: "setup",
    value: function setup() {
      return _regenerator.default.async(function setup$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
            case "end":
              return _context.stop();
          }
        }
      }, null, null, null, Promise);
    }
  }, {
    key: "teardown",
    value: function teardown() {
      return _regenerator.default.async(function teardown$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (this.fakeTimers) {
                this.fakeTimers.dispose();
              }

              if (this.fakeTimersModern) {
                this.fakeTimersModern.dispose();
              }

              this.context = null;
              this.fakeTimers = null;
              this.fakeTimersModern = null;

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this, null, Promise);
    }
  }, {
    key: "getVmContext",
    value: function getVmContext() {
      return this.context;
    }
  }]);
  return NodeEnvironment;
}();

module.exports = NodeEnvironment;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,