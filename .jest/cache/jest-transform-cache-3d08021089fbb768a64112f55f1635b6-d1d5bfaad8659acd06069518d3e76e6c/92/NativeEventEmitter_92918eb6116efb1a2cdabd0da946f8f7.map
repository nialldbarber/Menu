{"version":3,"sources":["NativeEventEmitter.js"],"names":["DEFAULT_NATIVE_EVENT_EMITTER_OPTIONS","__SECRET_DISABLE_CALLS_INTO_MODULE_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","NativeEventEmitter","nativeModule","options","RCTDeviceEventEmitter","sharedSubscriber","_disableCallsIntoModule","Platform","OS","_nativeModule","eventType","listener","context","addListener","count","listenerCount","removeListeners","subscription","EventEmitter"],"mappings":"AAUA;;;;;;;;;;;;;;;;;;;;;AAEA;;AACA;;AAEA;;AACA;;;;;;AAYA,IAAMA,oCAAoC,GAAG;AAC3CC,EAAAA,kEAAkE,EAAE;AADzB,CAA7C;;IAQqBC,kB;;;;;AAInB,8BACEC,YADF,EAGE;AAAA;;AAAA,QADAC,OACA,uEADqCJ,oCACrC;AAAA;AACA,8BAAMK,+BAAsBC,gBAA5B;AACA,UAAKC,uBAAL,GACEH,OAAO,CAACH,kEADV;;AAEA,QAAIO,kBAASC,EAAT,KAAgB,KAApB,EAA2B;AACzB,8BAAUN,YAAV,EAAwB,+BAAxB;AACA,YAAKO,aAAL,GAAqBP,YAArB;AACD;;AAPD;AAQD;;;;WAED,qBACEQ,SADF,EAEEC,QAFF,EAGEC,OAHF,EAIqB;AACnB,UAAI,KAAKH,aAAL,IAAsB,IAAtB,IAA8B,CAAC,KAAKH,uBAAxC,EAAiE;AAC/D,aAAKG,aAAL,CAAmBI,WAAnB,CAA+BH,SAA/B;AACD;;AACD,6HAAyBA,SAAzB,EAAoCC,QAApC,EAA8CC,OAA9C;AACD;;;WAED,4BAAmBF,SAAnB,EAAsC;AACpC,8BAAUA,SAAV,EAAqB,iCAArB;AACA,UAAMI,KAAK,GAAG,KAAKC,aAAL,CAAmBL,SAAnB,CAAd;;AACA,UAAI,KAAKD,aAAL,IAAsB,IAAtB,IAA8B,CAAC,KAAKH,uBAAxC,EAAiE;AAC/D,aAAKG,aAAL,CAAmBO,eAAnB,CAAmCF,KAAnC;AACD;;AACD,6HAAyBJ,SAAzB;AACD;;;WAED,4BAAmBO,YAAnB,EAAoD;AAClD,UAAI,KAAKR,aAAL,IAAsB,IAAtB,IAA8B,CAAC,KAAKH,uBAAxC,EAAiE;AAC/D,aAAKG,aAAL,CAAmBO,eAAnB,CAAmC,CAAnC;AACD;;AACD,6HAAyBC,YAAzB;AACD;;;EA1C6CC,sB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nimport Platform from '../Utilities/Platform';\nimport EventEmitter from '../vendor/emitter/EventEmitter';\nimport {type EventSubscription} from '../vendor/emitter/EventEmitter';\nimport RCTDeviceEventEmitter from './RCTDeviceEventEmitter';\nimport invariant from 'invariant';\n\ntype NativeModule = {\n  +addListener: (eventType: string) => void,\n  +removeListeners: (count: number) => void,\n  ...\n};\n\ntype NativeEventEmitterOptions = $ReadOnly<{|\n  __SECRET_DISABLE_CALLS_INTO_MODULE_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: boolean,\n|}>;\n\nconst DEFAULT_NATIVE_EVENT_EMITTER_OPTIONS = {\n  __SECRET_DISABLE_CALLS_INTO_MODULE_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: false,\n};\n\n/**\n * Abstract base class for implementing event-emitting modules. This implements\n * a subset of the standard EventEmitter node module API.\n */\nexport default class NativeEventEmitter extends EventEmitter {\n  _nativeModule: ?NativeModule;\n  _disableCallsIntoModule: boolean;\n\n  constructor(\n    nativeModule: ?NativeModule,\n    options: NativeEventEmitterOptions = DEFAULT_NATIVE_EVENT_EMITTER_OPTIONS,\n  ) {\n    super(RCTDeviceEventEmitter.sharedSubscriber);\n    this._disableCallsIntoModule =\n      options.__SECRET_DISABLE_CALLS_INTO_MODULE_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n    if (Platform.OS === 'ios') {\n      invariant(nativeModule, 'Native module cannot be null.');\n      this._nativeModule = nativeModule;\n    }\n  }\n\n  addListener(\n    eventType: string,\n    listener: Function,\n    context: ?Object,\n  ): EventSubscription {\n    if (this._nativeModule != null && !this._disableCallsIntoModule) {\n      this._nativeModule.addListener(eventType);\n    }\n    return super.addListener(eventType, listener, context);\n  }\n\n  removeAllListeners(eventType: string) {\n    invariant(eventType, 'eventType argument is required.');\n    const count = this.listenerCount(eventType);\n    if (this._nativeModule != null && !this._disableCallsIntoModule) {\n      this._nativeModule.removeListeners(count);\n    }\n    super.removeAllListeners(eventType);\n  }\n\n  removeSubscription(subscription: EventSubscription) {\n    if (this._nativeModule != null && !this._disableCallsIntoModule) {\n      this._nativeModule.removeListeners(1);\n    }\n    super.removeSubscription(subscription);\n  }\n}\n"]}