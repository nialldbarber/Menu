{"version":3,"sources":["SafeAreaProviderCompat.tsx"],"names":["width","height","Dimensions","initialMetrics","initialWindowMetrics","frame","x","y","insets","top","left","right","bottom","style","styles","SafeAreaProviderCompat","container","flex"],"mappings":";;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAQA,IAAA,2BAAA,GAAA,OAAA,CAAA,gCAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA,4BAAkCE,YAAAA,CAAAA,UAAAA,CAAAA,GAAAA,CAAlC,QAAkCA,CAAlC;AAAA,mDAAQF,KAAR;AAAA,IAAQA,KAAR,uCAAM,CAAN;AAAA,mDAAmBC,MAAnB;AAAA,IAAmBA,MAAnB,uCAA4B,CAA5B;;AAKA,IAAME,cAAc,GAClB,YAAA,CAAA,QAAA,CAAA,EAAA,KAAA,KAAA,IAAyBC,2BAAAA,CAAAA,oBAAAA,IAAzB,IAAA,GACI;AACEC,EAAAA,KAAK,EAAE;AAAEC,IAAAA,CAAC,EAAH,CAAA;AAAQC,IAAAA,CAAC,EAAT,CAAA;AAAcP,IAAAA,KAAd,EAAcA,KAAd;AAAqBC,IAAAA,MAAAA,EAAAA;AAArB,GADT;AAEEO,EAAAA,MAAM,EAAE;AAAEC,IAAAA,GAAG,EAAL,CAAA;AAAUC,IAAAA,IAAI,EAAd,CAAA;AAAmBC,IAAAA,KAAK,EAAxB,CAAA;AAA6BC,IAAAA,MAAM,EAAE;AAArC;AAFV,CADJ,GAKIR,2BAAAA,CANN,oBAAA;;AAQe,SAAA,sBAAA,OAA4D;AAAA,MAA5B,QAA4B,QAA5B,QAA4B;AAAA,MAAhBS,KAAgB,QAAhBA,KAAgB;AACzE,SACE,KAAA,CAAA,aAAA,CAAC,2BAAA,CAAD,qBAAC,CAAD,QAAA,EAAA,IAAA,EACIL,UAAAA,MAAD,EAAY;AACX,QAAA,MAAA,EAAY;AAIV,aAAO,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAA;AAAM,QAAA,KAAK,EAAE,CAACM,MAAM,CAAP,SAAA,EAAA,KAAA;AAAb,OAAA,EAAP,QAAO,CAAP;AACD;;AAED,WACE,KAAA,CAAA,aAAA,CAAC,2BAAA,CAAD,gBAAA,EAAA;AAAkB,MAAA,cAAc,EAAhC,cAAA;AAAkD,MAAA,KAAK,EAAED;AAAzD,KAAA,EADF,QACE,CADF;AAVN,GACE,CADF;AAkBD;;AAEDE,sBAAsB,CAAtBA,cAAAA,GAAAA,cAAAA;;AAEA,IAAMD,MAAM,GAAG,YAAA,CAAA,UAAA,CAAA,MAAA,CAAkB;AAC/BE,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE;AADG;AADoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  Dimensions,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport {\n  initialWindowMetrics,\n  SafeAreaInsetsContext,\n  SafeAreaProvider,\n} from 'react-native-safe-area-context';\n\ntype Props = {\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst { width = 0, height = 0 } = Dimensions.get('window');\n\n// To support SSR on web, we need to have empty insets for initial values\n// Otherwise there can be mismatch between SSR and client output\n// We also need to specify empty values to support tests environments\nconst initialMetrics =\n  Platform.OS === 'web' || initialWindowMetrics == null\n    ? {\n        frame: { x: 0, y: 0, width, height },\n        insets: { top: 0, left: 0, right: 0, bottom: 0 },\n      }\n    : initialWindowMetrics;\n\nexport default function SafeAreaProviderCompat({ children, style }: Props) {\n  return (\n    <SafeAreaInsetsContext.Consumer>\n      {(insets) => {\n        if (insets) {\n          // If we already have insets, don't wrap the stack in another safe area provider\n          // This avoids an issue with updates at the cost of potentially incorrect values\n          // https://github.com/react-navigation/react-navigation/issues/174\n          return <View style={[styles.container, style]}>{children}</View>;\n        }\n\n        return (\n          <SafeAreaProvider initialMetrics={initialMetrics} style={style}>\n            {children}\n          </SafeAreaProvider>\n        );\n      }}\n    </SafeAreaInsetsContext.Consumer>\n  );\n}\n\nSafeAreaProviderCompat.initialMetrics = initialMetrics;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]}