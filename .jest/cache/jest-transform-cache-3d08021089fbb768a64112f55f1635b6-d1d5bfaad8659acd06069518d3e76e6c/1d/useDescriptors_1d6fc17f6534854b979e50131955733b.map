{"version":3,"sources":["useDescriptors.tsx"],"names":["emitter","React","stackRef","NavigationBuilderContext","context","navigation","onAction","addListener","addKeyedListener","onRouteFocus","onDispatchAction","onOptionsChange","navigations","state","getState","setOptions","router","routes","config","screens","route","screen","optionsList","options","customOptions","curr","mergedOptions","defaultScreenOptions","clearOptions","o","rest","acc","render"],"mappings":"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","sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  AddKeyedListener,\n  AddListener,\n} from './NavigationBuilderContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport SceneView from './SceneView';\nimport type {\n  Descriptor,\n  EventMapBase,\n  NavigationHelpers,\n  NavigationProp,\n  RouteConfig,\n  RouteProp,\n} from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport useRouteCache from './useRouteCache';\n\nexport type ScreenConfigWithParent<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  keys: (string | undefined)[];\n  options: (ScreenOptionsOrCallback<ScreenOptions> | undefined)[] | undefined;\n  props: RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>;\n};\n\ntype ScreenOptionsOrCallback<ScreenOptions extends {}> =\n  | ScreenOptions\n  | ((props: {\n      route: RouteProp<ParamListBase, string>;\n      navigation: any;\n    }) => ScreenOptions);\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  state: State;\n  screens: Record<\n    string,\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?: ScreenOptionsOrCallback<ScreenOptions>;\n  defaultScreenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase>;\n        navigation: any;\n        options: ScreenOptions;\n      }) => ScreenOptions);\n  onAction: (action: NavigationAction) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addListener: AddListener;\n  addKeyedListener: AddKeyedListener;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMap>;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  defaultScreenOptions,\n  onAction,\n  getState,\n  setState,\n  addListener,\n  addKeyedListener,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { onDispatchAction, onOptionsChange, stackRef } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n      stackRef,\n    }),\n    [\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n      stackRef,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions, EventMap>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  const routes = useRouteCache(state.routes);\n\n  return routes.reduce<\n    Record<\n      string,\n      Descriptor<\n        ScreenOptions,\n        NavigationProp<ParamListBase, string, State, ScreenOptions, EventMap> &\n          ActionHelpers,\n        RouteProp<ParamListBase>\n      >\n    >\n  >((acc, route, i) => {\n    const config = screens[route.name];\n    const screen = config.props;\n    const navigation = navigations[route.key];\n\n    const optionsList = [\n      // The default `screenOptions` passed to the navigator\n      screenOptions,\n      // The `screenOptions` props passed to `Group` elements\n      ...((config.options\n        ? config.options.filter(Boolean)\n        : []) as ScreenOptionsOrCallback<ScreenOptions>[]),\n      // The `options` prop passed to `Screen` elements,\n      screen.options,\n      // The options set via `navigation.setOptions`\n      options[route.key],\n    ];\n\n    const customOptions = optionsList.reduce<ScreenOptions>(\n      (acc, curr) =>\n        Object.assign(\n          acc,\n          typeof curr !== 'function' ? curr : curr({ route, navigation })\n        ),\n      {} as ScreenOptions\n    );\n\n    const mergedOptions = {\n      ...(typeof defaultScreenOptions === 'function'\n        ? // @ts-expect-error: ts gives incorrect error here\n          defaultScreenOptions({\n            route,\n            navigation,\n            options: customOptions,\n          })\n        : defaultScreenOptions),\n      ...customOptions,\n    };\n\n    const clearOptions = () =>\n      setOptions((o) => {\n        if (route.key in o) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const { [route.key]: _, ...rest } = o;\n          return rest;\n        }\n\n        return o;\n      });\n\n    acc[route.key] = {\n      route,\n      // @ts-expect-error: it's missing action helpers, fix later\n      navigation,\n      render() {\n        return (\n          <NavigationBuilderContext.Provider key={route.key} value={context}>\n            <NavigationContext.Provider value={navigation}>\n              <NavigationRouteContext.Provider value={route}>\n                <SceneView\n                  navigation={navigation}\n                  route={route}\n                  screen={screen}\n                  routeState={state.routes[i].state}\n                  getState={getState}\n                  setState={setState}\n                  options={mergedOptions}\n                  clearOptions={clearOptions}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          </NavigationBuilderContext.Provider>\n        );\n      },\n      options: mergedOptions as ScreenOptions,\n    };\n\n    return acc;\n  }, {});\n}\n"]}