{"version":3,"sources":["createNativeStackNavigator.tsx"],"names":["rest","navigation","StackRouter","initialRouteName","children","screenListeners","screenOptions","React","e","isFocused","requestAnimationFrame","state","StackActions","target","key","descriptors"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;AAWA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAOA,IAAA,gBAAA,GAAA,sBAAA,CAAA,OAAA,4BAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAAA,oBAAA,OAM8B;AAAA,MANA,gBAMA,QANA,gBAMA;AAAA,MANA,QAMA,QANA,QAMA;AAAA,MANA,eAMA,QANA,eAMA;AAAA,MANA,aAMA,QANA,aAMA;AAAA,MADzBA,IACyB;;AAC5B,cAA2C,CAAA,GAAA,OAAA,CAAA,oBAAA,EAMzCE,OAAAA,CANyC,WAAA,EAM5B;AACbC,IAAAA,gBADa,EACbA,gBADa;AAEbC,IAAAA,QAFa,EAEbA,QAFa;AAGbC,IAAAA,eAHa,EAGbA,eAHa;AAIbC,IAAAA,aAAAA,EAAAA;AAJa,GAN4B,CAA3C;AAAA,MAAM,KAAN,SAAM,KAAN;AAAA,MAAM,WAAN,SAAM,WAAN;AAAA,MAA4BL,UAA5B,SAA4BA,UAA5B;;AAaAM,EAAAA,KAAK,CAALA,SAAAA,CACE,YAAA;AAAA,QAAA,qBAAA;;AAAA,WACEN,UADF,KAAA,IACEA,IAAAA,UADF,KAAA,KAAA,CACEA,GADF,KAAA,CACEA,GADF,CAAA,qBAAA,GACEA,UAAU,CADZ,WAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GACEA,qBAAAA,CAAAA,IAAAA,CAAAA,UAAAA,EAAU,UAAVA,EAAuCO,UAAAA,CAAD,EAAY;AAChD,UAAMC,SAAS,GAAGR,UAAU,CADoB,SAC9BA,EAAlB;AAIAS,MAAAA,qBAAqB,CAAC,YAAM;AAC1B,YACEC,KAAK,CAALA,KAAAA,GAAAA,CAAAA,IAAAA,SAAAA,IAEA,CAAEH,CAAD,CAHH,gBAAA,EAIE;AAGAP,UAAAA,UAAU,CAAVA,QAAAA,iCACKW,OAAAA,CAAAA,YAAAA,CADe,QACfA,EADLX;AAEEY,YAAAA,MAAM,EAAEF,KAAK,CAACG;AAFhBb;AAID;AAZHS,OAAqB,CAArBA;AANJ,KACET,CADF;AADFM,GAAAA,EAsBE,CAAA,UAAA,EAAaI,KAAK,CAAlB,KAAA,EAA0BA,KAAK,CAtBjCJ,GAsBE,CAtBFA;AAyBA,SACE,KAAA,CAAA,aAAA,CAAC,gBAAA,CAAD,OAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,IAAA,KAAK,EAFP,KAAA;AAGE,IAAA,UAAU,EAHZ,UAAA;AAIE,IAAA,WAAW,EAAEQ;AAJf,GAAA,CAAA,CADF;AAQD;;eAEc,CAAA,GAAA,OAAA,CAAA,sBAAA,EAAA,oBAAA,C","sourcesContent":["import {\n  createNavigatorFactory,\n  EventArg,\n  ParamListBase,\n  StackActionHelpers,\n  StackActions,\n  StackNavigationState,\n  StackRouter,\n  StackRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\n\nimport type {\n  NativeStackNavigationEventMap,\n  NativeStackNavigationOptions,\n  NativeStackNavigatorProps,\n} from '../types';\nimport NativeStackView from '../views/NativeStackView';\n\nfunction NativeStackNavigator({\n  initialRouteName,\n  children,\n  screenListeners,\n  screenOptions,\n  ...rest\n}: NativeStackNavigatorProps) {\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    StackNavigationState<ParamListBase>,\n    StackRouterOptions,\n    StackActionHelpers<ParamListBase>,\n    NativeStackNavigationOptions,\n    NativeStackNavigationEventMap\n  >(StackRouter, {\n    initialRouteName,\n    children,\n    screenListeners,\n    screenOptions,\n  });\n\n  React.useEffect(\n    () =>\n      navigation?.addListener?.('tabPress', (e: any) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <NativeStackView\n      {...rest}\n      state={state}\n      navigation={navigation}\n      descriptors={descriptors}\n    />\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState<ParamListBase>,\n  NativeStackNavigationOptions,\n  NativeStackNavigationEventMap,\n  typeof NativeStackNavigator\n>(NativeStackNavigator);\n"]}