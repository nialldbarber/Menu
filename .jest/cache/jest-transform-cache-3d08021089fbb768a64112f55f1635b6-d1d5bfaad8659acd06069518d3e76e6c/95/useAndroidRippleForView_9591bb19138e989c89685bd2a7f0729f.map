{"version":3,"sources":["useAndroidRippleForView.js"],"names":["useAndroidRippleForView","rippleConfig","viewRef","color","borderless","radius","Platform","OS","Version","processedColor","viewProps","nativeBackgroundAndroid","type","rippleRadius","onPressIn","event","view","current","Commands","setPressed","hotspotUpdate","nativeEvent","locationX","locationY","onPressMove","onPressOut"],"mappings":"AAUA;;;;;;;;;AAEA;;AACA;;AAGA;;AACA;;;;;;AAoBe,SAASA,uBAAT,CACbC,YADa,EAEbC,OAFa,EAUX;AACF,aAAoCD,YAApC,WAAoCA,YAApC,GAAoD,EAApD;AAAA,MAAOE,KAAP,QAAOA,KAAP;AAAA,MAAcC,UAAd,QAAcA,UAAd;AAAA,MAA0BC,MAA1B,QAA0BA,MAA1B;;AAEA,SAAO,mBAAQ,YAAM;AACnB,QACEC,sBAASC,EAAT,KAAgB,SAAhB,IACAD,sBAASE,OAAT,IAAoB,EADpB,KAECL,KAAK,IAAI,IAAT,IAAiBC,UAAU,IAAI,IAA/B,IAAuCC,MAAM,IAAI,IAFlD,CADF,EAIE;AACA,UAAMI,cAAc,GAAG,+BAAaN,KAAb,CAAvB;AACA,8BACEM,cAAc,IAAI,IAAlB,IAA0B,OAAOA,cAAP,KAA0B,QADtD,EAEE,yCAFF;AAKA,aAAO;AACLC,QAAAA,SAAS,EAAE;AAETC,UAAAA,uBAAuB,EAAE;AACvBC,YAAAA,IAAI,EAAE,eADiB;AAEvBT,YAAAA,KAAK,EAAEM,cAFgB;AAGvBL,YAAAA,UAAU,EAAEA,UAAU,KAAK,IAHJ;AAIvBS,YAAAA,YAAY,EAAER;AAJS;AAFhB,SADN;AAULS,QAAAA,SAVK,qBAUKC,KAVL,EAU8B;AACjC,cAAMC,IAAI,GAAGd,OAAO,CAACe,OAArB;;AACA,cAAID,IAAI,IAAI,IAAZ,EAAkB;AAAA;;AAChBE,0CAASC,UAAT,CAAoBH,IAApB,EAA0B,IAA1B;;AACAE,0CAASE,aAAT,CACEJ,IADF,2BAEED,KAAK,CAACM,WAAN,CAAkBC,SAFpB,oCAEiC,CAFjC,4BAGEP,KAAK,CAACM,WAAN,CAAkBE,SAHpB,qCAGiC,CAHjC;AAKD;AACF,SApBI;AAqBLC,QAAAA,WArBK,uBAqBOT,KArBP,EAqBgC;AACnC,cAAMC,IAAI,GAAGd,OAAO,CAACe,OAArB;;AACA,cAAID,IAAI,IAAI,IAAZ,EAAkB;AAAA;;AAChBE,0CAASE,aAAT,CACEJ,IADF,4BAEED,KAAK,CAACM,WAAN,CAAkBC,SAFpB,qCAEiC,CAFjC,4BAGEP,KAAK,CAACM,WAAN,CAAkBE,SAHpB,qCAGiC,CAHjC;AAKD;AACF,SA9BI;AA+BLE,QAAAA,UA/BK,sBA+BMV,KA/BN,EA+B+B;AAClC,cAAMC,IAAI,GAAGd,OAAO,CAACe,OAArB;;AACA,cAAID,IAAI,IAAI,IAAZ,EAAkB;AAChBE,0CAASC,UAAT,CAAoBH,IAApB,EAA0B,KAA1B;AACD;AACF;AApCI,OAAP;AAsCD;;AACD,WAAO,IAAP;AACD,GApDM,EAoDJ,CAACb,KAAD,EAAQC,UAAR,EAAoBC,MAApB,EAA4BH,OAA5B,CApDI,CAAP;AAqDD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport invariant from 'invariant';\nimport {Commands} from '../View/ViewNativeComponent';\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\nimport type {PressEvent} from '../../Types/CoreEventTypes';\nimport {Platform, View, processColor} from 'react-native';\nimport * as React from 'react';\nimport {useMemo} from 'react';\n\ntype NativeBackgroundProp = $ReadOnly<{|\n  type: 'RippleAndroid',\n  color: ?number,\n  borderless: boolean,\n  rippleRadius: ?number,\n|}>;\n\nexport type RippleConfig = {|\n  color?: ColorValue,\n  borderless?: boolean,\n  radius?: number,\n|};\n\n/**\n * Provides the event handlers and props for configuring the ripple effect on\n * supported versions of Android.\n */\nexport default function useAndroidRippleForView(\n  rippleConfig: ?RippleConfig,\n  viewRef: {|current: null | React.ElementRef<typeof View>|},\n): ?$ReadOnly<{|\n  onPressIn: (event: PressEvent) => void,\n  onPressMove: (event: PressEvent) => void,\n  onPressOut: (event: PressEvent) => void,\n  viewProps: $ReadOnly<{|\n    nativeBackgroundAndroid: NativeBackgroundProp,\n  |}>,\n|}> {\n  const {color, borderless, radius} = rippleConfig ?? {};\n\n  return useMemo(() => {\n    if (\n      Platform.OS === 'android' &&\n      Platform.Version >= 21 &&\n      (color != null || borderless != null || radius != null)\n    ) {\n      const processedColor = processColor(color);\n      invariant(\n        processedColor == null || typeof processedColor === 'number',\n        'Unexpected color given for Ripple color',\n      );\n\n      return {\n        viewProps: {\n          // Consider supporting `nativeForegroundAndroid`\n          nativeBackgroundAndroid: {\n            type: 'RippleAndroid',\n            color: processedColor,\n            borderless: borderless === true,\n            rippleRadius: radius,\n          },\n        },\n        onPressIn(event: PressEvent): void {\n          const view = viewRef.current;\n          if (view != null) {\n            Commands.setPressed(view, true);\n            Commands.hotspotUpdate(\n              view,\n              event.nativeEvent.locationX ?? 0,\n              event.nativeEvent.locationY ?? 0,\n            );\n          }\n        },\n        onPressMove(event: PressEvent): void {\n          const view = viewRef.current;\n          if (view != null) {\n            Commands.hotspotUpdate(\n              view,\n              event.nativeEvent.locationX ?? 0,\n              event.nativeEvent.locationY ?? 0,\n            );\n          }\n        },\n        onPressOut(event: PressEvent): void {\n          const view = viewRef.current;\n          if (view != null) {\n            Commands.setPressed(view, false);\n          }\n        },\n      };\n    }\n    return null;\n  }, [color, borderless, radius, viewRef]);\n}\n"]}