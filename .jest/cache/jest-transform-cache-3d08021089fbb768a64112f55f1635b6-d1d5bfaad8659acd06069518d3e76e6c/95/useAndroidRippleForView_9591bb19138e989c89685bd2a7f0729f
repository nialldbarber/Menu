1e2bc7795329dcc8cbb1ccbaced6773c
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useAndroidRippleForView;

var _invariant = _interopRequireDefault(require("invariant"));

var _ViewNativeComponent = require("../View/ViewNativeComponent");

var _reactNative = require("react-native");

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function useAndroidRippleForView(rippleConfig, viewRef) {
  var _ref = rippleConfig != null ? rippleConfig : {},
      color = _ref.color,
      borderless = _ref.borderless,
      radius = _ref.radius;

  return (0, React.useMemo)(function () {
    if (_reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= 21 && (color != null || borderless != null || radius != null)) {
      var processedColor = (0, _reactNative.processColor)(color);
      (0, _invariant.default)(processedColor == null || typeof processedColor === 'number', 'Unexpected color given for Ripple color');
      return {
        viewProps: {
          nativeBackgroundAndroid: {
            type: 'RippleAndroid',
            color: processedColor,
            borderless: borderless === true,
            rippleRadius: radius
          }
        },
        onPressIn: function onPressIn(event) {
          var view = viewRef.current;

          if (view != null) {
            var _event$nativeEvent$lo, _event$nativeEvent$lo2;

            _ViewNativeComponent.Commands.setPressed(view, true);

            _ViewNativeComponent.Commands.hotspotUpdate(view, (_event$nativeEvent$lo = event.nativeEvent.locationX) != null ? _event$nativeEvent$lo : 0, (_event$nativeEvent$lo2 = event.nativeEvent.locationY) != null ? _event$nativeEvent$lo2 : 0);
          }
        },
        onPressMove: function onPressMove(event) {
          var view = viewRef.current;

          if (view != null) {
            var _event$nativeEvent$lo3, _event$nativeEvent$lo4;

            _ViewNativeComponent.Commands.hotspotUpdate(view, (_event$nativeEvent$lo3 = event.nativeEvent.locationX) != null ? _event$nativeEvent$lo3 : 0, (_event$nativeEvent$lo4 = event.nativeEvent.locationY) != null ? _event$nativeEvent$lo4 : 0);
          }
        },
        onPressOut: function onPressOut(event) {
          var view = viewRef.current;

          if (view != null) {
            _ViewNativeComponent.Commands.setPressed(view, false);
          }
        }
      };
    }

    return null;
  }, [color, borderless, radius, viewRef]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZUFuZHJvaWRSaXBwbGVGb3JWaWV3LmpzIl0sIm5hbWVzIjpbInVzZUFuZHJvaWRSaXBwbGVGb3JWaWV3IiwicmlwcGxlQ29uZmlnIiwidmlld1JlZiIsImNvbG9yIiwiYm9yZGVybGVzcyIsInJhZGl1cyIsIlBsYXRmb3JtIiwiT1MiLCJWZXJzaW9uIiwicHJvY2Vzc2VkQ29sb3IiLCJ2aWV3UHJvcHMiLCJuYXRpdmVCYWNrZ3JvdW5kQW5kcm9pZCIsInR5cGUiLCJyaXBwbGVSYWRpdXMiLCJvblByZXNzSW4iLCJldmVudCIsInZpZXciLCJjdXJyZW50IiwiQ29tbWFuZHMiLCJzZXRQcmVzc2VkIiwiaG90c3BvdFVwZGF0ZSIsIm5hdGl2ZUV2ZW50IiwibG9jYXRpb25YIiwibG9jYXRpb25ZIiwib25QcmVzc01vdmUiLCJvblByZXNzT3V0Il0sIm1hcHBpbmdzIjoiQUFVQTs7Ozs7Ozs7O0FBRUE7O0FBQ0E7O0FBR0E7O0FBQ0E7Ozs7OztBQW9CZSxTQUFTQSx1QkFBVCxDQUNiQyxZQURhLEVBRWJDLE9BRmEsRUFVWDtBQUNGLGFBQW9DRCxZQUFwQyxXQUFvQ0EsWUFBcEMsR0FBb0QsRUFBcEQ7QUFBQSxNQUFPRSxLQUFQLFFBQU9BLEtBQVA7QUFBQSxNQUFjQyxVQUFkLFFBQWNBLFVBQWQ7QUFBQSxNQUEwQkMsTUFBMUIsUUFBMEJBLE1BQTFCOztBQUVBLFNBQU8sbUJBQVEsWUFBTTtBQUNuQixRQUNFQyxzQkFBU0MsRUFBVCxLQUFnQixTQUFoQixJQUNBRCxzQkFBU0UsT0FBVCxJQUFvQixFQURwQixLQUVDTCxLQUFLLElBQUksSUFBVCxJQUFpQkMsVUFBVSxJQUFJLElBQS9CLElBQXVDQyxNQUFNLElBQUksSUFGbEQsQ0FERixFQUlFO0FBQ0EsVUFBTUksY0FBYyxHQUFHLCtCQUFhTixLQUFiLENBQXZCO0FBQ0EsOEJBQ0VNLGNBQWMsSUFBSSxJQUFsQixJQUEwQixPQUFPQSxjQUFQLEtBQTBCLFFBRHRELEVBRUUseUNBRkY7QUFLQSxhQUFPO0FBQ0xDLFFBQUFBLFNBQVMsRUFBRTtBQUVUQyxVQUFBQSx1QkFBdUIsRUFBRTtBQUN2QkMsWUFBQUEsSUFBSSxFQUFFLGVBRGlCO0FBRXZCVCxZQUFBQSxLQUFLLEVBQUVNLGNBRmdCO0FBR3ZCTCxZQUFBQSxVQUFVLEVBQUVBLFVBQVUsS0FBSyxJQUhKO0FBSXZCUyxZQUFBQSxZQUFZLEVBQUVSO0FBSlM7QUFGaEIsU0FETjtBQVVMUyxRQUFBQSxTQVZLLHFCQVVLQyxLQVZMLEVBVThCO0FBQ2pDLGNBQU1DLElBQUksR0FBR2QsT0FBTyxDQUFDZSxPQUFyQjs7QUFDQSxjQUFJRCxJQUFJLElBQUksSUFBWixFQUFrQjtBQUFBOztBQUNoQkUsMENBQVNDLFVBQVQsQ0FBb0JILElBQXBCLEVBQTBCLElBQTFCOztBQUNBRSwwQ0FBU0UsYUFBVCxDQUNFSixJQURGLDJCQUVFRCxLQUFLLENBQUNNLFdBQU4sQ0FBa0JDLFNBRnBCLG9DQUVpQyxDQUZqQyw0QkFHRVAsS0FBSyxDQUFDTSxXQUFOLENBQWtCRSxTQUhwQixxQ0FHaUMsQ0FIakM7QUFLRDtBQUNGLFNBcEJJO0FBcUJMQyxRQUFBQSxXQXJCSyx1QkFxQk9ULEtBckJQLEVBcUJnQztBQUNuQyxjQUFNQyxJQUFJLEdBQUdkLE9BQU8sQ0FBQ2UsT0FBckI7O0FBQ0EsY0FBSUQsSUFBSSxJQUFJLElBQVosRUFBa0I7QUFBQTs7QUFDaEJFLDBDQUFTRSxhQUFULENBQ0VKLElBREYsNEJBRUVELEtBQUssQ0FBQ00sV0FBTixDQUFrQkMsU0FGcEIscUNBRWlDLENBRmpDLDRCQUdFUCxLQUFLLENBQUNNLFdBQU4sQ0FBa0JFLFNBSHBCLHFDQUdpQyxDQUhqQztBQUtEO0FBQ0YsU0E5Qkk7QUErQkxFLFFBQUFBLFVBL0JLLHNCQStCTVYsS0EvQk4sRUErQitCO0FBQ2xDLGNBQU1DLElBQUksR0FBR2QsT0FBTyxDQUFDZSxPQUFyQjs7QUFDQSxjQUFJRCxJQUFJLElBQUksSUFBWixFQUFrQjtBQUNoQkUsMENBQVNDLFVBQVQsQ0FBb0JILElBQXBCLEVBQTBCLEtBQTFCO0FBQ0Q7QUFDRjtBQXBDSSxPQUFQO0FBc0NEOztBQUNELFdBQU8sSUFBUDtBQUNELEdBcERNLEVBb0RKLENBQUNiLEtBQUQsRUFBUUMsVUFBUixFQUFvQkMsTUFBcEIsRUFBNEJILE9BQTVCLENBcERJLENBQVA7QUFxREQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IHtDb21tYW5kc30gZnJvbSAnLi4vVmlldy9WaWV3TmF0aXZlQ29tcG9uZW50JztcbmltcG9ydCB0eXBlIHtDb2xvclZhbHVlfSBmcm9tICcuLi8uLi9TdHlsZVNoZWV0L1N0eWxlU2hlZXQnO1xuaW1wb3J0IHR5cGUge1ByZXNzRXZlbnR9IGZyb20gJy4uLy4uL1R5cGVzL0NvcmVFdmVudFR5cGVzJztcbmltcG9ydCB7UGxhdGZvcm0sIFZpZXcsIHByb2Nlc3NDb2xvcn0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7dXNlTWVtb30gZnJvbSAncmVhY3QnO1xuXG50eXBlIE5hdGl2ZUJhY2tncm91bmRQcm9wID0gJFJlYWRPbmx5PHt8XG4gIHR5cGU6ICdSaXBwbGVBbmRyb2lkJyxcbiAgY29sb3I6ID9udW1iZXIsXG4gIGJvcmRlcmxlc3M6IGJvb2xlYW4sXG4gIHJpcHBsZVJhZGl1czogP251bWJlcixcbnx9PjtcblxuZXhwb3J0IHR5cGUgUmlwcGxlQ29uZmlnID0ge3xcbiAgY29sb3I/OiBDb2xvclZhbHVlLFxuICBib3JkZXJsZXNzPzogYm9vbGVhbixcbiAgcmFkaXVzPzogbnVtYmVyLFxufH07XG5cbi8qKlxuICogUHJvdmlkZXMgdGhlIGV2ZW50IGhhbmRsZXJzIGFuZCBwcm9wcyBmb3IgY29uZmlndXJpbmcgdGhlIHJpcHBsZSBlZmZlY3Qgb25cbiAqIHN1cHBvcnRlZCB2ZXJzaW9ucyBvZiBBbmRyb2lkLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VBbmRyb2lkUmlwcGxlRm9yVmlldyhcbiAgcmlwcGxlQ29uZmlnOiA/UmlwcGxlQ29uZmlnLFxuICB2aWV3UmVmOiB7fGN1cnJlbnQ6IG51bGwgfCBSZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBWaWV3Pnx9LFxuKTogPyRSZWFkT25seTx7fFxuICBvblByZXNzSW46IChldmVudDogUHJlc3NFdmVudCkgPT4gdm9pZCxcbiAgb25QcmVzc01vdmU6IChldmVudDogUHJlc3NFdmVudCkgPT4gdm9pZCxcbiAgb25QcmVzc091dDogKGV2ZW50OiBQcmVzc0V2ZW50KSA9PiB2b2lkLFxuICB2aWV3UHJvcHM6ICRSZWFkT25seTx7fFxuICAgIG5hdGl2ZUJhY2tncm91bmRBbmRyb2lkOiBOYXRpdmVCYWNrZ3JvdW5kUHJvcCxcbiAgfH0+LFxufH0+IHtcbiAgY29uc3Qge2NvbG9yLCBib3JkZXJsZXNzLCByYWRpdXN9ID0gcmlwcGxlQ29uZmlnID8/IHt9O1xuXG4gIHJldHVybiB1c2VNZW1vKCgpID0+IHtcbiAgICBpZiAoXG4gICAgICBQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnICYmXG4gICAgICBQbGF0Zm9ybS5WZXJzaW9uID49IDIxICYmXG4gICAgICAoY29sb3IgIT0gbnVsbCB8fCBib3JkZXJsZXNzICE9IG51bGwgfHwgcmFkaXVzICE9IG51bGwpXG4gICAgKSB7XG4gICAgICBjb25zdCBwcm9jZXNzZWRDb2xvciA9IHByb2Nlc3NDb2xvcihjb2xvcik7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIHByb2Nlc3NlZENvbG9yID09IG51bGwgfHwgdHlwZW9mIHByb2Nlc3NlZENvbG9yID09PSAnbnVtYmVyJyxcbiAgICAgICAgJ1VuZXhwZWN0ZWQgY29sb3IgZ2l2ZW4gZm9yIFJpcHBsZSBjb2xvcicsXG4gICAgICApO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB2aWV3UHJvcHM6IHtcbiAgICAgICAgICAvLyBDb25zaWRlciBzdXBwb3J0aW5nIGBuYXRpdmVGb3JlZ3JvdW5kQW5kcm9pZGBcbiAgICAgICAgICBuYXRpdmVCYWNrZ3JvdW5kQW5kcm9pZDoge1xuICAgICAgICAgICAgdHlwZTogJ1JpcHBsZUFuZHJvaWQnLFxuICAgICAgICAgICAgY29sb3I6IHByb2Nlc3NlZENvbG9yLFxuICAgICAgICAgICAgYm9yZGVybGVzczogYm9yZGVybGVzcyA9PT0gdHJ1ZSxcbiAgICAgICAgICAgIHJpcHBsZVJhZGl1czogcmFkaXVzLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIG9uUHJlc3NJbihldmVudDogUHJlc3NFdmVudCk6IHZvaWQge1xuICAgICAgICAgIGNvbnN0IHZpZXcgPSB2aWV3UmVmLmN1cnJlbnQ7XG4gICAgICAgICAgaWYgKHZpZXcgIT0gbnVsbCkge1xuICAgICAgICAgICAgQ29tbWFuZHMuc2V0UHJlc3NlZCh2aWV3LCB0cnVlKTtcbiAgICAgICAgICAgIENvbW1hbmRzLmhvdHNwb3RVcGRhdGUoXG4gICAgICAgICAgICAgIHZpZXcsXG4gICAgICAgICAgICAgIGV2ZW50Lm5hdGl2ZUV2ZW50LmxvY2F0aW9uWCA/PyAwLFxuICAgICAgICAgICAgICBldmVudC5uYXRpdmVFdmVudC5sb2NhdGlvblkgPz8gMCxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvblByZXNzTW92ZShldmVudDogUHJlc3NFdmVudCk6IHZvaWQge1xuICAgICAgICAgIGNvbnN0IHZpZXcgPSB2aWV3UmVmLmN1cnJlbnQ7XG4gICAgICAgICAgaWYgKHZpZXcgIT0gbnVsbCkge1xuICAgICAgICAgICAgQ29tbWFuZHMuaG90c3BvdFVwZGF0ZShcbiAgICAgICAgICAgICAgdmlldyxcbiAgICAgICAgICAgICAgZXZlbnQubmF0aXZlRXZlbnQubG9jYXRpb25YID8/IDAsXG4gICAgICAgICAgICAgIGV2ZW50Lm5hdGl2ZUV2ZW50LmxvY2F0aW9uWSA/PyAwLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9uUHJlc3NPdXQoZXZlbnQ6IFByZXNzRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgICBjb25zdCB2aWV3ID0gdmlld1JlZi5jdXJyZW50O1xuICAgICAgICAgIGlmICh2aWV3ICE9IG51bGwpIHtcbiAgICAgICAgICAgIENvbW1hbmRzLnNldFByZXNzZWQodmlldywgZmFsc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LCBbY29sb3IsIGJvcmRlcmxlc3MsIHJhZGl1cywgdmlld1JlZl0pO1xufVxuIl19