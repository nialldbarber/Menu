{"version":3,"sources":["ScrollViewStickyHeader.js"],"names":["AnimatedView","AnimatedImplementation","createAnimatedComponent","View","ScrollViewStickyHeader","state","measured","layoutY","layoutHeight","nextHeaderLayoutY","props","translateY","_translateY","_shouldRecreateTranslateY","_haveReceivedInitialZeroTranslateY","_debounceTimeout","Platform","OS","_onLayout","event","nativeEvent","layout","y","height","setState","onLayout","child","React","Children","only","children","_setComponentRef","ref","_ref","nextProps","scrollViewHeight","scrollAnimatedValue","inverted","isFabric","_animatedValueListenerId","removeListener","_animatedValueListener","value","_timer","clearTimeout","setTimeout","addListener","stateNode","canonical","inputRange","outputRange","stickStartPoint","push","collisionPoint","updateTranslateListener","interpolate","passthroughAnimatedPropExplicitValues","style","transform","nativeID","styles","header","cloneElement","fill","undefined","Component","StyleSheet","create","zIndex","position","flex","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport AnimatedImplementation from '../../Animated/AnimatedImplementation';\nimport * as React from 'react';\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport View from '../View/View';\nimport Platform from '../../Utilities/Platform';\n\nimport type {LayoutEvent} from '../../Types/CoreEventTypes';\n\nconst AnimatedView = AnimatedImplementation.createAnimatedComponent(View);\n\nexport type Props = {\n  children?: React.Element<any>,\n  nextHeaderLayoutY: ?number,\n  onLayout: (event: LayoutEvent) => void,\n  scrollAnimatedValue: AnimatedImplementation.Value,\n  // Will cause sticky headers to stick at the bottom of the ScrollView instead\n  // of the top.\n  inverted: ?boolean,\n  // The height of the parent ScrollView. Currently only set when inverted.\n  scrollViewHeight: ?number,\n  nativeID?: ?string,\n  ...\n};\n\ntype State = {\n  measured: boolean,\n  layoutY: number,\n  layoutHeight: number,\n  nextHeaderLayoutY: ?number,\n  translateY: ?number,\n  ...\n};\n\nclass ScrollViewStickyHeader extends React.Component<Props, State> {\n  state: State = {\n    measured: false,\n    layoutY: 0,\n    layoutHeight: 0,\n    nextHeaderLayoutY: this.props.nextHeaderLayoutY,\n    translateY: null,\n  };\n\n  _translateY: ?AnimatedImplementation.Interpolation = null;\n  _shouldRecreateTranslateY: boolean = true;\n  _haveReceivedInitialZeroTranslateY: boolean = true;\n  _ref: any; // TODO T53738161: flow type this, and the whole file\n\n  // Fabric-only:\n  _timer: ?TimeoutID;\n  _animatedValueListenerId: string;\n  _animatedValueListener: (valueObject: $ReadOnly<{|value: number|}>) => void;\n  _debounceTimeout: number = Platform.OS === 'android' ? 15 : 64;\n\n  setNextHeaderY(y: number) {\n    this._shouldRecreateTranslateY = true;\n    this.setState({nextHeaderLayoutY: y});\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (\n      nextProps.scrollViewHeight !== this.props.scrollViewHeight ||\n      nextProps.scrollAnimatedValue !== this.props.scrollAnimatedValue ||\n      nextProps.inverted !== this.props.inverted\n    ) {\n      this._shouldRecreateTranslateY = true;\n    }\n  }\n\n  updateTranslateListener(\n    translateY: AnimatedImplementation.Interpolation,\n    isFabric: boolean,\n  ) {\n    if (this._translateY != null && this._animatedValueListenerId != null) {\n      this._translateY.removeListener(this._animatedValueListenerId);\n    }\n\n    this._translateY = translateY;\n    this._shouldRecreateTranslateY = false;\n\n    if (!isFabric) {\n      return;\n    }\n\n    if (!this._animatedValueListener) {\n      // This is called whenever the (Interpolated) Animated Value\n      // updates, which is several times per frame during scrolling.\n      // To ensure that the Fabric ShadowTree has the most recent\n      // translate style of this node, we debounce the value and then\n      // pass it through to the underlying node during render.\n      // This is:\n      // 1. Only an issue in Fabric.\n      // 2. Worse in Android than iOS. In Android, but not iOS, you\n      //    can touch and move your finger slightly and still trigger\n      //    a \"tap\" event. In iOS, moving will cancel the tap in\n      //    both Fabric and non-Fabric. On Android when you move\n      //    your finger, the hit-detection moves from the Android\n      //    platform to JS, so we need the ShadowTree to have knowledge\n      //    of the current position.\n      this._animatedValueListener = ({value}) => {\n        // When the AnimatedInterpolation is recreated, it always initializes\n        // to a value of zero and emits a value change of 0 to its listeners.\n        if (value === 0 && !this._haveReceivedInitialZeroTranslateY) {\n          this._haveReceivedInitialZeroTranslateY = true;\n          return;\n        }\n        if (this._timer) {\n          clearTimeout(this._timer);\n        }\n        this._timer = setTimeout(() => {\n          if (value !== this.state.translateY) {\n            this.setState({\n              translateY: value,\n            });\n          }\n        }, this._debounceTimeout);\n      };\n    }\n    if (this.state.translateY !== 0 && this.state.translateY != null) {\n      this._haveReceivedInitialZeroTranslateY = false;\n    }\n    this._animatedValueListenerId = translateY.addListener(\n      this._animatedValueListener,\n    );\n  }\n\n  _onLayout = event => {\n    const layoutY = event.nativeEvent.layout.y;\n    const layoutHeight = event.nativeEvent.layout.height;\n    const measured = true;\n\n    if (\n      layoutY !== this.state.layoutY ||\n      layoutHeight !== this.state.layoutHeight ||\n      measured !== this.state.measured\n    ) {\n      this._shouldRecreateTranslateY = true;\n    }\n\n    this.setState({\n      measured,\n      layoutY,\n      layoutHeight,\n    });\n\n    this.props.onLayout(event);\n    const child = React.Children.only(this.props.children);\n    if (child.props.onLayout) {\n      child.props.onLayout(event);\n    }\n  };\n\n  _setComponentRef = ref => {\n    this._ref = ref;\n  };\n\n  render(): React.Node {\n    // Fabric Detection\n    // eslint-disable-next-line dot-notation\n    const isFabric = !!(\n      this._ref && this._ref['_internalInstanceHandle']?.stateNode?.canonical\n    );\n\n    // Initially and in the case of updated props or layout, we\n    // recreate this interpolated value. Otherwise, we do not recreate\n    // when there are state changes.\n    if (this._shouldRecreateTranslateY) {\n      const {inverted, scrollViewHeight} = this.props;\n      const {measured, layoutHeight, layoutY, nextHeaderLayoutY} = this.state;\n      const inputRange: Array<number> = [-1, 0];\n      const outputRange: Array<number> = [0, 0];\n\n      if (measured) {\n        if (inverted) {\n          // The interpolation looks like:\n          // - Negative scroll: no translation\n          // - `stickStartPoint` is the point at which the header will start sticking.\n          //   It is calculated using the ScrollView viewport height so it is a the bottom.\n          // - Headers that are in the initial viewport will never stick, `stickStartPoint`\n          //   will be negative.\n          // - From 0 to `stickStartPoint` no translation. This will cause the header\n          //   to scroll normally until it reaches the top of the scroll view.\n          // - From `stickStartPoint` to when the next header y hits the bottom edge of the header: translate\n          //   equally to scroll. This will cause the header to stay at the top of the scroll view.\n          // - Past the collision with the next header y: no more translation. This will cause the\n          //   header to continue scrolling up and make room for the next sticky header.\n          //   In the case that there is no next header just translate equally to\n          //   scroll indefinitely.\n          if (scrollViewHeight != null) {\n            const stickStartPoint = layoutY + layoutHeight - scrollViewHeight;\n            if (stickStartPoint > 0) {\n              inputRange.push(stickStartPoint);\n              outputRange.push(0);\n              inputRange.push(stickStartPoint + 1);\n              outputRange.push(1);\n              // If the next sticky header has not loaded yet (probably windowing) or is the last\n              // we can just keep it sticked forever.\n              const collisionPoint =\n                (nextHeaderLayoutY || 0) - layoutHeight - scrollViewHeight;\n              if (collisionPoint > stickStartPoint) {\n                inputRange.push(collisionPoint, collisionPoint + 1);\n                outputRange.push(\n                  collisionPoint - stickStartPoint,\n                  collisionPoint - stickStartPoint,\n                );\n              }\n            }\n          }\n        } else {\n          // The interpolation looks like:\n          // - Negative scroll: no translation\n          // - From 0 to the y of the header: no translation. This will cause the header\n          //   to scroll normally until it reaches the top of the scroll view.\n          // - From header y to when the next header y hits the bottom edge of the header: translate\n          //   equally to scroll. This will cause the header to stay at the top of the scroll view.\n          // - Past the collision with the next header y: no more translation. This will cause the\n          //   header to continue scrolling up and make room for the next sticky header.\n          //   In the case that there is no next header just translate equally to\n          //   scroll indefinitely.\n          inputRange.push(layoutY);\n          outputRange.push(0);\n          // If the next sticky header has not loaded yet (probably windowing) or is the last\n          // we can just keep it sticked forever.\n          const collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight;\n          if (collisionPoint >= layoutY) {\n            inputRange.push(collisionPoint, collisionPoint + 1);\n            outputRange.push(\n              collisionPoint - layoutY,\n              collisionPoint - layoutY,\n            );\n          } else {\n            inputRange.push(layoutY + 1);\n            outputRange.push(1);\n          }\n        }\n      }\n\n      this.updateTranslateListener(\n        this.props.scrollAnimatedValue.interpolate({\n          inputRange,\n          outputRange,\n        }),\n        isFabric,\n      );\n    }\n\n    const child = React.Children.only(this.props.children);\n\n    // TODO T68319535: remove this if NativeAnimated is rewritten for Fabric\n    const passthroughAnimatedPropExplicitValues =\n      isFabric && this.state.translateY != null\n        ? {\n            style: {transform: [{translateY: this.state.translateY}]},\n          }\n        : null;\n\n    return (\n      <AnimatedView\n        collapsable={false}\n        nativeID={this.props.nativeID}\n        onLayout={this._onLayout}\n        ref={this._setComponentRef}\n        style={[\n          child.props.style,\n          styles.header,\n          {transform: [{translateY: this._translateY}]},\n        ]}\n        passthroughAnimatedPropExplicitValues={\n          passthroughAnimatedPropExplicitValues\n        }>\n        {React.cloneElement(child, {\n          style: styles.fill, // We transfer the child style to the wrapper.\n          onLayout: undefined, // we call this manually through our this._onLayout\n        })}\n      </AnimatedView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    zIndex: 10,\n    position: 'relative',\n  },\n  fill: {\n    flex: 1,\n  },\n});\n\nmodule.exports = ScrollViewStickyHeader;\n"]}