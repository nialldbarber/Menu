{"version":3,"sources":["index.native.tsx"],"names":["isPlatformSupported","Platform","ENABLE_SCREENS","shouldEnableScreens","UIManager","console","ENABLE_FREEZE","shouldEnableReactFreeze","minor","parseInt","version","shouldUseActivityState","ScreensNativeModules","NativeScreenValue","NativeScreenContainerValue","NativeScreenNavigationContainerValue","NativeScreenStack","NativeScreenStackHeaderConfig","NativeScreenStackHeaderSubview","NativeSearchBar","NativeFullWindowOverlay","children","React","freeze","setImmediate","setFreezeState","rest","size","childrenWithFreeze","Animated","setNativeProps","ref","render","enabled","AnimatedNativeScreen","props","active","activityState","processedColor","display","nativeEvent","progress","closing","goingForward","useNativeDriver","setRef","styles","headerSubview","position","top","right","flexDirection","alignItems","justifyContent","ScreenStackHeaderBackButtonImage","ScreenStackHeaderRightView","ScreenStackHeaderLeftView","ScreenStackHeaderCenterView","ScreenStackHeaderSearchBarView","ScreenContext","module","Screen","ScreenContainer","ScreenStack","isSearchBarAvailableForCurrentPlatform","View","enableScreens","enableFreeze","screensEnabled","useTransitionProgress","executeNativeBackPress"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  Animated,\n  Image,\n  ImageProps,\n  Platform,\n  requireNativeComponent,\n  StyleSheet,\n  UIManager,\n  View,\n  ViewProps,\n} from 'react-native';\nimport { Freeze } from 'react-freeze';\n// @ts-ignore Getting private component\n// eslint-disable-next-line import/default\nimport processColor from 'react-native/Libraries/StyleSheet/processColor';\nimport { version } from 'react-native/package.json';\n\nimport TransitionProgressContext from './TransitionProgressContext';\nimport useTransitionProgress from './useTransitionProgress';\nimport {\n  StackPresentationTypes,\n  StackAnimationTypes,\n  BlurEffectTypes,\n  ScreenReplaceTypes,\n  ScreenOrientationTypes,\n  HeaderSubviewTypes,\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n  SearchBarProps,\n} from './types';\nimport {\n  isSearchBarAvailableForCurrentPlatform,\n  executeNativeBackPress,\n} from './utils';\n\n// web implementation is taken from `index.tsx`\nconst isPlatformSupported =\n  Platform.OS === 'ios' ||\n  Platform.OS === 'android' ||\n  Platform.OS === 'windows';\n\nlet ENABLE_SCREENS = isPlatformSupported;\n\nfunction enableScreens(shouldEnableScreens = true): void {\n  ENABLE_SCREENS = isPlatformSupported && shouldEnableScreens;\n  if (ENABLE_SCREENS && !UIManager.getViewManagerConfig('RNSScreen')) {\n    console.error(\n      `Screen native module hasn't been linked. Please check the react-native-screens README for more details`\n    );\n  }\n}\n\nlet ENABLE_FREEZE = false;\n\nfunction enableFreeze(shouldEnableReactFreeze = true): void {\n  const minor = parseInt(version.split('.')[1]); // eg. takes 66 from '0.66.0'\n\n  // react-freeze requires react-native >=0.64, react-native from main is 0.0.0\n  if (!(minor === 0 || minor >= 64) && shouldEnableReactFreeze) {\n    console.warn(\n      'react-freeze library requires at least react-native 0.64. Please upgrade your react-native version in order to use this feature.'\n    );\n  }\n\n  ENABLE_FREEZE = shouldEnableReactFreeze;\n}\n\n// const that tells if the library should use new implementation, will be undefined for older versions\nconst shouldUseActivityState = true;\n\nfunction screensEnabled(): boolean {\n  return ENABLE_SCREENS;\n}\n\n// We initialize these lazily so that importing the module doesn't throw error when not linked\n// This is necessary coz libraries such as React Navigation import the library where it may not be enabled\nlet NativeScreenValue: React.ComponentType<ScreenProps>;\nlet NativeScreenContainerValue: React.ComponentType<ScreenContainerProps>;\nlet NativeScreenNavigationContainerValue: React.ComponentType<ScreenContainerProps>;\nlet NativeScreenStack: React.ComponentType<ScreenStackProps>;\nlet NativeScreenStackHeaderConfig: React.ComponentType<ScreenStackHeaderConfigProps>;\nlet NativeScreenStackHeaderSubview: React.ComponentType<React.PropsWithChildren<\n  ViewProps & { type?: HeaderSubviewTypes }\n>>;\nlet AnimatedNativeScreen: React.ComponentType<ScreenProps>;\nlet NativeSearchBar: React.ComponentType<SearchBarProps>;\nlet NativeFullWindowOverlay: React.ComponentType<View>;\n\nconst ScreensNativeModules = {\n  get NativeScreen() {\n    NativeScreenValue =\n      NativeScreenValue || requireNativeComponent('RNSScreen');\n    return NativeScreenValue;\n  },\n\n  get NativeScreenContainer() {\n    NativeScreenContainerValue =\n      NativeScreenContainerValue ||\n      requireNativeComponent('RNSScreenContainer');\n    return NativeScreenContainerValue;\n  },\n\n  get NativeScreenNavigationContainer() {\n    NativeScreenNavigationContainerValue =\n      NativeScreenNavigationContainerValue ||\n      (Platform.OS === 'ios'\n        ? requireNativeComponent('RNSScreenNavigationContainer')\n        : this.NativeScreenContainer);\n    return NativeScreenNavigationContainerValue;\n  },\n\n  get NativeScreenStack() {\n    NativeScreenStack =\n      NativeScreenStack || requireNativeComponent('RNSScreenStack');\n    return NativeScreenStack;\n  },\n\n  get NativeScreenStackHeaderConfig() {\n    NativeScreenStackHeaderConfig =\n      NativeScreenStackHeaderConfig ||\n      requireNativeComponent('RNSScreenStackHeaderConfig');\n    return NativeScreenStackHeaderConfig;\n  },\n\n  get NativeScreenStackHeaderSubview() {\n    NativeScreenStackHeaderSubview =\n      NativeScreenStackHeaderSubview ||\n      requireNativeComponent('RNSScreenStackHeaderSubview');\n    return NativeScreenStackHeaderSubview;\n  },\n\n  get NativeSearchBar() {\n    NativeSearchBar = NativeSearchBar || requireNativeComponent('RNSSearchBar');\n    return NativeSearchBar;\n  },\n\n  get NativeFullWindowOverlay() {\n    NativeFullWindowOverlay =\n      NativeFullWindowOverlay || requireNativeComponent('RNSFullWindowOverlay');\n    return NativeFullWindowOverlay;\n  },\n};\n\ninterface FreezeWrapperProps {\n  freeze: boolean;\n  children: React.ReactNode;\n}\n\n// This component allows one more render before freezing the screen.\n// Allows activityState to reach the native side and useIsFocused to work correctly.\nfunction DelayedFreeze({ freeze, children }: FreezeWrapperProps) {\n  // flag used for determining whether freeze should be enabled\n  const [freezeState, setFreezeState] = React.useState(false);\n\n  if (freeze !== freezeState) {\n    // setImmediate is executed at the end of the JS execution block.\n    // Used here for changing the state right after the render.\n    setImmediate(() => {\n      setFreezeState(freeze);\n    });\n  }\n\n  return <Freeze freeze={freeze ? freezeState : false}>{children}</Freeze>;\n}\n\nfunction MaybeFreeze({ freeze, children }: FreezeWrapperProps) {\n  if (ENABLE_FREEZE) {\n    return <DelayedFreeze freeze={freeze}>{children}</DelayedFreeze>;\n  } else {\n    return <>{children}</>;\n  }\n}\n\nfunction ScreenStack(props: ScreenStackProps) {\n  if (ENABLE_FREEZE) {\n    const { children, ...rest } = props;\n    const size = React.Children.count(children);\n    // freezes all screens except the top one\n    const childrenWithFreeze = React.Children.map(children, (child, index) => (\n      <DelayedFreeze freeze={size - index > 1}>{child}</DelayedFreeze>\n    ));\n    return (\n      <ScreensNativeModules.NativeScreenStack {...rest}>\n        {childrenWithFreeze}\n      </ScreensNativeModules.NativeScreenStack>\n    );\n  }\n  return <ScreensNativeModules.NativeScreenStack {...props} />;\n}\n\n// Incomplete type, all accessible properties available at:\n// react-native/Libraries/Components/View/ReactNativeViewViewConfig.js\ninterface ViewConfig extends View {\n  viewConfig: {\n    validAttributes: {\n      style: {\n        display: boolean;\n      };\n    };\n  };\n}\n\nclass Screen extends React.Component<ScreenProps> {\n  private ref: React.ElementRef<typeof View> | null = null;\n  private closing = new Animated.Value(0);\n  private progress = new Animated.Value(0);\n  private goingForward = new Animated.Value(0);\n\n  setNativeProps(props: ScreenProps): void {\n    this.ref?.setNativeProps(props);\n  }\n\n  setRef = (ref: React.ElementRef<typeof View> | null): void => {\n    this.ref = ref;\n    this.props.onComponentRef?.(ref);\n  };\n\n  render() {\n    const { enabled = ENABLE_SCREENS, ...rest } = this.props;\n\n    if (enabled && isPlatformSupported) {\n      AnimatedNativeScreen =\n        AnimatedNativeScreen ||\n        Animated.createAnimatedComponent(ScreensNativeModules.NativeScreen);\n\n      let {\n        // Filter out active prop in this case because it is unused and\n        // can cause problems depending on react-native version:\n        // https://github.com/react-navigation/react-navigation/issues/4886\n        active,\n        activityState,\n        children,\n        isNativeStack,\n        statusBarColor,\n        ...props\n      } = rest;\n\n      if (active !== undefined && activityState === undefined) {\n        console.warn(\n          'It appears that you are using old version of react-navigation library. Please update @react-navigation/bottom-tabs, @react-navigation/stack and @react-navigation/drawer to version 5.10.0 or above to take full advantage of new functionality added to react-native-screens'\n        );\n        activityState = active !== 0 ? 2 : 0; // in the new version, we need one of the screens to have value of 2 after the transition\n      }\n\n      const processedColor = processColor(statusBarColor);\n\n      return (\n        <MaybeFreeze freeze={activityState === 0}>\n          <AnimatedNativeScreen\n            {...props}\n            statusBarColor={processedColor}\n            activityState={activityState}\n            // This prevents showing blank screen when navigating between multiple screens with freezing\n            // https://github.com/software-mansion/react-native-screens/pull/1208\n            ref={(ref: ViewConfig) => {\n              if (ref?.viewConfig?.validAttributes?.style) {\n                ref.viewConfig.validAttributes.style = {\n                  ...ref.viewConfig.validAttributes.style,\n                  display: false,\n                };\n              }\n              this.setRef(ref);\n            }}\n            onTransitionProgress={\n              !isNativeStack\n                ? undefined\n                : Animated.event(\n                    [\n                      {\n                        nativeEvent: {\n                          progress: this.progress,\n                          closing: this.closing,\n                          goingForward: this.goingForward,\n                        },\n                      },\n                    ],\n                    { useNativeDriver: true }\n                  )\n            }>\n            {!isNativeStack ? ( // see comment of this prop in types.tsx for information why it is needed\n              children\n            ) : (\n              <TransitionProgressContext.Provider\n                value={{\n                  progress: this.progress,\n                  closing: this.closing,\n                  goingForward: this.goingForward,\n                }}>\n                {children}\n              </TransitionProgressContext.Provider>\n            )}\n          </AnimatedNativeScreen>\n        </MaybeFreeze>\n      );\n    } else {\n      // same reason as above\n      let {\n        active,\n        activityState,\n        style,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        onComponentRef,\n        ...props\n      } = rest;\n\n      if (active !== undefined && activityState === undefined) {\n        activityState = active !== 0 ? 2 : 0;\n      }\n      return (\n        <Animated.View\n          style={[style, { display: activityState !== 0 ? 'flex' : 'none' }]}\n          ref={this.setRef}\n          {...props}\n        />\n      );\n    }\n  }\n}\n\nfunction ScreenContainer(props: ScreenContainerProps) {\n  const { enabled = ENABLE_SCREENS, hasTwoStates, ...rest } = props;\n\n  if (enabled && isPlatformSupported) {\n    if (hasTwoStates) {\n      return <ScreensNativeModules.NativeScreenNavigationContainer {...rest} />;\n    }\n    return <ScreensNativeModules.NativeScreenContainer {...rest} />;\n  }\n  return <View {...rest} />;\n}\n\nconst styles = StyleSheet.create({\n  headerSubview: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nconst ScreenStackHeaderBackButtonImage = (props: ImageProps): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    type=\"back\"\n    style={styles.headerSubview}>\n    <Image resizeMode=\"center\" fadeDuration={0} {...props} />\n  </ScreensNativeModules.NativeScreenStackHeaderSubview>\n);\n\nconst ScreenStackHeaderRightView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"right\"\n    style={styles.headerSubview}\n  />\n);\n\nconst ScreenStackHeaderLeftView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"left\"\n    style={styles.headerSubview}\n  />\n);\n\nconst ScreenStackHeaderCenterView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"center\"\n    style={styles.headerSubview}\n  />\n);\n\nconst ScreenStackHeaderSearchBarView = (\n  props: React.PropsWithChildren<SearchBarProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"searchBar\"\n    style={styles.headerSubview}\n  />\n);\n\nexport type {\n  StackPresentationTypes,\n  StackAnimationTypes,\n  BlurEffectTypes,\n  ScreenReplaceTypes,\n  ScreenOrientationTypes,\n  HeaderSubviewTypes,\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n  SearchBarProps,\n};\n\n// context to be used when the user wants to use enhanced implementation\n// e.g. to use `react-native-reanimated` (see `reanimated` folder in repo)\nconst ScreenContext = React.createContext(Screen);\n\nmodule.exports = {\n  // these are classes so they are not evaluated until used\n  // so no need to use getters for them\n  Screen,\n  ScreenContainer,\n  ScreenContext,\n  ScreenStack,\n\n  get NativeScreen() {\n    return ScreensNativeModules.NativeScreen;\n  },\n\n  get NativeScreenContainer() {\n    return ScreensNativeModules.NativeScreenContainer;\n  },\n\n  get NativeScreenNavigationContainer() {\n    return ScreensNativeModules.NativeScreenNavigationContainer;\n  },\n\n  get ScreenStackHeaderConfig() {\n    return ScreensNativeModules.NativeScreenStackHeaderConfig;\n  },\n  get ScreenStackHeaderSubview() {\n    return ScreensNativeModules.NativeScreenStackHeaderSubview;\n  },\n  get SearchBar() {\n    if (!isSearchBarAvailableForCurrentPlatform) {\n      console.warn(\n        'Importing SearchBar is only valid on iOS and Android devices.'\n      );\n      return View;\n    }\n\n    return ScreensNativeModules.NativeSearchBar;\n  },\n  get FullWindowOverlay() {\n    if (Platform.OS !== 'ios') {\n      console.warn('Importing FullWindowOverlay is only valid on iOS devices.');\n      return View;\n    }\n\n    return ScreensNativeModules.NativeFullWindowOverlay;\n  },\n  // these are functions and will not be evaluated until used\n  // so no need to use getters for them\n  ScreenStackHeaderBackButtonImage,\n  ScreenStackHeaderRightView,\n  ScreenStackHeaderLeftView,\n  ScreenStackHeaderCenterView,\n  ScreenStackHeaderSearchBarView,\n\n  enableScreens,\n  enableFreeze,\n  screensEnabled,\n  shouldUseActivityState,\n  useTransitionProgress,\n\n  isSearchBarAvailableForCurrentPlatform,\n  executeNativeBackPress,\n};\n"]}