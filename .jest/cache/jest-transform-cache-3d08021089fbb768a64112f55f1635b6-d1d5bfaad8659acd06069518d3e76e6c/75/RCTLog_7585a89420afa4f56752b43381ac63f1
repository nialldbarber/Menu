22eaa3a62e93bdd346091d79f1f31f17
'use strict';

var invariant = require('invariant');

var levelsMap = {
  log: 'log',
  info: 'info',
  warn: 'warn',
  error: 'error',
  fatal: 'error'
};
var warningHandler = null;
var RCTLog = {
  logIfNoNativeHook: function logIfNoNativeHook(level) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    if (typeof global.nativeLoggingHook === 'undefined') {
      RCTLog.logToConsole.apply(RCTLog, [level].concat(args));
    } else {
      if (warningHandler && level === 'warn') {
        warningHandler.apply(void 0, args);
      }
    }
  },
  logToConsole: function logToConsole(level) {
    var _console;

    var logFn = levelsMap[level];
    invariant(logFn, 'Level "' + level + '" not one of ' + Object.keys(levelsMap).toString());

    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    (_console = console)[logFn].apply(_console, args);
  },
  setWarningHandler: function setWarningHandler(handler) {
    warningHandler = handler;
  }
};
module.exports = RCTLog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJDVExvZy5qcyJdLCJuYW1lcyI6WyJpbnZhcmlhbnQiLCJyZXF1aXJlIiwibGV2ZWxzTWFwIiwibG9nIiwiaW5mbyIsIndhcm4iLCJlcnJvciIsImZhdGFsIiwid2FybmluZ0hhbmRsZXIiLCJSQ1RMb2ciLCJsb2dJZk5vTmF0aXZlSG9vayIsImxldmVsIiwiYXJncyIsImdsb2JhbCIsIm5hdGl2ZUxvZ2dpbmdIb29rIiwibG9nVG9Db25zb2xlIiwibG9nRm4iLCJPYmplY3QiLCJrZXlzIiwidG9TdHJpbmciLCJjb25zb2xlIiwic2V0V2FybmluZ0hhbmRsZXIiLCJoYW5kbGVyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBVUE7O0FBRUEsSUFBTUEsU0FBUyxHQUFHQyxPQUFPLENBQUMsV0FBRCxDQUF6Qjs7QUFFQSxJQUFNQyxTQUFTLEdBQUc7QUFDaEJDLEVBQUFBLEdBQUcsRUFBRSxLQURXO0FBRWhCQyxFQUFBQSxJQUFJLEVBQUUsTUFGVTtBQUdoQkMsRUFBQUEsSUFBSSxFQUFFLE1BSFU7QUFJaEJDLEVBQUFBLEtBQUssRUFBRSxPQUpTO0FBS2hCQyxFQUFBQSxLQUFLLEVBQUU7QUFMUyxDQUFsQjtBQVFBLElBQUlDLGNBQTBDLEdBQUcsSUFBakQ7QUFFQSxJQUFNQyxNQUFNLEdBQUc7QUFFYkMsRUFBQUEsaUJBRmEsNkJBRUtDLEtBRkwsRUFFaUQ7QUFBQSxzQ0FBMUJDLElBQTBCO0FBQTFCQSxNQUFBQSxJQUEwQjtBQUFBOztBQUU1RCxRQUFJLE9BQU9DLE1BQU0sQ0FBQ0MsaUJBQWQsS0FBb0MsV0FBeEMsRUFBcUQ7QUFDbkRMLE1BQUFBLE1BQU0sQ0FBQ00sWUFBUCxPQUFBTixNQUFNLEdBQWNFLEtBQWQsU0FBd0JDLElBQXhCLEVBQU47QUFDRCxLQUZELE1BRU87QUFFTCxVQUFJSixjQUFjLElBQUlHLEtBQUssS0FBSyxNQUFoQyxFQUF3QztBQUN0Q0gsUUFBQUEsY0FBYyxNQUFkLFNBQWtCSSxJQUFsQjtBQUNEO0FBQ0Y7QUFDRixHQVpZO0FBZWJHLEVBQUFBLFlBZmEsd0JBZUFKLEtBZkEsRUFlNEM7QUFBQTs7QUFDdkQsUUFBTUssS0FBSyxHQUFHZCxTQUFTLENBQUNTLEtBQUQsQ0FBdkI7QUFDQVgsSUFBQUEsU0FBUyxDQUNQZ0IsS0FETyxFQUVQLFlBQVlMLEtBQVosR0FBb0IsZUFBcEIsR0FBc0NNLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZaEIsU0FBWixFQUF1QmlCLFFBQXZCLEVBRi9CLENBQVQ7O0FBRnVELHVDQUExQlAsSUFBMEI7QUFBMUJBLE1BQUFBLElBQTBCO0FBQUE7O0FBT3ZELGdCQUFBUSxPQUFPLEVBQUNKLEtBQUQsQ0FBUCxpQkFBa0JKLElBQWxCO0FBQ0QsR0F2Qlk7QUF5QmJTLEVBQUFBLGlCQXpCYSw2QkF5QktDLE9BekJMLEVBeUIyQztBQUN0RGQsSUFBQUEsY0FBYyxHQUFHYyxPQUFqQjtBQUNEO0FBM0JZLENBQWY7QUE4QkFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmYsTUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbmNvbnN0IGxldmVsc01hcCA9IHtcbiAgbG9nOiAnbG9nJyxcbiAgaW5mbzogJ2luZm8nLFxuICB3YXJuOiAnd2FybicsXG4gIGVycm9yOiAnZXJyb3InLFxuICBmYXRhbDogJ2Vycm9yJyxcbn07XG5cbmxldCB3YXJuaW5nSGFuZGxlcjogPyguLi5BcnJheTxtaXhlZD4pID0+IHZvaWQgPSBudWxsO1xuXG5jb25zdCBSQ1RMb2cgPSB7XG4gIC8vIGxldmVsIG9uZSBvZiBsb2csIGluZm8sIHdhcm4sIGVycm9yLCBtdXN0Zml4XG4gIGxvZ0lmTm9OYXRpdmVIb29rKGxldmVsOiBzdHJpbmcsIC4uLmFyZ3M6IEFycmF5PG1peGVkPik6IHZvaWQge1xuICAgIC8vIFdlIGFscmVhZHkgcHJpbnRlZCBpbiB0aGUgbmF0aXZlIGNvbnNvbGUsIHNvIG9ubHkgbG9nIGhlcmUgaWYgdXNpbmcgYSBqcyBkZWJ1Z2dlclxuICAgIGlmICh0eXBlb2YgZ2xvYmFsLm5hdGl2ZUxvZ2dpbmdIb29rID09PSAndW5kZWZpbmVkJykge1xuICAgICAgUkNUTG9nLmxvZ1RvQ29uc29sZShsZXZlbCwgLi4uYXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlcG9ydCBuYXRpdmUgd2FybmluZ3MgdG8gTG9nQm94XG4gICAgICBpZiAod2FybmluZ0hhbmRsZXIgJiYgbGV2ZWwgPT09ICd3YXJuJykge1xuICAgICAgICB3YXJuaW5nSGFuZGxlciguLi5hcmdzKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLy8gTG9nIHRvIGNvbnNvbGUgcmVnYXJkbGVzcyBvZiBuYXRpdmVMb2dnaW5nSG9va1xuICBsb2dUb0NvbnNvbGUobGV2ZWw6IHN0cmluZywgLi4uYXJnczogQXJyYXk8bWl4ZWQ+KTogdm9pZCB7XG4gICAgY29uc3QgbG9nRm4gPSBsZXZlbHNNYXBbbGV2ZWxdO1xuICAgIGludmFyaWFudChcbiAgICAgIGxvZ0ZuLFxuICAgICAgJ0xldmVsIFwiJyArIGxldmVsICsgJ1wiIG5vdCBvbmUgb2YgJyArIE9iamVjdC5rZXlzKGxldmVsc01hcCkudG9TdHJpbmcoKSxcbiAgICApO1xuXG4gICAgY29uc29sZVtsb2dGbl0oLi4uYXJncyk7XG4gIH0sXG5cbiAgc2V0V2FybmluZ0hhbmRsZXIoaGFuZGxlcjogdHlwZW9mIHdhcm5pbmdIYW5kbGVyKTogdm9pZCB7XG4gICAgd2FybmluZ0hhbmRsZXIgPSBoYW5kbGVyO1xuICB9LFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSQ1RMb2c7XG4iXX0=