{"version":3,"sources":["PlatformPressable.tsx"],"names":["AnimatedPressable","Animated","Pressable","ANDROID_VERSION_LOLLIPOP","ANDROID_SUPPORTS_RIPPLE","Platform","pressOpacity","rest","dark","React","animateTo","toValue","duration","easing","Easing","useNativeDriver","handlePressIn","e","onPressIn","handlePressOut","onPressOut","color","pressColor","android_ripple","opacity"],"mappings":"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","sourcesContent":["import { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport {\n  Animated,\n  Easing,\n  GestureResponderEvent,\n  Platform,\n  Pressable,\n  PressableProps,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nexport type Props = Omit<PressableProps, 'style'> & {\n  pressColor?: string;\n  pressOpacity?: number;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  children: React.ReactNode;\n};\n\nconst AnimatedPressable = Animated.createAnimatedComponent(Pressable);\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst ANDROID_SUPPORTS_RIPPLE =\n  Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n\n/**\n * PlatformPressable provides an abstraction on top of Pressable to handle platform differences.\n */\nexport default function PlatformPressable({\n  onPressIn,\n  onPressOut,\n  android_ripple,\n  pressColor,\n  pressOpacity = 0.3,\n  style,\n  ...rest\n}: Props) {\n  const { dark } = useTheme();\n  const [opacity] = React.useState(() => new Animated.Value(1));\n\n  const animateTo = (toValue: number, duration: number) => {\n    if (ANDROID_SUPPORTS_RIPPLE) {\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue,\n      duration,\n      easing: Easing.inOut(Easing.quad),\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const handlePressIn = (e: GestureResponderEvent) => {\n    animateTo(pressOpacity, 0);\n    onPressIn?.(e);\n  };\n\n  const handlePressOut = (e: GestureResponderEvent) => {\n    animateTo(1, 200);\n    onPressOut?.(e);\n  };\n\n  return (\n    <AnimatedPressable\n      onPressIn={handlePressIn}\n      onPressOut={handlePressOut}\n      android_ripple={\n        ANDROID_SUPPORTS_RIPPLE\n          ? {\n              color:\n                pressColor !== undefined\n                  ? pressColor\n                  : dark\n                  ? 'rgba(255, 255, 255, .32)'\n                  : 'rgba(0, 0, 0, .32)',\n              ...android_ripple,\n            }\n          : undefined\n      }\n      style={[{ opacity: !ANDROID_SUPPORTS_RIPPLE ? opacity : 1 }, style]}\n      {...rest}\n    />\n  );\n}\n"]}