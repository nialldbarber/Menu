{"version":3,"sources":["StackRouter.tsx"],"names":["StackActions","replace","type","payload","name","params","push","pop","count","popToTop","router","BaseRouter","getInitialState","routeParamList","initialRouteName","options","routeNames","stale","key","index","routes","getRehydratedState","state","route","getStateForRouteNamesChange","routeKeyChanges","Math","getStateForRouteFocus","r","getStateForAction","action","getId","id","i","path","target","source","actionCreators"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport BaseRouter from './BaseRouter';\nimport type {\n  CommonNavigationAction,\n  DefaultRouterOptions,\n  NavigationState,\n  ParamListBase,\n  Route,\n  Router,\n} from './types';\n\nexport type StackActionType =\n  | {\n      type: 'REPLACE';\n      payload: { name: string; key?: string | undefined; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'PUSH';\n      payload: { name: string; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP';\n      payload: { count: number };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP_TO_TOP';\n      source?: string;\n      target?: string;\n    };\n\nexport type StackRouterOptions = DefaultRouterOptions;\n\nexport type StackNavigationState<ParamList extends ParamListBase> =\n  NavigationState<ParamList> & {\n    /**\n     * Type of the router, in this case, it's stack.\n     */\n    type: 'stack';\n  };\n\nexport type StackActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Replace the current route with a new one.\n   *\n   * @param name Route name of the new route.\n   * @param [params] Params object for the new route.\n   */\n  replace<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\n      : [screen: RouteName, params: ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Push a new screen onto the stack.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  push<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\n      : [screen: RouteName, params: ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Pop a screen from the stack.\n   */\n  pop(count?: number): void;\n\n  /**\n   * Pop to the first route in the stack, dismissing all other screens.\n   */\n  popToTop(): void;\n};\n\nexport const StackActions = {\n  replace(name: string, params?: object): StackActionType {\n    return { type: 'REPLACE', payload: { name, params } };\n  },\n  push(name: string, params?: object): StackActionType {\n    return { type: 'PUSH', payload: { name, params } };\n  },\n  pop(count: number = 1): StackActionType {\n    return { type: 'POP', payload: { count } };\n  },\n  popToTop(): StackActionType {\n    return { type: 'POP_TO_TOP' };\n  },\n};\n\nexport default function StackRouter(options: StackRouterOptions) {\n  const router: Router<\n    StackNavigationState<ParamListBase>,\n    CommonNavigationAction | StackActionType\n  > = {\n    ...BaseRouter,\n\n    type: 'stack',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const initialRouteName =\n        options.initialRouteName !== undefined &&\n        routeNames.includes(options.initialRouteName)\n          ? options.initialRouteName\n          : routeNames[0];\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: 0,\n        routeNames,\n        routes: [\n          {\n            key: `${initialRouteName}-${nanoid()}`,\n            name: initialRouteName,\n            params: routeParamList[initialRouteName],\n          },\n        ],\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = state.routes\n        .filter((route) => routeNames.includes(route.name))\n        .map(\n          (route) =>\n            ({\n              ...route,\n              key: route.key || `${route.name}-${nanoid()}`,\n              params:\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...route.params,\n                    }\n                  : route.params,\n            } as Route<string>)\n        );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: routes.length - 1,\n        routeNames,\n        routes,\n      };\n    },\n\n    getStateForRouteNamesChange(\n      state,\n      { routeNames, routeParamList, routeKeyChanges }\n    ) {\n      const routes = state.routes.filter(\n        (route) =>\n          routeNames.includes(route.name) &&\n          !routeKeyChanges.includes(route.name)\n      );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined &&\n          routeNames.includes(options.initialRouteName)\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        ...state,\n        routeNames,\n        routes,\n        index: Math.min(state.index, routes.length - 1),\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return {\n        ...state,\n        index,\n        routes: state.routes.slice(0, index + 1),\n      };\n    },\n\n    getStateForAction(state, action, options) {\n      const { routeParamList } = options;\n\n      switch (action.type) {\n        case 'REPLACE': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index === -1) {\n            return null;\n          }\n\n          const { name, key, params } = action.payload;\n\n          if (!state.routeNames.includes(name)) {\n            return null;\n          }\n\n          return {\n            ...state,\n            routes: state.routes.map((route, i) =>\n              i === index\n                ? {\n                    key: key !== undefined ? key : `${name}-${nanoid()}`,\n                    name,\n                    params:\n                      routeParamList[name] !== undefined\n                        ? {\n                            ...routeParamList[name],\n                            ...params,\n                          }\n                        : params,\n                  }\n                : route\n            ),\n          };\n        }\n\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            const getId = options.routeGetIdList[action.payload.name];\n            const id = getId?.({ params: action.payload.params });\n\n            const route = id\n              ? state.routes.find(\n                  (route) =>\n                    route.name === action.payload.name &&\n                    id === getId?.({ params: route.params })\n                )\n              : undefined;\n\n            let routes: Route<string>[];\n\n            if (route) {\n              routes = state.routes.filter((r) => r.key !== route.key);\n              routes.push({\n                ...route,\n                params:\n                  routeParamList[action.payload.name] !== undefined\n                    ? {\n                        ...routeParamList[action.payload.name],\n                        ...action.payload.params,\n                      }\n                    : action.payload.params,\n              });\n            } else {\n              routes = [\n                ...state.routes,\n                {\n                  key: `${action.payload.name}-${nanoid()}`,\n                  name: action.payload.name,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                },\n              ];\n            }\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n\n        case 'POP': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index > 0) {\n            const count = Math.max(index - action.payload.count + 1, 1);\n            const routes = state.routes\n              .slice(0, count)\n              .concat(state.routes.slice(index + 1));\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n        }\n\n        case 'POP_TO_TOP':\n          return router.getStateForAction(\n            state,\n            {\n              type: 'POP',\n              payload: { count: state.routes.length - 1 },\n            },\n            options\n          );\n\n        case 'NAVIGATE':\n          if (\n            action.payload.name !== undefined &&\n            !state.routeNames.includes(action.payload.name)\n          ) {\n            return null;\n          }\n\n          if (action.payload.key || action.payload.name) {\n            // If the route already exists, navigate to that\n            let index = -1;\n\n            const getId =\n              // `getId` and `key` can't be used together\n              action.payload.key === undefined &&\n              action.payload.name !== undefined\n                ? options.routeGetIdList[action.payload.name]\n                : undefined;\n            const id = getId?.({ params: action.payload.params });\n\n            if (id) {\n              index = state.routes.findIndex(\n                (route) =>\n                  route.name === action.payload.name &&\n                  id === getId?.({ params: route.params })\n              );\n            } else if (\n              (state.routes[state.index].name === action.payload.name &&\n                action.payload.key === undefined) ||\n              state.routes[state.index].key === action.payload.key\n            ) {\n              index = state.index;\n            } else {\n              for (let i = state.routes.length - 1; i >= 0; i--) {\n                if (\n                  (state.routes[i].name === action.payload.name &&\n                    action.payload.key === undefined) ||\n                  state.routes[i].key === action.payload.key\n                ) {\n                  index = i;\n                  break;\n                }\n              }\n            }\n\n            if (\n              index === -1 &&\n              action.payload.key &&\n              action.payload.name === undefined\n            ) {\n              return null;\n            }\n\n            if (index === -1 && action.payload.name !== undefined) {\n              const routes = [\n                ...state.routes,\n                {\n                  key:\n                    action.payload.key ?? `${action.payload.name}-${nanoid()}`,\n                  name: action.payload.name,\n                  path: action.payload.path,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                },\n              ];\n\n              return {\n                ...state,\n                routes,\n                index: routes.length - 1,\n              };\n            }\n\n            const route = state.routes[index];\n\n            let params;\n\n            if (action.payload.merge) {\n              params =\n                action.payload.params !== undefined ||\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...route.params,\n                      ...action.payload.params,\n                    }\n                  : route.params;\n            } else {\n              params =\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...action.payload.params,\n                    }\n                  : action.payload.params;\n            }\n\n            return {\n              ...state,\n              index,\n              routes: [\n                ...state.routes.slice(0, index),\n                params !== route.params ||\n                (action.payload.path && action.payload.path !== route.path)\n                  ? {\n                      ...route,\n                      path: action.payload.path ?? route.path,\n                      params,\n                    }\n                  : state.routes[index],\n              ],\n            };\n          }\n\n          return null;\n\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(\n              state,\n              {\n                type: 'POP',\n                payload: { count: 1 },\n                target: action.target,\n                source: action.source,\n              },\n              options\n            );\n          }\n\n          return null;\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    actionCreators: StackActions,\n  };\n\n  return router;\n}\n"]}