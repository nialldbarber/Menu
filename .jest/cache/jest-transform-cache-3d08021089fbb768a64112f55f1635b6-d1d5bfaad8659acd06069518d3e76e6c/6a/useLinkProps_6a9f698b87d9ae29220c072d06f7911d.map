{"version":3,"sources":["useLinkProps.tsx"],"names":["getStateFromParams","params","routes","name","state","undefined","action","root","React","NavigationContainerRefContext","navigation","NavigationHelpersContext","options","LinkingContext","linkTo","onPress","e","shouldHandle","Platform","getPathFromStateHelper","getPathFromState","href","to","accessibilityRole"],"mappings":"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","sourcesContent":["import {\n  getPathFromState,\n  NavigationAction,\n  NavigationContainerRefContext,\n  NavigationHelpersContext,\n  NavigatorScreenParams,\n  ParamListBase,\n} from '@react-navigation/core';\nimport type { NavigationState, PartialState } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { GestureResponderEvent, Platform } from 'react-native';\n\nimport LinkingContext from './LinkingContext';\nimport useLinkTo, { To } from './useLinkTo';\n\ntype Props<ParamList extends ReactNavigation.RootParamList> = {\n  to: To<ParamList>;\n  action?: NavigationAction;\n};\n\nconst getStateFromParams = (\n  params: NavigatorScreenParams<ParamListBase, NavigationState> | undefined\n): PartialState<NavigationState> | NavigationState | undefined => {\n  if (params?.state) {\n    return params.state;\n  }\n\n  if (params?.screen) {\n    return {\n      routes: [\n        {\n          name: params.screen,\n          params: params.params,\n          // @ts-expect-error\n          state: params.screen\n            ? getStateFromParams(\n                params.params as\n                  | NavigatorScreenParams<ParamListBase, NavigationState>\n                  | undefined\n              )\n            : undefined,\n        },\n      ],\n    };\n  }\n\n  return undefined;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport default function useLinkProps<\n  ParamList extends ReactNavigation.RootParamList\n>({ to, action }: Props<ParamList>) {\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationHelpersContext);\n  const { options } = React.useContext(LinkingContext);\n  const linkTo = useLinkTo<ParamList>();\n\n  const onPress = (\n    e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (\n      !e.defaultPrevented && // onPress prevented default\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      (e.button == null || e.button === 0) && // ignore everything but left clicks\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      [undefined, null, '', 'self'].includes(e.currentTarget?.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\n            \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n          );\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n\n  const getPathFromStateHelper = options?.getPathFromState ?? getPathFromState;\n\n  const href =\n    typeof to === 'string'\n      ? to\n      : getPathFromStateHelper(\n          {\n            routes: [\n              {\n                name: to.screen,\n                // @ts-expect-error\n                params: to.params,\n                // @ts-expect-error\n                state: getStateFromParams(to.params),\n              },\n            ],\n          },\n          options?.config\n        );\n\n  return {\n    href,\n    accessibilityRole: 'link' as const,\n    onPress,\n  };\n}\n"]}