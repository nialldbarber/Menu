{"version":3,"sources":["DrawerRouter.tsx"],"names":["DrawerActions","TabActions","openDrawer","type","closeDrawer","toggleDrawer","defaultStatus","rest","router","isDrawerInHistory","state","Boolean","it","addDrawerToHistory","history","status","removeDrawerFromHistory","getInitialState","routeGetIdList","routeNames","routeParamList","default","stale","key","getRehydratedState","partialState","getStateForRouteFocus","result","getStateForAction","action","actionCreators"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport TabRouter, {\n  TabActionHelpers,\n  TabActions,\n  TabActionType,\n  TabNavigationState,\n  TabRouterOptions,\n} from './TabRouter';\nimport type {\n  CommonNavigationAction,\n  ParamListBase,\n  PartialState,\n  Router,\n} from './types';\nexport type DrawerStatus = 'open' | 'closed';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  defaultStatus?: DrawerStatus;\n};\n\nexport type DrawerNavigationState<ParamList extends ParamListBase> = Omit<\n  TabNavigationState<ParamList>,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * Default status of the drawer.\n   */\n  default: DrawerStatus;\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: (\n    | { type: 'route'; key: string }\n    | { type: 'drawer'; status: DrawerStatus }\n  )[];\n};\n\nexport type DrawerActionHelpers<ParamList extends ParamListBase> =\n  TabActionHelpers<ParamList> & {\n    /**\n     * Open the drawer sidebar.\n     */\n    openDrawer(): void;\n\n    /**\n     * Close the drawer sidebar.\n     */\n    closeDrawer(): void;\n\n    /**\n     * Open the drawer sidebar if closed, or close if opened.\n     */\n    toggleDrawer(): void;\n  };\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nexport default function DrawerRouter({\n  defaultStatus = 'closed',\n  ...rest\n}: DrawerRouterOptions): Router<\n  DrawerNavigationState<ParamListBase>,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = TabRouter(rest) as unknown as Router<\n    DrawerNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  >;\n\n  const isDrawerInHistory = (\n    state:\n      | DrawerNavigationState<ParamListBase>\n      | PartialState<DrawerNavigationState<ParamListBase>>\n  ) => Boolean(state.history?.some((it) => it.type === 'drawer'));\n\n  const addDrawerToHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: [\n        ...state.history,\n        {\n          type: 'drawer',\n          status: defaultStatus === 'open' ? 'closed' : 'open',\n        },\n      ],\n    };\n  };\n\n  const removeDrawerFromHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: state.history.filter((it) => it.type !== 'drawer'),\n    };\n  };\n\n  const openDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n\n    return addDrawerToHistory(state);\n  };\n\n  const closeDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n\n    return removeDrawerFromHistory(state);\n  };\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList, routeGetIdList }) {\n      const state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      return {\n        ...state,\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(\n      partialState,\n      { routeNames, routeParamList, routeGetIdList }\n    ) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (isDrawerInHistory(partialState)) {\n        // Re-sync the drawer entry in history to correct it if it was wrong\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n\n      return {\n        ...state,\n        default: defaultStatus,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return addDrawerToHistory(state);\n\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          const result = router.getStateForAction(state, action, options);\n\n          if (result != null && result.index !== state.index) {\n            return closeDrawer(result as DrawerNavigationState<ParamListBase>);\n          }\n\n          return result;\n        }\n\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"]}