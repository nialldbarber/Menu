{"version":3,"sources":["useNavigationState.tsx"],"names":["navigation","React","selector","selectorRef","unsubscribe","e","setResult"],"mappings":";;;;;;;;;;;AACA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAGA,IAAA,cAAA,GAAA,sBAAA,CAAA,OAAA,mBAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWe,SAAA,kBAAA,CAAA,QAAA,EAEV;AACH,MAAMA,UAAU,GAAG,CAAA,GAAA,cAAA,CADhB,OACgB,GAAnB;;AAIA,wBAAsBC,KAAK,CAALA,QAAAA,CAAe;AAAA,WAAMC,QAAQ,CAACF,UAAU,CAL3D,QAKiDA,EAAD,CAAd;AAAA,GAAfC,CAAtB;AAAA;AAAA,MAAM,SAAN;;AAGA,MAAME,WAAW,GAAGF,KAAK,CAALA,MAAAA,CAApB,QAAoBA,CAApB;AAEAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpBE,IAAAA,WAAW,CAAXA,OAAAA,GAAAA,QAAAA;AADFF,GAAAA;AAIAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAMG,WAAW,GAAG,UAAU,CAAV,WAAA,CAAA,OAAA,EAAiCC,UAAAA,CAAD,EAAO;AACzDC,MAAAA,SAAS,CAACH,WAAW,CAAXA,OAAAA,CAAoBE,CAAC,CAADA,IAAAA,CAA9BC,KAAUH,CAAD,CAATG;AADF,KAAoB,CAApB;AAIA,WAAA,WAAA;AALFL,GAAAA,EAMG,CANHA,UAMG,CANHA;AAQA,SAAOC,QAAQ,CAACF,UAAU,CAA1B,QAAgBA,EAAD,CAAf;AACD","sourcesContent":["import type { NavigationState, ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport type { NavigationProp } from './types';\nimport useNavigation from './useNavigation';\n\ntype Selector<ParamList extends ParamListBase, T> = (\n  state: NavigationState<ParamList>\n) => T;\n\n/**\n * Hook to get a value from the current navigation state using a selector.\n *\n * @param selector Selector function to get a value from the state.\n */\nexport default function useNavigationState<ParamList extends ParamListBase, T>(\n  selector: Selector<ParamList, T>\n): T {\n  const navigation = useNavigation<NavigationProp<ParamList>>();\n\n  // We don't care about the state value, we run the selector again at the end\n  // The state is only to make sure that there's a re-render when we have a new value\n  const [, setResult] = React.useState(() => selector(navigation.getState()));\n\n  // We store the selector in a ref to avoid re-subscribing listeners every render\n  const selectorRef = React.useRef(selector);\n\n  React.useEffect(() => {\n    selectorRef.current = selector;\n  });\n\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('state', (e) => {\n      setResult(selectorRef.current(e.data.state));\n    });\n\n    return unsubscribe;\n  }, [navigation]);\n\n  return selector(navigation.getState());\n}\n"]}