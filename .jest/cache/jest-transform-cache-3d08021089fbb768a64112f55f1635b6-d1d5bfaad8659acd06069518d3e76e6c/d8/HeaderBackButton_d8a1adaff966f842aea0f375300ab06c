a6be509fc52a136ff5438f6f7235e899
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = HeaderBackButton;

var _native = require("@react-navigation/native");

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _MaskedView = _interopRequireDefault(require("../MaskedView"));

var _PlatformPressable = _interopRequireDefault(require("../PlatformPressable"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function HeaderBackButton(_ref) {
  var disabled = _ref.disabled,
      allowFontScaling = _ref.allowFontScaling,
      backImage = _ref.backImage,
      label = _ref.label,
      labelStyle = _ref.labelStyle,
      labelVisible = _ref.labelVisible,
      onLabelLayout = _ref.onLabelLayout,
      onPress = _ref.onPress,
      pressColor = _ref.pressColor,
      pressOpacity = _ref.pressOpacity,
      screenLayout = _ref.screenLayout,
      customTintColor = _ref.tintColor,
      titleLayout = _ref.titleLayout,
      _ref$truncatedLabel = _ref.truncatedLabel,
      truncatedLabel = _ref$truncatedLabel === void 0 ? 'Back' : _ref$truncatedLabel,
      _ref$accessibilityLab = _ref.accessibilityLabel,
      accessibilityLabel = _ref$accessibilityLab === void 0 ? label && label !== 'Back' ? label + ", back" : 'Go back' : _ref$accessibilityLab,
      testID = _ref.testID,
      style = _ref.style;

  var _ref2 = (0, _native.useTheme)(),
      colors = _ref2.colors;

  var _React$useState = React.useState(undefined),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      initialLabelWidth = _React$useState2[0],
      setInitialLabelWidth = _React$useState2[1];

  var tintColor = customTintColor !== undefined ? customTintColor : _reactNative.Platform.select({
    ios: colors.primary,
    default: colors.text
  });

  var handleLabelLayout = function handleLabelLayout(e) {
    onLabelLayout === null || onLabelLayout === void 0 ? void 0 : onLabelLayout(e);
    setInitialLabelWidth(e.nativeEvent.layout.x + e.nativeEvent.layout.width);
  };

  var shouldTruncateLabel = function shouldTruncateLabel() {
    return !label || initialLabelWidth && titleLayout && screenLayout && (screenLayout.width - titleLayout.width) / 2 < initialLabelWidth + 26;
  };

  var renderBackImage = function renderBackImage() {
    if (backImage) {
      return backImage({
        tintColor: tintColor
      });
    } else {
      return React.createElement(_reactNative.Image, {
        style: [styles.icon, Boolean(labelVisible) && styles.iconWithLabel, Boolean(tintColor) && {
          tintColor: tintColor
        }],
        source: require("../assets/back-icon.png"),
        fadeDuration: 0
      });
    }
  };

  var renderLabel = function renderLabel() {
    var leftLabelText = shouldTruncateLabel() ? truncatedLabel : label;

    if (!labelVisible || leftLabelText === undefined) {
      return null;
    }

    var labelElement = React.createElement(_reactNative.View, {
      style: screenLayout ? [styles.labelWrapper, {
        minWidth: screenLayout.width / 2 - 27
      }] : null
    }, React.createElement(_reactNative.Animated.Text, {
      accessible: false,
      onLayout: leftLabelText === label ? handleLabelLayout : undefined,
      style: [styles.label, tintColor ? {
        color: tintColor
      } : null, labelStyle],
      numberOfLines: 1,
      allowFontScaling: !!allowFontScaling
    }, leftLabelText));

    if (backImage || _reactNative.Platform.OS !== 'ios') {
      return labelElement;
    }

    return React.createElement(_MaskedView.default, {
      maskElement: React.createElement(_reactNative.View, {
        style: styles.iconMaskContainer
      }, React.createElement(_reactNative.Image, {
        source: require("../assets/back-icon-mask.png"),
        style: styles.iconMask
      }), React.createElement(_reactNative.View, {
        style: styles.iconMaskFillerRect
      }))
    }, labelElement);
  };

  var handlePress = function handlePress() {
    return onPress && requestAnimationFrame(onPress);
  };

  return React.createElement(_PlatformPressable.default, {
    disabled: disabled,
    accessible: true,
    accessibilityRole: "button",
    accessibilityLabel: accessibilityLabel,
    testID: testID,
    onPress: disabled ? undefined : handlePress,
    pressColor: pressColor,
    pressOpacity: pressOpacity,
    android_ripple: {
      borderless: true
    },
    style: [styles.container, disabled && styles.disabled, style],
    hitSlop: _reactNative.Platform.select({
      ios: undefined,
      default: {
        top: 16,
        right: 16,
        bottom: 16,
        left: 16
      }
    })
  }, React.createElement(React.Fragment, null, renderBackImage(), renderLabel()));
}

var styles = _reactNative.StyleSheet.create({
  container: _objectSpread({
    alignItems: 'center',
    flexDirection: 'row',
    minWidth: _reactNative.StyleSheet.hairlineWidth
  }, _reactNative.Platform.select({
    ios: null,
    default: {
      marginVertical: 3,
      marginHorizontal: 11
    }
  })),
  disabled: {
    opacity: 0.5
  },
  label: {
    fontSize: 17,
    letterSpacing: 0.35
  },
  labelWrapper: {
    flexDirection: 'row',
    alignItems: 'flex-start'
  },
  icon: _reactNative.Platform.select({
    ios: {
      height: 21,
      width: 13,
      marginLeft: 8,
      marginRight: 22,
      marginVertical: 12,
      resizeMode: 'contain',
      transform: [{
        scaleX: _reactNative.I18nManager.isRTL ? -1 : 1
      }]
    },
    default: {
      height: 24,
      width: 24,
      margin: 3,
      resizeMode: 'contain',
      transform: [{
        scaleX: _reactNative.I18nManager.isRTL ? -1 : 1
      }]
    }
  }),
  iconWithLabel: _reactNative.Platform.OS === 'ios' ? {
    marginRight: 6
  } : {},
  iconMaskContainer: {
    flex: 1,
    flexDirection: 'row',
    justifyContent: 'center'
  },
  iconMaskFillerRect: {
    flex: 1,
    backgroundColor: '#000'
  },
  iconMask: {
    height: 21,
    width: 13,
    marginLeft: -14.5,
    marginVertical: 12,
    alignSelf: 'center',
    resizeMode: 'contain',
    transform: [{
      scaleX: _reactNative.I18nManager.isRTL ? -1 : 1
    }]
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkhlYWRlckJhY2tCdXR0b24udHN4Il0sIm5hbWVzIjpbInRpbnRDb2xvciIsInRydW5jYXRlZExhYmVsIiwiYWNjZXNzaWJpbGl0eUxhYmVsIiwibGFiZWwiLCJzdHlsZSIsImNvbG9ycyIsIlJlYWN0IiwiY3VzdG9tVGludENvbG9yIiwiaW9zIiwiZGVmYXVsdCIsInRleHQiLCJoYW5kbGVMYWJlbExheW91dCIsImUiLCJvbkxhYmVsTGF5b3V0Iiwic2V0SW5pdGlhbExhYmVsV2lkdGgiLCJzaG91bGRUcnVuY2F0ZUxhYmVsIiwiaW5pdGlhbExhYmVsV2lkdGgiLCJzY3JlZW5MYXlvdXQiLCJ0aXRsZUxheW91dCIsInJlbmRlckJhY2tJbWFnZSIsImJhY2tJbWFnZSIsInN0eWxlcyIsIkJvb2xlYW4iLCJyZXF1aXJlIiwicmVuZGVyTGFiZWwiLCJsZWZ0TGFiZWxUZXh0IiwibGFiZWxFbGVtZW50IiwibWluV2lkdGgiLCJjb2xvciIsImFsbG93Rm9udFNjYWxpbmciLCJQbGF0Zm9ybSIsImljb25NYXNrQ29udGFpbmVyIiwiaWNvbk1hc2siLCJpY29uTWFza0ZpbGxlclJlY3QiLCJoYW5kbGVQcmVzcyIsIm9uUHJlc3MiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJkaXNhYmxlZCIsImJvcmRlcmxlc3MiLCJ0b3AiLCJyaWdodCIsImJvdHRvbSIsImxlZnQiLCJjb250YWluZXIiLCJhbGlnbkl0ZW1zIiwiZmxleERpcmVjdGlvbiIsIlN0eWxlU2hlZXQiLCJtYXJnaW5WZXJ0aWNhbCIsIm1hcmdpbkhvcml6b250YWwiLCJvcGFjaXR5IiwiZm9udFNpemUiLCJsZXR0ZXJTcGFjaW5nIiwibGFiZWxXcmFwcGVyIiwiaWNvbiIsImhlaWdodCIsIndpZHRoIiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwicmVzaXplTW9kZSIsInRyYW5zZm9ybSIsInNjYWxlWCIsIkkxOG5NYW5hZ2VyIiwibWFyZ2luIiwiaWNvbldpdGhMYWJlbCIsImZsZXgiLCJqdXN0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TUFBQUEsU0FBUyxFQUFFLENBQUM7QUFBRUMsUUFBQUEsTUFBTSxFQUFFQyxZQUFBQSxDQUFBQSxXQUFBQSxDQUFBQSxLQUFBQSxHQUFvQixDQUFwQkEsQ0FBQUEsR0FBeUI7QUFBbkMsT0FBRDtBQUxKO0FBVlcsR0FBaEIsQ0E1QnlCO0FBOEMvQkUsRUFBQUEsYUFBYSxFQUNYLFlBQUEsQ0FBQSxRQUFBLENBQUEsRUFBQSxLQUFBLEtBQUEsR0FDSTtBQUNFTixJQUFBQSxXQUFXLEVBQUU7QUFEZixHQURKLEdBL0M2QixFQUFBO0FBb0QvQjFCLEVBQUFBLGlCQUFpQixFQUFFO0FBQ2pCaUMsSUFBQUEsSUFBSSxFQURhLENBQUE7QUFFakJuQixJQUFBQSxhQUFhLEVBRkksS0FBQTtBQUdqQm9CLElBQUFBLGNBQWMsRUFBRTtBQUhDLEdBcERZO0FBeUQvQmhDLEVBQUFBLGtCQUFrQixFQUFFO0FBQ2xCK0IsSUFBQUEsSUFBSSxFQURjLENBQUE7QUFFbEJFLElBQUFBLGVBQWUsRUFBRTtBQUZDLEdBekRXO0FBNkQvQmxDLEVBQUFBLFFBQVEsRUFBRTtBQUNSc0IsSUFBQUEsTUFBTSxFQURFLEVBQUE7QUFFUkMsSUFBQUEsS0FBSyxFQUZHLEVBQUE7QUFHUkMsSUFBQUEsVUFBVSxFQUFFLENBSEosSUFBQTtBQUlSVCxJQUFBQSxjQUFjLEVBSk4sRUFBQTtBQUtSb0IsSUFBQUEsU0FBUyxFQUxELFFBQUE7QUFNUlQsSUFBQUEsVUFBVSxFQU5GLFNBQUE7QUFPUkMsSUFBQUEsU0FBUyxFQUFFLENBQUM7QUFBRUMsTUFBQUEsTUFBTSxFQUFFQyxZQUFBQSxDQUFBQSxXQUFBQSxDQUFBQSxLQUFBQSxHQUFvQixDQUFwQkEsQ0FBQUEsR0FBeUI7QUFBbkMsS0FBRDtBQVBIO0FBN0RxQixDQUFsQixDQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlVGhlbWUgfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgQW5pbWF0ZWQsXG4gIEkxOG5NYW5hZ2VyLFxuICBJbWFnZSxcbiAgTGF5b3V0Q2hhbmdlRXZlbnQsXG4gIFBsYXRmb3JtLFxuICBTdHlsZVNoZWV0LFxuICBWaWV3LFxufSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuXG5pbXBvcnQgTWFza2VkVmlldyBmcm9tICcuLi9NYXNrZWRWaWV3JztcbmltcG9ydCBQbGF0Zm9ybVByZXNzYWJsZSBmcm9tICcuLi9QbGF0Zm9ybVByZXNzYWJsZSc7XG5pbXBvcnQgdHlwZSB7IEhlYWRlckJhY2tCdXR0b25Qcm9wcyB9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSGVhZGVyQmFja0J1dHRvbih7XG4gIGRpc2FibGVkLFxuICBhbGxvd0ZvbnRTY2FsaW5nLFxuICBiYWNrSW1hZ2UsXG4gIGxhYmVsLFxuICBsYWJlbFN0eWxlLFxuICBsYWJlbFZpc2libGUsXG4gIG9uTGFiZWxMYXlvdXQsXG4gIG9uUHJlc3MsXG4gIHByZXNzQ29sb3IsXG4gIHByZXNzT3BhY2l0eSxcbiAgc2NyZWVuTGF5b3V0LFxuICB0aW50Q29sb3I6IGN1c3RvbVRpbnRDb2xvcixcbiAgdGl0bGVMYXlvdXQsXG4gIHRydW5jYXRlZExhYmVsID0gJ0JhY2snLFxuICBhY2Nlc3NpYmlsaXR5TGFiZWwgPSBsYWJlbCAmJiBsYWJlbCAhPT0gJ0JhY2snID8gYCR7bGFiZWx9LCBiYWNrYCA6ICdHbyBiYWNrJyxcbiAgdGVzdElELFxuICBzdHlsZSxcbn06IEhlYWRlckJhY2tCdXR0b25Qcm9wcykge1xuICBjb25zdCB7IGNvbG9ycyB9ID0gdXNlVGhlbWUoKTtcblxuICBjb25zdCBbaW5pdGlhbExhYmVsV2lkdGgsIHNldEluaXRpYWxMYWJlbFdpZHRoXSA9XG4gICAgUmVhY3QudXNlU3RhdGU8dW5kZWZpbmVkIHwgbnVtYmVyPih1bmRlZmluZWQpO1xuXG4gIGNvbnN0IHRpbnRDb2xvciA9XG4gICAgY3VzdG9tVGludENvbG9yICE9PSB1bmRlZmluZWRcbiAgICAgID8gY3VzdG9tVGludENvbG9yXG4gICAgICA6IFBsYXRmb3JtLnNlbGVjdCh7XG4gICAgICAgICAgaW9zOiBjb2xvcnMucHJpbWFyeSxcbiAgICAgICAgICBkZWZhdWx0OiBjb2xvcnMudGV4dCxcbiAgICAgICAgfSk7XG5cbiAgY29uc3QgaGFuZGxlTGFiZWxMYXlvdXQgPSAoZTogTGF5b3V0Q2hhbmdlRXZlbnQpID0+IHtcbiAgICBvbkxhYmVsTGF5b3V0Py4oZSk7XG5cbiAgICBzZXRJbml0aWFsTGFiZWxXaWR0aChlLm5hdGl2ZUV2ZW50LmxheW91dC54ICsgZS5uYXRpdmVFdmVudC5sYXlvdXQud2lkdGgpO1xuICB9O1xuXG4gIGNvbnN0IHNob3VsZFRydW5jYXRlTGFiZWwgPSAoKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgICFsYWJlbCB8fFxuICAgICAgKGluaXRpYWxMYWJlbFdpZHRoICYmXG4gICAgICAgIHRpdGxlTGF5b3V0ICYmXG4gICAgICAgIHNjcmVlbkxheW91dCAmJlxuICAgICAgICAoc2NyZWVuTGF5b3V0LndpZHRoIC0gdGl0bGVMYXlvdXQud2lkdGgpIC8gMiA8IGluaXRpYWxMYWJlbFdpZHRoICsgMjYpXG4gICAgKTtcbiAgfTtcblxuICBjb25zdCByZW5kZXJCYWNrSW1hZ2UgPSAoKSA9PiB7XG4gICAgaWYgKGJhY2tJbWFnZSkge1xuICAgICAgcmV0dXJuIGJhY2tJbWFnZSh7IHRpbnRDb2xvciB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPEltYWdlXG4gICAgICAgICAgc3R5bGU9e1tcbiAgICAgICAgICAgIHN0eWxlcy5pY29uLFxuICAgICAgICAgICAgQm9vbGVhbihsYWJlbFZpc2libGUpICYmIHN0eWxlcy5pY29uV2l0aExhYmVsLFxuICAgICAgICAgICAgQm9vbGVhbih0aW50Q29sb3IpICYmIHsgdGludENvbG9yIH0sXG4gICAgICAgICAgXX1cbiAgICAgICAgICBzb3VyY2U9e3JlcXVpcmUoJy4uL2Fzc2V0cy9iYWNrLWljb24ucG5nJyl9XG4gICAgICAgICAgZmFkZUR1cmF0aW9uPXswfVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgcmVuZGVyTGFiZWwgPSAoKSA9PiB7XG4gICAgY29uc3QgbGVmdExhYmVsVGV4dCA9IHNob3VsZFRydW5jYXRlTGFiZWwoKSA/IHRydW5jYXRlZExhYmVsIDogbGFiZWw7XG5cbiAgICBpZiAoIWxhYmVsVmlzaWJsZSB8fCBsZWZ0TGFiZWxUZXh0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGxhYmVsRWxlbWVudCA9IChcbiAgICAgIDxWaWV3XG4gICAgICAgIHN0eWxlPXtcbiAgICAgICAgICBzY3JlZW5MYXlvdXRcbiAgICAgICAgICAgID8gLy8gV2UgbWFrZSB0aGUgYnV0dG9uIGV4dGVuZCB0aWxsIHRoZSBtaWRkbGUgb2YgdGhlIHNjcmVlblxuICAgICAgICAgICAgICAvLyBPdGhlcndpc2UgaXQgYXBwZWFycyB0byBjdXQgb2ZmIHdoZW4gdHJhbnNsYXRpbmdcbiAgICAgICAgICAgICAgW3N0eWxlcy5sYWJlbFdyYXBwZXIsIHsgbWluV2lkdGg6IHNjcmVlbkxheW91dC53aWR0aCAvIDIgLSAyNyB9XVxuICAgICAgICAgICAgOiBudWxsXG4gICAgICAgIH1cbiAgICAgID5cbiAgICAgICAgPEFuaW1hdGVkLlRleHRcbiAgICAgICAgICBhY2Nlc3NpYmxlPXtmYWxzZX1cbiAgICAgICAgICBvbkxheW91dD17XG4gICAgICAgICAgICAvLyBUaGlzIG1lYXN1cmVtZW50IGlzIHVzZWQgdG8gZGV0ZXJtaW5lIGlmIHdlIHNob3VsZCB0cnVuY2F0ZSB0aGUgbGFiZWwgd2hlbiBpdCBkb2Vzbid0IGZpdFxuICAgICAgICAgICAgLy8gT25seSBtZWFzdXJlIGl0IHdoZW4gbGFiZWwgaXMgbm90IHRydW5jYXRlZCBiZWNhdXNlIHdlIHdhbnQgdGhlIG1lYXN1cmVtZW50IG9mIGZ1bGwgbGFiZWxcbiAgICAgICAgICAgIGxlZnRMYWJlbFRleHQgPT09IGxhYmVsID8gaGFuZGxlTGFiZWxMYXlvdXQgOiB1bmRlZmluZWRcbiAgICAgICAgICB9XG4gICAgICAgICAgc3R5bGU9e1tcbiAgICAgICAgICAgIHN0eWxlcy5sYWJlbCxcbiAgICAgICAgICAgIHRpbnRDb2xvciA/IHsgY29sb3I6IHRpbnRDb2xvciB9IDogbnVsbCxcbiAgICAgICAgICAgIGxhYmVsU3R5bGUsXG4gICAgICAgICAgXX1cbiAgICAgICAgICBudW1iZXJPZkxpbmVzPXsxfVxuICAgICAgICAgIGFsbG93Rm9udFNjYWxpbmc9eyEhYWxsb3dGb250U2NhbGluZ31cbiAgICAgICAgPlxuICAgICAgICAgIHtsZWZ0TGFiZWxUZXh0fVxuICAgICAgICA8L0FuaW1hdGVkLlRleHQ+XG4gICAgICA8L1ZpZXc+XG4gICAgKTtcblxuICAgIGlmIChiYWNrSW1hZ2UgfHwgUGxhdGZvcm0uT1MgIT09ICdpb3MnKSB7XG4gICAgICAvLyBXaGVuIGEgY3VzdG9tIGJhY2tpbWFnZSBpcyBzcGVjaWZpZWQsIHdlIGNhbid0IG1hc2sgdGhlIGxhYmVsXG4gICAgICAvLyBPdGhlcndpc2UgdGhlcmUgbWlnaHQgYmUgd2VpcmQgZWZmZWN0IGR1ZSB0byBvdXIgbWFzayBub3QgYmVpbmcgdGhlIHNhbWUgYXMgdGhlIGltYWdlXG4gICAgICByZXR1cm4gbGFiZWxFbGVtZW50O1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8TWFza2VkVmlld1xuICAgICAgICBtYXNrRWxlbWVudD17XG4gICAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5pY29uTWFza0NvbnRhaW5lcn0+XG4gICAgICAgICAgICA8SW1hZ2VcbiAgICAgICAgICAgICAgc291cmNlPXtyZXF1aXJlKCcuLi9hc3NldHMvYmFjay1pY29uLW1hc2sucG5nJyl9XG4gICAgICAgICAgICAgIHN0eWxlPXtzdHlsZXMuaWNvbk1hc2t9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5pY29uTWFza0ZpbGxlclJlY3R9IC8+XG4gICAgICAgICAgPC9WaWV3PlxuICAgICAgICB9XG4gICAgICA+XG4gICAgICAgIHtsYWJlbEVsZW1lbnR9XG4gICAgICA8L01hc2tlZFZpZXc+XG4gICAgKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVQcmVzcyA9ICgpID0+IG9uUHJlc3MgJiYgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKG9uUHJlc3MpO1xuXG4gIHJldHVybiAoXG4gICAgPFBsYXRmb3JtUHJlc3NhYmxlXG4gICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICBhY2Nlc3NpYmxlXG4gICAgICBhY2Nlc3NpYmlsaXR5Um9sZT1cImJ1dHRvblwiXG4gICAgICBhY2Nlc3NpYmlsaXR5TGFiZWw9e2FjY2Vzc2liaWxpdHlMYWJlbH1cbiAgICAgIHRlc3RJRD17dGVzdElEfVxuICAgICAgb25QcmVzcz17ZGlzYWJsZWQgPyB1bmRlZmluZWQgOiBoYW5kbGVQcmVzc31cbiAgICAgIHByZXNzQ29sb3I9e3ByZXNzQ29sb3J9XG4gICAgICBwcmVzc09wYWNpdHk9e3ByZXNzT3BhY2l0eX1cbiAgICAgIGFuZHJvaWRfcmlwcGxlPXt7IGJvcmRlcmxlc3M6IHRydWUgfX1cbiAgICAgIHN0eWxlPXtbc3R5bGVzLmNvbnRhaW5lciwgZGlzYWJsZWQgJiYgc3R5bGVzLmRpc2FibGVkLCBzdHlsZV19XG4gICAgICBoaXRTbG9wPXtQbGF0Zm9ybS5zZWxlY3Qoe1xuICAgICAgICBpb3M6IHVuZGVmaW5lZCxcbiAgICAgICAgZGVmYXVsdDogeyB0b3A6IDE2LCByaWdodDogMTYsIGJvdHRvbTogMTYsIGxlZnQ6IDE2IH0sXG4gICAgICB9KX1cbiAgICA+XG4gICAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgIHtyZW5kZXJCYWNrSW1hZ2UoKX1cbiAgICAgICAge3JlbmRlckxhYmVsKCl9XG4gICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgIDwvUGxhdGZvcm1QcmVzc2FibGU+XG4gICk7XG59XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgY29udGFpbmVyOiB7XG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgbWluV2lkdGg6IFN0eWxlU2hlZXQuaGFpcmxpbmVXaWR0aCwgLy8gQXZvaWQgY29sbGFwc2luZyB3aGVuIHRpdGxlIGlzIGxvbmdcbiAgICAuLi5QbGF0Zm9ybS5zZWxlY3Qoe1xuICAgICAgaW9zOiBudWxsLFxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBtYXJnaW5WZXJ0aWNhbDogMyxcbiAgICAgICAgbWFyZ2luSG9yaXpvbnRhbDogMTEsXG4gICAgICB9LFxuICAgIH0pLFxuICB9LFxuICBkaXNhYmxlZDoge1xuICAgIG9wYWNpdHk6IDAuNSxcbiAgfSxcbiAgbGFiZWw6IHtcbiAgICBmb250U2l6ZTogMTcsXG4gICAgLy8gVGl0bGUgYW5kIGJhY2sgbGFiZWwgYXJlIGEgYml0IGRpZmZlcmVudCB3aWR0aCBkdWUgdG8gdGl0bGUgYmVpbmcgYm9sZFxuICAgIC8vIEFkanVzdGluZyB0aGUgbGV0dGVyU3BhY2luZyBtYWtlcyB0aGVtIGNvaW5jaWRlIGJldHRlclxuICAgIGxldHRlclNwYWNpbmc6IDAuMzUsXG4gIH0sXG4gIGxhYmVsV3JhcHBlcjoge1xuICAgIC8vIFRoZXNlIHN0eWxlcyB3aWxsIG1ha2Ugc3VyZSB0aGF0IHRoZSBsYWJlbCBkb2Vzbid0IGZpbGwgdGhlIGF2YWlsYWJsZSBzcGFjZVxuICAgIC8vIE90aGVyd2lzZSBpdCBtZXNzZXMgd2l0aCB0aGUgbWVhc3VyZW1lbnQgb2YgdGhlIGxhYmVsXG4gICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgYWxpZ25JdGVtczogJ2ZsZXgtc3RhcnQnLFxuICB9LFxuICBpY29uOiBQbGF0Zm9ybS5zZWxlY3Qoe1xuICAgIGlvczoge1xuICAgICAgaGVpZ2h0OiAyMSxcbiAgICAgIHdpZHRoOiAxMyxcbiAgICAgIG1hcmdpbkxlZnQ6IDgsXG4gICAgICBtYXJnaW5SaWdodDogMjIsXG4gICAgICBtYXJnaW5WZXJ0aWNhbDogMTIsXG4gICAgICByZXNpemVNb2RlOiAnY29udGFpbicsXG4gICAgICB0cmFuc2Zvcm06IFt7IHNjYWxlWDogSTE4bk1hbmFnZXIuaXNSVEwgPyAtMSA6IDEgfV0sXG4gICAgfSxcbiAgICBkZWZhdWx0OiB7XG4gICAgICBoZWlnaHQ6IDI0LFxuICAgICAgd2lkdGg6IDI0LFxuICAgICAgbWFyZ2luOiAzLFxuICAgICAgcmVzaXplTW9kZTogJ2NvbnRhaW4nLFxuICAgICAgdHJhbnNmb3JtOiBbeyBzY2FsZVg6IEkxOG5NYW5hZ2VyLmlzUlRMID8gLTEgOiAxIH1dLFxuICAgIH0sXG4gIH0pLFxuICBpY29uV2l0aExhYmVsOlxuICAgIFBsYXRmb3JtLk9TID09PSAnaW9zJ1xuICAgICAgPyB7XG4gICAgICAgICAgbWFyZ2luUmlnaHQ6IDYsXG4gICAgICAgIH1cbiAgICAgIDoge30sXG4gIGljb25NYXNrQ29udGFpbmVyOiB7XG4gICAgZmxleDogMSxcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gIH0sXG4gIGljb25NYXNrRmlsbGVyUmVjdDoge1xuICAgIGZsZXg6IDEsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnIzAwMCcsXG4gIH0sXG4gIGljb25NYXNrOiB7XG4gICAgaGVpZ2h0OiAyMSxcbiAgICB3aWR0aDogMTMsXG4gICAgbWFyZ2luTGVmdDogLTE0LjUsXG4gICAgbWFyZ2luVmVydGljYWw6IDEyLFxuICAgIGFsaWduU2VsZjogJ2NlbnRlcicsXG4gICAgcmVzaXplTW9kZTogJ2NvbnRhaW4nLFxuICAgIHRyYW5zZm9ybTogW3sgc2NhbGVYOiBJMThuTWFuYWdlci5pc1JUTCA/IC0xIDogMSB9XSxcbiAgfSxcbn0pO1xuIl19