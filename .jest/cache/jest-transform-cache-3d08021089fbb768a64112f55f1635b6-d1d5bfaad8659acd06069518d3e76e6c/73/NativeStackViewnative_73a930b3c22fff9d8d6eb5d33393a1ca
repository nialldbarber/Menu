fb0e29517d9dae8460c5eb47c64df2eb
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = NativeStackView;

var _elements = require("@react-navigation/elements");

var _native = require("@react-navigation/native");

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativeSafeAreaContext = require("react-native-safe-area-context");

var _reactNativeScreens = require("react-native-screens");

var _warnOnce = _interopRequireDefault(require("warn-once"));

var _DebugContainer = _interopRequireDefault(require("./DebugContainer"));

var _HeaderConfig = _interopRequireDefault(require("./HeaderConfig"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var isAndroid = _reactNative.Platform.OS === 'android';

var MaybeNestedStack = function MaybeNestedStack(_ref) {
  var options = _ref.options,
      route = _ref.route,
      presentation = _ref.presentation,
      children = _ref.children;

  var _ref2 = (0, _native.useTheme)(),
      colors = _ref2.colors;

  var header = options.header,
      _options$headerShown = options.headerShown,
      headerShown = _options$headerShown === void 0 ? true : _options$headerShown,
      contentStyle = options.contentStyle;
  var isHeaderInModal = isAndroid ? false : presentation !== 'card' && headerShown === true && header === undefined;
  var headerShownPreviousRef = React.useRef(headerShown);
  React.useEffect(function () {
    (0, _warnOnce.default)(!isAndroid && presentation !== 'card' && headerShownPreviousRef.current !== headerShown, "Dynamically changing 'headerShown' in modals will result in remounting the screen and losing all local state. See options for the screen '" + route.name + "'.");
    headerShownPreviousRef.current = headerShown;
  }, [headerShown, presentation, route.name]);
  var content = React.createElement(_DebugContainer.default, {
    style: [styles.container, presentation !== 'transparentModal' && presentation !== 'containedTransparentModal' && {
      backgroundColor: colors.background
    }, contentStyle],
    stackPresentation: presentation === 'card' ? 'push' : presentation
  }, children);
  var insets = (0, _reactNativeSafeAreaContext.useSafeAreaInsets)();
  var dimensions = (0, _reactNativeSafeAreaContext.useSafeAreaFrame)();
  var isLandscape = dimensions.width > dimensions.height && !_reactNative.Platform.isPad && !_reactNative.Platform.isTVOS;
  var isFullScreenModal = presentation !== 'modal' && presentation !== 'formSheet';
  var topInset = isFullScreenModal && !isLandscape ? insets.top : 0;
  var headerHeight = (0, _elements.getDefaultHeaderHeight)(dimensions, !isFullScreenModal, topInset);

  if (isHeaderInModal) {
    return React.createElement(_reactNativeScreens.ScreenStack, {
      style: styles.container
    }, React.createElement(_reactNativeScreens.Screen, {
      enabled: true,
      style: _reactNative.StyleSheet.absoluteFill
    }, React.createElement(_elements.HeaderShownContext.Provider, {
      value: true
    }, React.createElement(_elements.HeaderHeightContext.Provider, {
      value: headerHeight
    }, React.createElement(_HeaderConfig.default, _extends({}, options, {
      route: route,
      canGoBack: true
    })), content))));
  }

  return content;
};

var SceneView = function SceneView(_ref3) {
  var descriptor = _ref3.descriptor,
      previousDescriptor = _ref3.previousDescriptor,
      index = _ref3.index,
      onWillDisappear = _ref3.onWillDisappear,
      onAppear = _ref3.onAppear,
      onDisappear = _ref3.onDisappear,
      onDismissed = _ref3.onDismissed;
  var route = descriptor.route,
      navigation = descriptor.navigation,
      options = descriptor.options,
      render = descriptor.render;
  var gestureEnabled = options.gestureEnabled,
      header = options.header,
      headerShown = options.headerShown,
      _options$animationTyp = options.animationTypeForReplace,
      animationTypeForReplace = _options$animationTyp === void 0 ? 'push' : _options$animationTyp,
      animation = options.animation,
      orientation = options.orientation,
      statusBarAnimation = options.statusBarAnimation,
      statusBarHidden = options.statusBarHidden,
      statusBarStyle = options.statusBarStyle;
  var _options$presentation = options.presentation,
      presentation = _options$presentation === void 0 ? 'card' : _options$presentation;

  if (index === 0) {
    presentation = 'card';
  }

  var isHeaderInPush = isAndroid ? headerShown : presentation === 'card' && headerShown !== false;
  var insets = (0, _reactNativeSafeAreaContext.useSafeAreaInsets)();
  var isParentHeaderShown = React.useContext(_elements.HeaderShownContext);
  var parentHeaderHeight = React.useContext(_elements.HeaderHeightContext);
  var headerHeight = (0, _elements.getDefaultHeaderHeight)((0, _reactNativeSafeAreaContext.useSafeAreaFrame)(), false, insets.top);
  return React.createElement(_reactNativeScreens.Screen, {
    key: route.key,
    enabled: true,
    style: _reactNative.StyleSheet.absoluteFill,
    gestureEnabled: isAndroid ? false : gestureEnabled,
    replaceAnimation: animationTypeForReplace,
    stackPresentation: presentation === 'card' ? 'push' : presentation,
    stackAnimation: animation,
    screenOrientation: orientation,
    statusBarAnimation: statusBarAnimation,
    statusBarHidden: statusBarHidden,
    statusBarStyle: statusBarStyle,
    onWillDisappear: onWillDisappear,
    onAppear: onAppear,
    onDisappear: onDisappear,
    onDismissed: onDismissed
  }, React.createElement(_elements.HeaderShownContext.Provider, {
    value: isParentHeaderShown || isHeaderInPush !== false
  }, React.createElement(_elements.HeaderHeightContext.Provider, {
    value: isHeaderInPush !== false ? headerHeight : parentHeaderHeight !== null && parentHeaderHeight !== void 0 ? parentHeaderHeight : 0
  }, header !== undefined && headerShown !== false ? header({
    back: previousDescriptor ? {
      title: (0, _elements.getHeaderTitle)(previousDescriptor.options, previousDescriptor.route.name)
    } : undefined,
    options: options,
    route: route,
    navigation: navigation
  }) : React.createElement(_HeaderConfig.default, _extends({}, options, {
    route: route,
    headerShown: isHeaderInPush,
    canGoBack: index !== 0
  })), React.createElement(MaybeNestedStack, {
    options: options,
    route: route,
    presentation: presentation
  }, render()))));
};

function NativeStackViewInner(_ref4) {
  var state = _ref4.state,
      navigation = _ref4.navigation,
      descriptors = _ref4.descriptors;

  var _state$routes$find;

  var _React$useState = React.useState(null),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      nextDismissedKey = _React$useState2[0],
      setNextDismissedKey = _React$useState2[1];

  var dismissedRouteName = nextDismissedKey ? (_state$routes$find = state.routes.find(function (route) {
    return route.key === nextDismissedKey;
  })) === null || _state$routes$find === void 0 ? void 0 : _state$routes$find.name : null;
  React.useEffect(function () {
    if (dismissedRouteName) {
      var message = "The screen '" + dismissedRouteName + "' was removed natively but didn't get removed from JS state. " + "This can happen if the action was prevented in a 'beforeRemove' listener, which is not fully supported in native-stack.\n\n" + "Consider using 'gestureEnabled: false' to prevent back gesture and use a custom back button with 'headerLeft' option to override the native behavior.";
      console.error(message);
    }
  }, [dismissedRouteName]);
  return React.createElement(_reactNativeScreens.ScreenStack, {
    style: styles.container
  }, state.routes.map(function (route, index) {
    var _state$routes;

    var descriptor = descriptors[route.key];
    var previousKey = (_state$routes = state.routes[index - 1]) === null || _state$routes === void 0 ? void 0 : _state$routes.key;
    var previousDescriptor = previousKey ? descriptors[previousKey] : undefined;
    return React.createElement(SceneView, {
      key: route.key,
      index: index,
      descriptor: descriptor,
      previousDescriptor: previousDescriptor,
      onWillDisappear: function onWillDisappear() {
        navigation.emit({
          type: 'transitionStart',
          data: {
            closing: true
          },
          target: route.key
        });
      },
      onAppear: function onAppear() {
        navigation.emit({
          type: 'transitionEnd',
          data: {
            closing: false
          },
          target: route.key
        });
      },
      onDisappear: function onDisappear() {
        navigation.emit({
          type: 'transitionEnd',
          data: {
            closing: true
          },
          target: route.key
        });
      },
      onDismissed: function onDismissed() {
        navigation.dispatch(_objectSpread(_objectSpread({}, _native.StackActions.pop()), {}, {
          source: route.key,
          target: state.key
        }));
        setNextDismissedKey(route.key);
      }
    });
  }));
}

function NativeStackView(props) {
  return React.createElement(_elements.SafeAreaProviderCompat, null, React.createElement(NativeStackViewInner, props));
}

var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,