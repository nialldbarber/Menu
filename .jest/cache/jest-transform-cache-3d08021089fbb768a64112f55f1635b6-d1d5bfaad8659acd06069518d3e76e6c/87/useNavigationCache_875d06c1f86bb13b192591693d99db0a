50aa154f9acc077b76dc01cbc8ad9214
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

var _excluded = ["emit"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useNavigationCache;

var _routers = require("@react-navigation/routers");

var React = _interopRequireWildcard(require("react"));

var _NavigationBuilderContext = _interopRequireDefault(require("./NavigationBuilderContext"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function useNavigationCache(_ref) {
  var state = _ref.state,
      getState = _ref.getState,
      navigation = _ref.navigation,
      _setOptions = _ref.setOptions,
      router = _ref.router,
      emitter = _ref.emitter;

  var _React$useContext = React.useContext(_NavigationBuilderContext.default),
      stackRef = _React$useContext.stackRef;

  var cache = React.useMemo(function () {
    return {
      current: {}
    };
  }, [getState, navigation, _setOptions, router, emitter]);

  var actions = _objectSpread(_objectSpread({}, router.actionCreators), _routers.CommonActions);

  cache.current = state.routes.reduce(function (acc, route) {
    var previous = cache.current[route.key];

    if (previous) {
      acc[route.key] = previous;
    } else {
      var emit = navigation.emit,
          rest = (0, _objectWithoutProperties2.default)(navigation, _excluded);

      var _dispatch = function dispatch(thunk) {
        var action = typeof thunk === 'function' ? thunk(getState()) : thunk;

        if (action != null) {
          navigation.dispatch(_objectSpread({
            source: route.key
          }, action));
        }
      };

      var withStack = function withStack(callback) {
        var isStackSet = false;

        try {
          if (process.env.NODE_ENV !== 'production' && stackRef && !stackRef.current) {
            stackRef.current = new Error().stack;
            isStackSet = true;
          }

          callback();
        } finally {
          if (isStackSet && stackRef) {
            stackRef.current = undefined;
          }
        }
      };

      var helpers = Object.keys(actions).reduce(function (acc, name) {
        acc[name] = function () {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return withStack(function () {
            return _dispatch(actions[name].apply(actions, args));
          });
        };

        return acc;
      }, {});
      acc[route.key] = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, rest), helpers), emitter.create(route.key)), {}, {
        dispatch: function dispatch(thunk) {
          return withStack(function () {
            return _dispatch(thunk);
          });
        },
        setOptions: function setOptions(options) {
          return _setOptions(function (o) {
            return _objectSpread(_objectSpread({}, o), {}, (0, _defineProperty2.default)({}, route.key, _objectSpread(_objectSpread({}, o[route.key]), options)));
          });
        },
        isFocused: function isFocused() {
          var state = getState();

          if (state.routes[state.index].key !== route.key) {
            return false;
          }

          return navigation ? navigation.isFocused() : true;
        }
      });
    }

    return acc;
  }, {});
  return cache.current;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,