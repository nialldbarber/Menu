{"version":3,"sources":["Item.test.tsx"],"names":["describe","it","getByText","testName","expect","toBeDefined","testPrice","defaultButtonText","button","fireEvent","press","toBeTruthy"],"mappings":";;;;AAAA;;AACA;;;;AAEAA,QAAQ,CAAC,wBAAD,EAA2B,YAAM;AACvCC,EAAAA,EAAE,CAAC,yCAAD,EAA4C,YAAM;AAClD,kBAAoB,mBAAO,qBAAC,UAAD;AAAM,MAAA,IAAI,EAAC;AAAX,MAAP,CAApB;AAAA,QAAOC,SAAP,WAAOA,SAAP;;AACA,QAAMC,QAAQ,GAAGD,SAAS,CAAC,SAAD,CAA1B;AACAE,IAAAA,MAAM,CAACD,QAAD,CAAN,CAAiBE,WAAjB;AACD,GAJC,CAAF;AAMAJ,EAAAA,EAAE,CAAC,0CAAD,EAA6C,YAAM;AACnD,mBAAoB,mBAAO,qBAAC,UAAD;AAAM,MAAA,KAAK,EAAE;AAAb,MAAP,CAApB;AAAA,QAAOC,SAAP,YAAOA,SAAP;;AACA,QAAMI,SAAS,GAAGJ,SAAS,CAAC,OAAD,CAA3B;AACAE,IAAAA,MAAM,CAACE,SAAD,CAAN,CAAkBD,WAAlB;AACD,GAJC,CAAF;AAMAJ,EAAAA,EAAE,CAAC,2DAAD,EAA8D,YAAM;AACpE,mBAAoB,mBAAO,qBAAC,UAAD,KAAP,CAApB;AAAA,QAAOC,SAAP,YAAOA,SAAP;;AACA,QAAMK,iBAAiB,GAAGL,SAAS,CAAC,aAAD,CAAnC;AACAE,IAAAA,MAAM,CAACG,iBAAD,CAAN,CAA0BF,WAA1B;AACD,GAJC,CAAF;AAMAJ,EAAAA,EAAE,CAAC,yDAAD,EAA4D;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,uBACxC,mBAAO,qBAAC,UAAD,KAAP,CADwC,EACrDC,SADqD,YACrDA,SADqD;AAEtDM,YAAAA,MAFsD,GAE7CN,SAAS,CAAC,aAAD,CAFoC;;AAG5DO,6BAAUC,KAAV,CAAgBF,MAAhB;;AAH4D;AAAA,8CAItD,oBAAQ;AAAA,qBAAMJ,MAAM,CAACF,SAAS,CAAC,kBAAD,CAAV,CAAN,CAAsCS,UAAtC,EAAN;AAAA,aAAR,CAJsD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5D,CAAF;AAMD,CAzBO,CAAR","sourcesContent":["import {render, fireEvent, waitFor} from '../../utils'\nimport {Item} from '../../../components/Item'\n\ndescribe('components -> <Item />', () => {\n  it('render the food name if one is provided', () => {\n    const {getByText} = render(<Item name=\"testing\" />)\n    const testName = getByText('testing')\n    expect(testName).toBeDefined()\n  })\n\n  it('render the food price if one is provided', () => {\n    const {getByText} = render(<Item price={12345} />)\n    const testPrice = getByText('12345')\n    expect(testPrice).toBeDefined()\n  })\n\n  it('on first render, the button text should say \"Add to cart\"', () => {\n    const {getByText} = render(<Item />)\n    const defaultButtonText = getByText('Add to cart')\n    expect(defaultButtonText).toBeDefined()\n  })\n\n  it('should render \"Remove from cart\" when button is pressed', async () => {\n    const {getByText} = render(<Item />)\n    const button = getByText('Add to cart')\n    fireEvent.press(button)\n    await waitFor(() => expect(getByText('Remove from cart')).toBeTruthy())\n  })\n})\n"]}