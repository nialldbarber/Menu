97bfa61e18f593b087be9dbde03031a6
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _NativeImageLoaderIOS = _interopRequireDefault(require("./NativeImageLoaderIOS"));

var _ImageViewNativeComponent = _interopRequireDefault(require("./ImageViewNativeComponent"));

var _jsxRuntime = require("react/jsx-runtime");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var DeprecatedImagePropType = require("../DeprecatedPropTypes/DeprecatedImagePropType");

var React = require('react');

var ReactNative = require("../Renderer/shims/ReactNative");

var StyleSheet = require("../StyleSheet/StyleSheet");

var ImageAnalyticsTagContext = require("./ImageAnalyticsTagContext").default;

var flattenStyle = require("../StyleSheet/flattenStyle");

var resolveAssetSource = require("./resolveAssetSource");

function getSize(uri, success, failure) {
  _NativeImageLoaderIOS.default.getSize(uri).then(function (_ref) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
        width = _ref2[0],
        height = _ref2[1];

    return success(width, height);
  }).catch(failure || function () {
    console.warn('Failed to get size for image ' + uri);
  });
}

function getSizeWithHeaders(uri, headers, success, failure) {
  return _NativeImageLoaderIOS.default.getSizeWithHeaders(uri, headers).then(function (sizes) {
    success(sizes.width, sizes.height);
  }).catch(failure || function () {
    console.warn('Failed to get size for image: ' + uri);
  });
}

function prefetch(url) {
  return _NativeImageLoaderIOS.default.prefetchImage(url);
}

function queryCache(urls) {
  return _regenerator.default.async(function queryCache$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return _regenerator.default.awrap(_NativeImageLoaderIOS.default.queryCache(urls));

        case 2:
          return _context.abrupt("return", _context.sent);

        case 3:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, null, Promise);
}

var Image = function Image(props, forwardedRef) {
  var source = resolveAssetSource(props.source) || {
    uri: undefined,
    width: undefined,
    height: undefined
  };
  var sources;
  var style;

  if (Array.isArray(source)) {
    style = flattenStyle([styles.base, props.style]) || {};
    sources = source;
  } else {
    var _width = source.width,
        _height = source.height,
        uri = source.uri;
    style = flattenStyle([{
      width: _width,
      height: _height
    }, styles.base, props.style]) || {};
    sources = [source];

    if (uri === '') {
      console.warn('source.uri should not be an empty string');
    }
  }

  var resizeMode = props.resizeMode || style.resizeMode || 'cover';
  var tintColor = style.tintColor;

  if (props.src != null) {
    console.warn('The <Image> component requires a `source` property rather than `src`.');
  }

  if (props.children != null) {
    throw new Error('The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');
  }

  return (0, _jsxRuntime.jsx)(ImageAnalyticsTagContext.Consumer, {
    children: function children(analyticTag) {
      return (0, _jsxRuntime.jsx)(_ImageViewNativeComponent.default, _objectSpread(_objectSpread({}, props), {}, {
        ref: forwardedRef,
        style: style,
        resizeMode: resizeMode,
        tintColor: tintColor,
        source: sources,
        internal_analyticTag: analyticTag
      }));
    }
  });
};

Image = React.forwardRef(Image);
Image.displayName = 'Image';
Image.getSize = getSize;
Image.getSizeWithHeaders = getSizeWithHeaders;
Image.prefetch = prefetch;
Image.queryCache = queryCache;
Image.resolveAssetSource = resolveAssetSource;
Image.propTypes = DeprecatedImagePropType;
var styles = StyleSheet.create({
  base: {
    overflow: 'hidden'
  }
});
module.exports = Image;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,