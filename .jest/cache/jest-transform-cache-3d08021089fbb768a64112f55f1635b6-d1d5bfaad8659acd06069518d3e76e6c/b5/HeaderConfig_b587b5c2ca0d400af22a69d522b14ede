a72ac6ab6219ee1c895f943260d21b4d
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = HeaderConfig;

var _elements = require("@react-navigation/elements");

var _native = require("@react-navigation/native");

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativeSafeAreaContext = require("react-native-safe-area-context");

var _reactNativeScreens = require("react-native-screens");

var _FontProcessor = require("./FontProcessor");

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function HeaderConfig(_ref2) {
  var headerBackImageSource = _ref2.headerBackImageSource,
      headerBackButtonMenuEnabled = _ref2.headerBackButtonMenuEnabled,
      headerBackTitle = _ref2.headerBackTitle,
      headerBackTitleStyle = _ref2.headerBackTitleStyle,
      _ref2$headerBackTitle = _ref2.headerBackTitleVisible,
      headerBackTitleVisible = _ref2$headerBackTitle === void 0 ? true : _ref2$headerBackTitle,
      headerBackVisible = _ref2.headerBackVisible,
      headerShadowVisible = _ref2.headerShadowVisible,
      headerLargeStyle = _ref2.headerLargeStyle,
      headerLargeTitle = _ref2.headerLargeTitle,
      headerLargeTitleShadowVisible = _ref2.headerLargeTitleShadowVisible,
      headerLargeTitleStyle = _ref2.headerLargeTitleStyle,
      headerLeft = _ref2.headerLeft,
      headerRight = _ref2.headerRight,
      headerShown = _ref2.headerShown,
      headerStyle = _ref2.headerStyle,
      headerBlurEffect = _ref2.headerBlurEffect,
      headerTintColor = _ref2.headerTintColor,
      headerTitle = _ref2.headerTitle,
      headerTitleAlign = _ref2.headerTitleAlign,
      headerTitleStyle = _ref2.headerTitleStyle,
      headerTransparent = _ref2.headerTransparent,
      headerSearchBarOptions = _ref2.headerSearchBarOptions,
      route = _ref2.route,
      title = _ref2.title,
      canGoBack = _ref2.canGoBack;

  var _ref, _headerTitleStyleFlat, _headerStyleFlattened;

  var insets = (0, _reactNativeSafeAreaContext.useSafeAreaInsets)();

  var _ref3 = (0, _native.useTheme)(),
      colors = _ref3.colors;

  var tintColor = headerTintColor !== null && headerTintColor !== void 0 ? headerTintColor : _reactNative.Platform.OS === 'ios' ? colors.primary : colors.text;
  var headerBackTitleStyleFlattened = _reactNative.StyleSheet.flatten(headerBackTitleStyle) || {};
  var headerLargeTitleStyleFlattened = _reactNative.StyleSheet.flatten(headerLargeTitleStyle) || {};
  var headerTitleStyleFlattened = _reactNative.StyleSheet.flatten(headerTitleStyle) || {};
  var headerStyleFlattened = _reactNative.StyleSheet.flatten(headerStyle) || {};
  var headerLargeStyleFlattened = _reactNative.StyleSheet.flatten(headerLargeStyle) || {};

  var _ref4 = (0, _FontProcessor.processFonts)([headerBackTitleStyleFlattened.fontFamily, headerLargeTitleStyleFlattened.fontFamily, headerTitleStyleFlattened.fontFamily]),
      _ref5 = (0, _slicedToArray2.default)(_ref4, 3),
      backTitleFontFamily = _ref5[0],
      largeTitleFontFamily = _ref5[1],
      titleFontFamily = _ref5[2];

  var titleText = title !== undefined ? title : route.name;
  var titleColor = (_ref = (_headerTitleStyleFlat = headerTitleStyleFlattened.color) !== null && _headerTitleStyleFlat !== void 0 ? _headerTitleStyleFlat : headerTintColor) !== null && _ref !== void 0 ? _ref : colors.text;
  var titleFontSize = headerTitleStyleFlattened.fontSize;
  var titleFontWeight = headerTitleStyleFlattened.fontWeight;
  var headerTitleStyleSupported = {
    color: titleColor
  };

  if (headerTitleStyleFlattened.fontFamily != null) {
    headerTitleStyleSupported.fontFamily = headerTitleStyleFlattened.fontFamily;
  }

  if (titleFontSize != null) {
    headerTitleStyleSupported.fontSize = titleFontSize;
  }

  if (titleFontWeight != null) {
    headerTitleStyleSupported.fontWeight = titleFontWeight;
  }

  var headerLeftElement = headerLeft === null || headerLeft === void 0 ? void 0 : headerLeft({
    tintColor: tintColor,
    label: headerBackTitle,
    canGoBack: canGoBack
  });
  var headerRightElement = headerRight === null || headerRight === void 0 ? void 0 : headerRight({
    tintColor: tintColor
  });
  var headerTitleElement = typeof headerTitle === 'function' ? headerTitle({
    tintColor: tintColor,
    children: titleText
  }) : null;

  if (_reactNative.Platform.OS === 'ios' && headerSearchBarOptions != null && _reactNativeScreens.SearchBar == null) {
    throw new Error("The current version of 'react-native-screens' doesn't support SearchBar in the header. Please update to the latest version to use this option.");
  }

  var backButtonInCustomView = headerBackVisible ? headerLeftElement != null : _reactNative.Platform.OS === 'android' && headerTitleElement != null;
  return React.createElement(_reactNativeScreens.ScreenStackHeaderConfig, {
    backButtonInCustomView: backButtonInCustomView,
    backgroundColor: (_headerStyleFlattened = headerStyleFlattened.backgroundColor) !== null && _headerStyleFlattened !== void 0 ? _headerStyleFlattened : headerTransparent ? 'transparent' : colors.card,
    backTitle: headerBackTitleVisible ? headerBackTitle : ' ',
    backTitleFontFamily: backTitleFontFamily,
    backTitleFontSize: headerBackTitleStyleFlattened.fontSize,
    blurEffect: headerBlurEffect,
    color: tintColor,
    direction: _reactNative.I18nManager.isRTL ? 'rtl' : 'ltr',
    disableBackButtonMenu: headerBackButtonMenuEnabled === false,
    hidden: headerShown === false,
    hideBackButton: headerBackVisible === false,
    hideShadow: headerShadowVisible === false,
    largeTitle: headerLargeTitle,
    largeTitleBackgroundColor: headerLargeStyleFlattened.backgroundColor,
    largeTitleColor: headerLargeTitleStyleFlattened.color,
    largeTitleFontFamily: largeTitleFontFamily,
    largeTitleFontSize: headerLargeTitleStyleFlattened.fontSize,
    largeTitleFontWeight: headerLargeTitleStyleFlattened.fontWeight,
    largeTitleHideShadow: headerLargeTitleShadowVisible === false,
    title: typeof headerTitle === 'string' ? headerTitle : titleText,
    titleColor: titleColor,
    titleFontFamily: titleFontFamily,
    titleFontSize: titleFontSize,
    titleFontWeight: titleFontWeight,
    topInsetEnabled: insets.top !== 0,
    translucent: headerTransparent === true
  }, _reactNative.Platform.OS === 'ios' ? React.createElement(React.Fragment, null, headerLeftElement != null ? React.createElement(_reactNativeScreens.ScreenStackHeaderLeftView, null, headerLeftElement) : null, headerTitleElement != null ? React.createElement(_reactNativeScreens.ScreenStackHeaderCenterView, null, headerTitleElement) : null) : React.createElement(React.Fragment, null, headerLeftElement != null || typeof headerTitle === 'function' ? React.createElement(_reactNativeScreens.ScreenStackHeaderLeftView, null, React.createElement(_reactNative.View, {
    style: styles.row
  }, headerLeftElement, headerTitleAlign !== 'center' ? typeof headerTitle === 'function' ? headerTitleElement : React.createElement(_elements.HeaderTitle, {
    tintColor: tintColor,
    style: headerTitleStyleSupported
  }, titleText) : null)) : null, headerTitleAlign === 'center' ? React.createElement(_reactNativeScreens.ScreenStackHeaderCenterView, null, typeof headerTitle === 'function' ? headerTitleElement : React.createElement(_elements.HeaderTitle, {
    tintColor: tintColor,
    style: headerTitleStyleSupported
  }, titleText)) : null), headerBackImageSource !== undefined ? React.createElement(_reactNativeScreens.ScreenStackHeaderBackButtonImage, {
    source: headerBackImageSource
  }) : null, headerRightElement != null ? React.createElement(_reactNativeScreens.ScreenStackHeaderRightView, null, headerRightElement) : null, _reactNative.Platform.OS === 'ios' && headerSearchBarOptions != null ? React.createElement(_reactNativeScreens.ScreenStackHeaderSearchBarView, null, React.createElement(_reactNativeScreens.SearchBar, headerSearchBarOptions)) : null);
}

var styles = _reactNative.StyleSheet.create({
  row: {
    flexDirection: 'row',
    alignItems: 'center'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,