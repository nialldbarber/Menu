0c0a9ae19a38a2adedea729fff3d37c3
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NativeVirtualText = exports.NativeText = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _ReactNativeViewAttributes = _interopRequireDefault(require("../Components/View/ReactNativeViewAttributes"));

var _UIManager = _interopRequireDefault(require("../ReactNative/UIManager"));

var _createReactNativeComponentClass = _interopRequireDefault(require("../Renderer/shims/createReactNativeComponentClass"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var NativeText = (0, _createReactNativeComponentClass.default)('RCTText', function () {
  return {
    validAttributes: _objectSpread(_objectSpread({}, _ReactNativeViewAttributes.default.UIView), {}, {
      isHighlighted: true,
      numberOfLines: true,
      ellipsizeMode: true,
      allowFontScaling: true,
      maxFontSizeMultiplier: true,
      disabled: true,
      selectable: true,
      selectionColor: true,
      adjustsFontSizeToFit: true,
      minimumFontScale: true,
      textBreakStrategy: true,
      onTextLayout: true,
      onInlineViewLayout: true,
      dataDetectorType: true
    }),
    directEventTypes: {
      topTextLayout: {
        registrationName: 'onTextLayout'
      },
      topInlineViewLayout: {
        registrationName: 'onInlineViewLayout'
      }
    },
    uiViewClassName: 'RCTText'
  };
});
exports.NativeText = NativeText;
var NativeVirtualText = _UIManager.default.getViewManagerConfig('RCTVirtualText') == null ? NativeText : (0, _createReactNativeComponentClass.default)('RCTVirtualText', function () {
  return {
    validAttributes: _objectSpread(_objectSpread({}, _ReactNativeViewAttributes.default.UIView), {}, {
      isHighlighted: true,
      maxFontSizeMultiplier: true
    }),
    uiViewClassName: 'RCTVirtualText'
  };
});
exports.NativeVirtualText = NativeVirtualText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRleHROYXRpdmVDb21wb25lbnQuanMiXSwibmFtZXMiOlsiTmF0aXZlVGV4dCIsInZhbGlkQXR0cmlidXRlcyIsIlJlYWN0TmF0aXZlVmlld0F0dHJpYnV0ZXMiLCJVSVZpZXciLCJpc0hpZ2hsaWdodGVkIiwibnVtYmVyT2ZMaW5lcyIsImVsbGlwc2l6ZU1vZGUiLCJhbGxvd0ZvbnRTY2FsaW5nIiwibWF4Rm9udFNpemVNdWx0aXBsaWVyIiwiZGlzYWJsZWQiLCJzZWxlY3RhYmxlIiwic2VsZWN0aW9uQ29sb3IiLCJhZGp1c3RzRm9udFNpemVUb0ZpdCIsIm1pbmltdW1Gb250U2NhbGUiLCJ0ZXh0QnJlYWtTdHJhdGVneSIsIm9uVGV4dExheW91dCIsIm9uSW5saW5lVmlld0xheW91dCIsImRhdGFEZXRlY3RvclR5cGUiLCJkaXJlY3RFdmVudFR5cGVzIiwidG9wVGV4dExheW91dCIsInJlZ2lzdHJhdGlvbk5hbWUiLCJ0b3BJbmxpbmVWaWV3TGF5b3V0IiwidWlWaWV3Q2xhc3NOYW1lIiwiTmF0aXZlVmlydHVhbFRleHQiLCJVSU1hbmFnZXIiLCJnZXRWaWV3TWFuYWdlckNvbmZpZyJdLCJtYXBwaW5ncyI6IkFBVUE7Ozs7Ozs7Ozs7O0FBRUE7O0FBQ0E7O0FBRUE7Ozs7OztBQVVPLElBQU1BLFVBQTBDLEdBQUksOENBQ3pELFNBRHlELEVBRXpEO0FBQUEsU0FBTztBQUNMQyxJQUFBQSxlQUFlLGtDQUNWQyxtQ0FBMEJDLE1BRGhCO0FBRWJDLE1BQUFBLGFBQWEsRUFBRSxJQUZGO0FBR2JDLE1BQUFBLGFBQWEsRUFBRSxJQUhGO0FBSWJDLE1BQUFBLGFBQWEsRUFBRSxJQUpGO0FBS2JDLE1BQUFBLGdCQUFnQixFQUFFLElBTEw7QUFNYkMsTUFBQUEscUJBQXFCLEVBQUUsSUFOVjtBQU9iQyxNQUFBQSxRQUFRLEVBQUUsSUFQRztBQVFiQyxNQUFBQSxVQUFVLEVBQUUsSUFSQztBQVNiQyxNQUFBQSxjQUFjLEVBQUUsSUFUSDtBQVViQyxNQUFBQSxvQkFBb0IsRUFBRSxJQVZUO0FBV2JDLE1BQUFBLGdCQUFnQixFQUFFLElBWEw7QUFZYkMsTUFBQUEsaUJBQWlCLEVBQUUsSUFaTjtBQWFiQyxNQUFBQSxZQUFZLEVBQUUsSUFiRDtBQWNiQyxNQUFBQSxrQkFBa0IsRUFBRSxJQWRQO0FBZWJDLE1BQUFBLGdCQUFnQixFQUFFO0FBZkwsTUFEVjtBQWtCTEMsSUFBQUEsZ0JBQWdCLEVBQUU7QUFDaEJDLE1BQUFBLGFBQWEsRUFBRTtBQUNiQyxRQUFBQSxnQkFBZ0IsRUFBRTtBQURMLE9BREM7QUFJaEJDLE1BQUFBLG1CQUFtQixFQUFFO0FBQ25CRCxRQUFBQSxnQkFBZ0IsRUFBRTtBQURDO0FBSkwsS0FsQmI7QUEwQkxFLElBQUFBLGVBQWUsRUFBRTtBQTFCWixHQUFQO0FBQUEsQ0FGeUQsQ0FBcEQ7O0FBZ0NBLElBQU1DLGlCQUFpRCxHQUM1REMsbUJBQVVDLG9CQUFWLENBQStCLGdCQUEvQixLQUFvRCxJQUFwRCxHQUNJekIsVUFESixHQUVLLDhDQUFnQyxnQkFBaEMsRUFBa0Q7QUFBQSxTQUFPO0FBQ3hEQyxJQUFBQSxlQUFlLGtDQUNWQyxtQ0FBMEJDLE1BRGhCO0FBRWJDLE1BQUFBLGFBQWEsRUFBRSxJQUZGO0FBR2JJLE1BQUFBLHFCQUFxQixFQUFFO0FBSFYsTUFEeUM7QUFNeERjLElBQUFBLGVBQWUsRUFBRTtBQU51QyxHQUFQO0FBQUEsQ0FBbEQsQ0FIQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCBSZWFjdE5hdGl2ZVZpZXdBdHRyaWJ1dGVzIGZyb20gJy4uL0NvbXBvbmVudHMvVmlldy9SZWFjdE5hdGl2ZVZpZXdBdHRyaWJ1dGVzJztcbmltcG9ydCBVSU1hbmFnZXIgZnJvbSAnLi4vUmVhY3ROYXRpdmUvVUlNYW5hZ2VyJztcbmltcG9ydCB7dHlwZSBIb3N0Q29tcG9uZW50fSBmcm9tICcuLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZVR5cGVzJztcbmltcG9ydCBjcmVhdGVSZWFjdE5hdGl2ZUNvbXBvbmVudENsYXNzIGZyb20gJy4uL1JlbmRlcmVyL3NoaW1zL2NyZWF0ZVJlYWN0TmF0aXZlQ29tcG9uZW50Q2xhc3MnO1xuaW1wb3J0IHt0eXBlIFByb2Nlc3NlZENvbG9yVmFsdWV9IGZyb20gJy4uL1N0eWxlU2hlZXQvcHJvY2Vzc0NvbG9yJztcbmltcG9ydCB7dHlwZSBUZXh0UHJvcHN9IGZyb20gJy4vVGV4dFByb3BzJztcblxudHlwZSBOYXRpdmVUZXh0UHJvcHMgPSAkUmVhZE9ubHk8e1xuICAuLi5UZXh0UHJvcHMsXG4gIGlzSGlnaGxpZ2h0ZWQ/OiA/Ym9vbGVhbixcbiAgc2VsZWN0aW9uQ29sb3I/OiA/UHJvY2Vzc2VkQ29sb3JWYWx1ZSxcbn0+O1xuXG5leHBvcnQgY29uc3QgTmF0aXZlVGV4dDogSG9zdENvbXBvbmVudDxOYXRpdmVUZXh0UHJvcHM+ID0gKGNyZWF0ZVJlYWN0TmF0aXZlQ29tcG9uZW50Q2xhc3MoXG4gICdSQ1RUZXh0JyxcbiAgKCkgPT4gKHtcbiAgICB2YWxpZEF0dHJpYnV0ZXM6IHtcbiAgICAgIC4uLlJlYWN0TmF0aXZlVmlld0F0dHJpYnV0ZXMuVUlWaWV3LFxuICAgICAgaXNIaWdobGlnaHRlZDogdHJ1ZSxcbiAgICAgIG51bWJlck9mTGluZXM6IHRydWUsXG4gICAgICBlbGxpcHNpemVNb2RlOiB0cnVlLFxuICAgICAgYWxsb3dGb250U2NhbGluZzogdHJ1ZSxcbiAgICAgIG1heEZvbnRTaXplTXVsdGlwbGllcjogdHJ1ZSxcbiAgICAgIGRpc2FibGVkOiB0cnVlLFxuICAgICAgc2VsZWN0YWJsZTogdHJ1ZSxcbiAgICAgIHNlbGVjdGlvbkNvbG9yOiB0cnVlLFxuICAgICAgYWRqdXN0c0ZvbnRTaXplVG9GaXQ6IHRydWUsXG4gICAgICBtaW5pbXVtRm9udFNjYWxlOiB0cnVlLFxuICAgICAgdGV4dEJyZWFrU3RyYXRlZ3k6IHRydWUsXG4gICAgICBvblRleHRMYXlvdXQ6IHRydWUsXG4gICAgICBvbklubGluZVZpZXdMYXlvdXQ6IHRydWUsXG4gICAgICBkYXRhRGV0ZWN0b3JUeXBlOiB0cnVlLFxuICAgIH0sXG4gICAgZGlyZWN0RXZlbnRUeXBlczoge1xuICAgICAgdG9wVGV4dExheW91dDoge1xuICAgICAgICByZWdpc3RyYXRpb25OYW1lOiAnb25UZXh0TGF5b3V0JyxcbiAgICAgIH0sXG4gICAgICB0b3BJbmxpbmVWaWV3TGF5b3V0OiB7XG4gICAgICAgIHJlZ2lzdHJhdGlvbk5hbWU6ICdvbklubGluZVZpZXdMYXlvdXQnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHVpVmlld0NsYXNzTmFtZTogJ1JDVFRleHQnLFxuICB9KSxcbik6IGFueSk7XG5cbmV4cG9ydCBjb25zdCBOYXRpdmVWaXJ0dWFsVGV4dDogSG9zdENvbXBvbmVudDxOYXRpdmVUZXh0UHJvcHM+ID1cbiAgVUlNYW5hZ2VyLmdldFZpZXdNYW5hZ2VyQ29uZmlnKCdSQ1RWaXJ0dWFsVGV4dCcpID09IG51bGxcbiAgICA/IE5hdGl2ZVRleHRcbiAgICA6IChjcmVhdGVSZWFjdE5hdGl2ZUNvbXBvbmVudENsYXNzKCdSQ1RWaXJ0dWFsVGV4dCcsICgpID0+ICh7XG4gICAgICAgIHZhbGlkQXR0cmlidXRlczoge1xuICAgICAgICAgIC4uLlJlYWN0TmF0aXZlVmlld0F0dHJpYnV0ZXMuVUlWaWV3LFxuICAgICAgICAgIGlzSGlnaGxpZ2h0ZWQ6IHRydWUsXG4gICAgICAgICAgbWF4Rm9udFNpemVNdWx0aXBsaWVyOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICB1aVZpZXdDbGFzc05hbWU6ICdSQ1RWaXJ0dWFsVGV4dCcsXG4gICAgICB9KSk6IGFueSk7XG4iXX0=