{"version":3,"sources":["useLinkTo.tsx"],"names":["navigation","React","NavigationContainerRefContext","linking","LinkingContext","linkTo","to","options","state","action"],"mappings":";;;;;;;AAAA,IAAA,KAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AAKA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAEA,IAAA,eAAA,GAAA,sBAAA,CAAA,OAAA,oBAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBe,SAAA,SAAA,GAEX;AACF,MAAMA,UAAU,GAAGC,KAAK,CAALA,UAAAA,CAAiBC,KAAAA,CAApC,6BAAmBD,CAAnB;AACA,MAAME,OAAO,GAAGF,KAAK,CAALA,UAAAA,CAAiBG,eAAAA,CAAjC,OAAgBH,CAAhB;AAEA,MAAMI,MAAM,GAAG,KAAK,CAAL,WAAA,CACZC,UAAAA,EAAD,EAAuB;AACrB,QAAIN,UAAU,KAAd,SAAA,EAA8B;AAC5B,YAAM,IAAA,KAAA,CAAN,kFAAM,CAAN;AAGD;;AAED,QAAI,OAAA,EAAA,KAAJ,QAAA,EAA4B;AAE1BA,MAAAA,UAAU,CAAVA,QAAAA,CAAoBM,EAAE,CAAtBN,MAAAA,EAA+BM,EAAE,CAAjCN,MAAAA;AACA;AACD;;AAED,QAAI,CAACM,EAAE,CAAFA,UAAAA,CAAL,GAAKA,CAAL,EAAyB;AACvB,YAAM,IAAA,KAAA,oCAAN,EAAM,QAAN;AACD;;AAED,QAAQC,OAAR,GAAA,OAAA,CAAQA,OAAR;AAEA,QAAMC,KAAK,GAAGD,OAAO,KAAPA,IAAAA,IAAAA,OAAO,KAAA,KAAPA,CAAAA,IAAAA,OAAO,CAAPA,gBAAAA,GACVA,OAAO,CAAPA,gBAAAA,CAAAA,EAAAA,EAA6BA,OAAO,CAD1BA,MACVA,CADUA,GAEV,CAAA,GAAA,KAAA,CAAA,gBAAA,EAAA,EAAA,EAAqBA,OAArB,KAAA,IAAqBA,IAAAA,OAArB,KAAA,KAAA,CAAqBA,GAArB,KAAA,CAAqBA,GAAAA,OAAO,CAFhC,MAEI,CAFJ;;AAIA,QAAA,KAAA,EAAW;AACT,UAAME,MAAM,GAAG,CAAA,GAAA,KAAA,CAAA,kBAAA,EAAA,KAAA,EAA0BF,OAA1B,KAAA,IAA0BA,IAAAA,OAA1B,KAAA,KAAA,CAA0BA,GAA1B,KAAA,CAA0BA,GAAAA,OAAO,CAAhD,MAAe,CAAf;;AAEA,UAAIE,MAAM,KAAV,SAAA,EAA0B;AACxBT,QAAAA,UAAU,CAAVA,QAAAA,CAAAA,MAAAA;AADF,OAAA,MAEO;AACLA,QAAAA,UAAU,CAAVA,KAAAA,CAAAA,KAAAA;AACD;AAPH,KAAA,MAQO;AACL,YAAM,IAAA,KAAA,CAAN,iDAAM,CAAN;AACD;AAlCU,GAAA,EAoCb,CAAA,OAAA,EApCF,UAoCE,CApCa,CAAf;AAuCA,SAAA,MAAA;AACD","sourcesContent":["import {\n  getActionFromState,\n  getStateFromPath,\n  NavigationContainerRefContext,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport LinkingContext from './LinkingContext';\n\nexport type To<\n  ParamList extends ReactNavigation.RootParamList = ReactNavigation.RootParamList,\n  RouteName extends keyof ParamList = keyof ParamList\n> =\n  | string\n  | (undefined extends ParamList[RouteName]\n      ? {\n          screen: Extract<RouteName, string>;\n          params?: ParamList[RouteName];\n        }\n      : {\n          screen: Extract<RouteName, string>;\n          params: ParamList[RouteName];\n        });\n\nexport default function useLinkTo<\n  ParamList extends ReactNavigation.RootParamList\n>() {\n  const navigation = React.useContext(NavigationContainerRefContext);\n  const linking = React.useContext(LinkingContext);\n\n  const linkTo = React.useCallback(\n    (to: To<ParamList>) => {\n      if (navigation === undefined) {\n        throw new Error(\n          \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n        );\n      }\n\n      if (typeof to !== 'string') {\n        // @ts-expect-error: This is fine\n        navigation.navigate(to.screen, to.params);\n        return;\n      }\n\n      if (!to.startsWith('/')) {\n        throw new Error(`The path must start with '/' (${to}).`);\n      }\n\n      const { options } = linking;\n\n      const state = options?.getStateFromPath\n        ? options.getStateFromPath(to, options.config)\n        : getStateFromPath(to, options?.config);\n\n      if (state) {\n        const action = getActionFromState(state, options?.config);\n\n        if (action !== undefined) {\n          navigation.dispatch(action);\n        } else {\n          navigation.reset(state);\n        }\n      } else {\n        throw new Error('Failed to parse the path to a navigation state.');\n      }\n    },\n    [linking, navigation]\n  );\n\n  return linkTo;\n}\n"]}