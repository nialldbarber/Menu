d694e53982c8070cc808108b3663ce2d
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _Platform = _interopRequireDefault(require("../Utilities/Platform"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var AnimatedMock = require("./AnimatedMock");

var AnimatedImplementation = require("./AnimatedImplementation");

var Animated = _Platform.default.isTesting ? AnimatedMock : AnimatedImplementation;
module.exports = _objectSpread({
  get FlatList() {
    return require("./components/AnimatedFlatList");
  },

  get Image() {
    return require("./components/AnimatedImage");
  },

  get ScrollView() {
    return require("./components/AnimatedScrollView");
  },

  get SectionList() {
    return require("./components/AnimatedSectionList");
  },

  get Text() {
    return require("./components/AnimatedText");
  },

  get View() {
    return require("./components/AnimatedView");
  }

}, Animated);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFuaW1hdGVkLmpzIl0sIm5hbWVzIjpbIkFuaW1hdGVkTW9jayIsInJlcXVpcmUiLCJBbmltYXRlZEltcGxlbWVudGF0aW9uIiwiQW5pbWF0ZWQiLCJQbGF0Zm9ybSIsImlzVGVzdGluZyIsIm1vZHVsZSIsImV4cG9ydHMiLCJGbGF0TGlzdCIsIkltYWdlIiwiU2Nyb2xsVmlldyIsIlNlY3Rpb25MaXN0IiwiVGV4dCIsIlZpZXciXSwibWFwcGluZ3MiOiJBQVVBOzs7Ozs7QUFFQTs7Ozs7O0FBUUEsSUFBTUEsWUFBWSxHQUFHQyxPQUFPLGtCQUE1Qjs7QUFDQSxJQUFNQyxzQkFBc0IsR0FBR0QsT0FBTyw0QkFBdEM7O0FBRUEsSUFBTUUsUUFBUSxHQUFLQyxrQkFBU0MsU0FBVCxHQUNmTCxZQURlLEdBRWZFLHNCQUZKO0FBSUFJLE1BQU0sQ0FBQ0MsT0FBUDtBQUNFLE1BQUlDLFFBQUosR0FBaUM7QUFDL0IsV0FBT1AsT0FBTyxpQ0FBZDtBQUNELEdBSEg7O0FBSUUsTUFBSVEsS0FBSixHQUEyQjtBQUN6QixXQUFPUixPQUFPLDhCQUFkO0FBQ0QsR0FOSDs7QUFPRSxNQUFJUyxVQUFKLEdBQXFDO0FBQ25DLFdBQU9ULE9BQU8sbUNBQWQ7QUFDRCxHQVRIOztBQVVFLE1BQUlVLFdBQUosR0FBdUM7QUFDckMsV0FBT1YsT0FBTyxvQ0FBZDtBQUNELEdBWkg7O0FBYUUsTUFBSVcsSUFBSixHQUF5QjtBQUN2QixXQUFPWCxPQUFPLDZCQUFkO0FBQ0QsR0FmSDs7QUFnQkUsTUFBSVksSUFBSixHQUF5QjtBQUN2QixXQUFPWixPQUFPLDZCQUFkO0FBQ0Q7O0FBbEJILEdBbUJLRSxRQW5CTCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCBQbGF0Zm9ybSBmcm9tICcuLi9VdGlsaXRpZXMvUGxhdGZvcm0nO1xuaW1wb3J0IHR5cGVvZiBBbmltYXRlZEZsYXRMaXN0IGZyb20gJy4vY29tcG9uZW50cy9BbmltYXRlZEZsYXRMaXN0JztcbmltcG9ydCB0eXBlb2YgQW5pbWF0ZWRJbWFnZSBmcm9tICcuL2NvbXBvbmVudHMvQW5pbWF0ZWRJbWFnZSc7XG5pbXBvcnQgdHlwZW9mIEFuaW1hdGVkU2Nyb2xsVmlldyBmcm9tICcuL2NvbXBvbmVudHMvQW5pbWF0ZWRTY3JvbGxWaWV3JztcbmltcG9ydCB0eXBlb2YgQW5pbWF0ZWRTZWN0aW9uTGlzdCBmcm9tICcuL2NvbXBvbmVudHMvQW5pbWF0ZWRTZWN0aW9uTGlzdCc7XG5pbXBvcnQgdHlwZW9mIEFuaW1hdGVkVGV4dCBmcm9tICcuL2NvbXBvbmVudHMvQW5pbWF0ZWRUZXh0JztcbmltcG9ydCB0eXBlb2YgQW5pbWF0ZWRWaWV3IGZyb20gJy4vY29tcG9uZW50cy9BbmltYXRlZFZpZXcnO1xuXG5jb25zdCBBbmltYXRlZE1vY2sgPSByZXF1aXJlKCcuL0FuaW1hdGVkTW9jaycpO1xuY29uc3QgQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbicpO1xuXG5jb25zdCBBbmltYXRlZCA9ICgoUGxhdGZvcm0uaXNUZXN0aW5nXG4gID8gQW5pbWF0ZWRNb2NrXG4gIDogQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbik6IHR5cGVvZiBBbmltYXRlZE1vY2spO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0IEZsYXRMaXN0KCk6IEFuaW1hdGVkRmxhdExpc3Qge1xuICAgIHJldHVybiByZXF1aXJlKCcuL2NvbXBvbmVudHMvQW5pbWF0ZWRGbGF0TGlzdCcpO1xuICB9LFxuICBnZXQgSW1hZ2UoKTogQW5pbWF0ZWRJbWFnZSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vY29tcG9uZW50cy9BbmltYXRlZEltYWdlJyk7XG4gIH0sXG4gIGdldCBTY3JvbGxWaWV3KCk6IEFuaW1hdGVkU2Nyb2xsVmlldyB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vY29tcG9uZW50cy9BbmltYXRlZFNjcm9sbFZpZXcnKTtcbiAgfSxcbiAgZ2V0IFNlY3Rpb25MaXN0KCk6IEFuaW1hdGVkU2VjdGlvbkxpc3Qge1xuICAgIHJldHVybiByZXF1aXJlKCcuL2NvbXBvbmVudHMvQW5pbWF0ZWRTZWN0aW9uTGlzdCcpO1xuICB9LFxuICBnZXQgVGV4dCgpOiBBbmltYXRlZFRleHQge1xuICAgIHJldHVybiByZXF1aXJlKCcuL2NvbXBvbmVudHMvQW5pbWF0ZWRUZXh0Jyk7XG4gIH0sXG4gIGdldCBWaWV3KCk6IEFuaW1hdGVkVmlldyB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vY29tcG9uZW50cy9BbmltYXRlZFZpZXcnKTtcbiAgfSxcbiAgLi4uQW5pbWF0ZWQsXG59O1xuIl19