{"version":3,"sources":["NavigationContainer.tsx"],"names":["global","theme","DefaultTheme","fallback","rest","isLinkingEnabled","linking","refContainer","React","getInitialState","independent","enabled","prefixes","REACT_NAVIGATION_DEVTOOLS","getStateFromPath","getPathFromState","getActionFromState","linkingContext","options","isReady","onReadyRef","NavigationContainer"],"mappings":"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","sourcesContent":["import {\n  BaseNavigationContainer,\n  getActionFromState,\n  getPathFromState,\n  getStateFromPath,\n  NavigationContainerProps,\n  NavigationContainerRef,\n  ParamListBase,\n  validatePathConfig,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport LinkingContext from './LinkingContext';\nimport DefaultTheme from './theming/DefaultTheme';\nimport ThemeProvider from './theming/ThemeProvider';\nimport type { DocumentTitleOptions, LinkingOptions, Theme } from './types';\nimport useBackButton from './useBackButton';\nimport useDocumentTitle from './useDocumentTitle';\nimport useLinking from './useLinking';\nimport useThenable from './useThenable';\n\ndeclare global {\n  var REACT_NAVIGATION_DEVTOOLS: WeakMap<\n    NavigationContainerRef<any>,\n    { readonly linking: LinkingOptions<any> }\n  >;\n}\n\nglobal.REACT_NAVIGATION_DEVTOOLS = new WeakMap();\n\ntype Props<ParamList extends {}> = NavigationContainerProps & {\n  theme?: Theme;\n  linking?: LinkingOptions<ParamList>;\n  fallback?: React.ReactNode;\n  documentTitle?: DocumentTitleOptions;\n  onReady?: () => void;\n};\n\n/**\n * Container component which holds the navigation state designed for React Native apps.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree. When deep link handling is enabled, this will override deep links when specified. Make sure that you don't specify an `initialState` when there's a deep link (`Linking.getInitialURL()`).\n * @param props.onReady Callback which is called after the navigation tree mounts.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.theme Theme object for the navigators.\n * @param props.linking Options for deep linking. Deep link handling is enabled when this prop is provided, unless `linking.enabled` is `false`.\n * @param props.fallback Fallback component to render until we have finished getting initial state when linking is enabled. Defaults to `null`.\n * @param props.documentTitle Options to configure the document title on Web. Updating document title is handled by default unless `documentTitle.enabled` is `false`.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nfunction NavigationContainerInner(\n  {\n    theme = DefaultTheme,\n    linking,\n    fallback = null,\n    documentTitle,\n    onReady,\n    ...rest\n  }: Props<ParamListBase>,\n  ref?: React.Ref<NavigationContainerRef<ParamListBase> | null>\n) {\n  const isLinkingEnabled = linking ? linking.enabled !== false : false;\n\n  if (linking?.config) {\n    validatePathConfig(linking.config);\n  }\n\n  const refContainer =\n    React.useRef<NavigationContainerRef<ParamListBase>>(null);\n\n  useBackButton(refContainer);\n  useDocumentTitle(refContainer, documentTitle);\n\n  const { getInitialState } = useLinking(refContainer, {\n    independent: rest.independent,\n    enabled: isLinkingEnabled,\n    prefixes: [],\n    ...linking,\n  });\n\n  // Add additional linking related info to the ref\n  // This will be used by the devtools\n  React.useEffect(() => {\n    if (refContainer.current) {\n      REACT_NAVIGATION_DEVTOOLS.set(refContainer.current, {\n        get linking() {\n          return {\n            ...linking,\n            enabled: isLinkingEnabled,\n            prefixes: linking?.prefixes ?? [],\n            getStateFromPath: linking?.getStateFromPath ?? getStateFromPath,\n            getPathFromState: linking?.getPathFromState ?? getPathFromState,\n            getActionFromState:\n              linking?.getActionFromState ?? getActionFromState,\n          };\n        },\n      });\n    }\n  });\n\n  const [isResolved, initialState] = useThenable(getInitialState);\n\n  React.useImperativeHandle(ref, () => refContainer.current);\n\n  const linkingContext = React.useMemo(() => ({ options: linking }), [linking]);\n\n  const isReady = rest.initialState != null || !isLinkingEnabled || isResolved;\n\n  const onReadyRef = React.useRef(onReady);\n\n  React.useEffect(() => {\n    onReadyRef.current = onReady;\n  });\n\n  React.useEffect(() => {\n    if (isReady) {\n      onReadyRef.current?.();\n    }\n  }, [isReady]);\n\n  if (!isReady) {\n    // This is temporary until we have Suspense for data-fetching\n    // Then the fallback will be handled by a parent `Suspense` component\n    return fallback as React.ReactElement;\n  }\n\n  return (\n    <LinkingContext.Provider value={linkingContext}>\n      <ThemeProvider value={theme}>\n        <BaseNavigationContainer\n          {...rest}\n          initialState={\n            rest.initialState == null ? initialState : rest.initialState\n          }\n          ref={refContainer}\n        />\n      </ThemeProvider>\n    </LinkingContext.Provider>\n  );\n}\n\nconst NavigationContainer = React.forwardRef(NavigationContainerInner) as <\n  RootParamList extends {} = ReactNavigation.RootParamList\n>(\n  props: Props<RootParamList> & {\n    ref?: React.Ref<NavigationContainerRef<RootParamList>>;\n  }\n) => React.ReactElement;\n\nexport default NavigationContainer;\n"]}