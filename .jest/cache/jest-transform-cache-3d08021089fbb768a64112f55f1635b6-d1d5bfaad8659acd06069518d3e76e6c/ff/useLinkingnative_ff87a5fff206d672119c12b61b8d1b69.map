{"version":3,"sources":["useLinking.native.tsx"],"names":["linkingHandlers","enabled","getInitialURL","Promise","Linking","resolve","setTimeout","subscribe","listener","callback","url","subscription","getStateFromPath","getStateFromPathDefault","getActionFromState","getActionFromStateDefault","React","process","console","Platform","handler","Symbol","index","enabledRef","prefixesRef","filterRef","configRef","getInitialURLRef","getStateFromPathRef","getActionFromStateRef","getStateFromURL","path","getInitialState","state","thenable","then","onfulfilled","catch","navigation","ref","rootState","r","action","e"],"mappings":"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","sourcesContent":["import {\n  getActionFromState as getActionFromStateDefault,\n  getStateFromPath as getStateFromPathDefault,\n  NavigationContainerRef,\n  ParamListBase,\n} from '@react-navigation/core';\nimport * as React from 'react';\nimport { Linking, Platform } from 'react-native';\n\nimport extractPathFromURL from './extractPathFromURL';\nimport type { LinkingOptions } from './types';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\ntype Options = LinkingOptions<ParamListBase> & {\n  independent?: boolean;\n};\n\nlet linkingHandlers: Symbol[] = [];\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef<ParamListBase>>,\n  {\n    independent,\n    enabled = true,\n    prefixes,\n    filter,\n    config,\n    getInitialURL = () =>\n      Promise.race([\n        Linking.getInitialURL(),\n        new Promise<undefined>((resolve) =>\n          // Timeout in 150ms if `getInitialState` doesn't resolve\n          // Workaround for https://github.com/facebook/react-native/issues/25675\n          setTimeout(resolve, 150)\n        ),\n      ]),\n    subscribe = (listener) => {\n      const callback = ({ url }: { url: string }) => listener(url);\n\n      const subscription = Linking.addEventListener('url', callback) as\n        | { remove(): void }\n        | undefined;\n\n      return () => {\n        // https://github.com/facebook/react-native/commit/6d1aca806cee86ad76de771ed3a1cc62982ebcd7\n        if (subscription?.remove) {\n          subscription.remove();\n        } else {\n          Linking.removeEventListener('url', callback);\n        }\n      };\n    },\n    getStateFromPath = getStateFromPathDefault,\n    getActionFromState = getActionFromStateDefault,\n  }: Options\n) {\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n\n    if (independent) {\n      return undefined;\n    }\n\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\",\n          '- Only a single instance of the root component is rendered',\n          Platform.OS === 'android'\n            ? \"- You have set 'android:launchMode=singleTask' in the '<activity />' section of the 'AndroidManifest.xml' file to avoid launching multiple instances\"\n            : '',\n        ]\n          .join('\\n')\n          .trim()\n      );\n    }\n\n    const handler = Symbol();\n\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n\n    return () => {\n      const index = linkingHandlers.indexOf(handler);\n\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const prefixesRef = React.useRef(prefixes);\n  const filterRef = React.useRef(filter);\n  const configRef = React.useRef(config);\n  const getInitialURLRef = React.useRef(getInitialURL);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    prefixesRef.current = prefixes;\n    filterRef.current = filter;\n    configRef.current = config;\n    getInitialURLRef.current = getInitialURL;\n    getStateFromPathRef.current = getStateFromPath;\n    getActionFromStateRef.current = getActionFromState;\n  });\n\n  const getStateFromURL = React.useCallback(\n    (url: string | null | undefined) => {\n      if (!url || (filterRef.current && !filterRef.current(url))) {\n        return undefined;\n      }\n\n      const path = extractPathFromURL(prefixesRef.current, url);\n\n      return path\n        ? getStateFromPathRef.current(path, configRef.current)\n        : undefined;\n    },\n    []\n  );\n\n  const getInitialState = React.useCallback(() => {\n    let state: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const url = getInitialURLRef.current();\n\n      if (url != null && typeof url !== 'string') {\n        return url.then((url) => {\n          const state = getStateFromURL(url);\n\n          return state;\n        });\n      }\n\n      state = getStateFromURL(url);\n    }\n\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        return Promise.resolve(onfulfilled ? onfulfilled(state) : state);\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n  }, [getStateFromURL]);\n\n  React.useEffect(() => {\n    const listener = (url: string) => {\n      if (!enabled) {\n        return;\n      }\n\n      const navigation = ref.current;\n      const state = navigation ? getStateFromURL(url) : undefined;\n\n      if (navigation && state) {\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        const rootState = navigation.getRootState();\n\n        if (state.routes.some((r) => !rootState?.routeNames.includes(r.name))) {\n          console.warn(\n            \"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\"\n          );\n          return;\n        }\n\n        const action = getActionFromStateRef.current(state, configRef.current);\n\n        if (action !== undefined) {\n          try {\n            navigation.dispatch(action);\n          } catch (e) {\n            // Ignore any errors from deep linking.\n            // This could happen in case of malformed links, navigation object not being initialized etc.\n            console.warn(\n              `An error occurred when trying to handle the link '${url}': ${e.message}`\n            );\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      }\n    };\n\n    return subscribe(listener);\n  }, [enabled, getStateFromURL, ref, subscribe]);\n\n  return {\n    getInitialState,\n  };\n}\n"]}