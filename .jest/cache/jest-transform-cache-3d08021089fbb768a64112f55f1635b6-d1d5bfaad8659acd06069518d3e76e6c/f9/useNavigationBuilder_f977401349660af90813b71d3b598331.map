{"version":3,"sources":["useNavigationBuilder.tsx"],"names":["PrivateValueStore","isValidKey","key","getRouteConfigsFromChildren","configs","React","child","Screen","JSON","acc","keys","options","props","Group","groupOptions","name","String","process","config","getComponent","children","component","console","navigatorKey","route","NavigationRouteContext","rest","current","router","createRouter","initialRouteName","screen","routeConfigs","screens","routeNames","routeKeyList","routeParamList","initialParams","routeGetIdList","getId","isStateValid","state","isStateInitialized","getState","setState","getIsInitial","NavigationStateContext","stateCleanedUp","cleanUpState","setCurrentState","initialRouteParamList","initialParamsFromParams","currentState","previousRouteKeyListRef","previousRouteKeyList","nextState","routeKeyChanges","Object","previousNestedParamsRef","previousParams","action","CommonActions","params","path","updatedState","shouldUpdate","setKey","setTimeout","getCurrentState","getKey","initializedStateRef","emitter","e","navigation","descriptors","listeners","map","type","cb","self","listener","data","addListener","addKeyedListener","onAction","actionListeners","childListeners","beforeRemoveListeners","keyedListeners","routerConfigOptions","onRouteFocus","focusedListeners","focus","getStateListeners","screenOptions","defaultScreenOptions","NavigationContent","NavigationHelpersContext","value"],"mappings":"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","sourcesContent":["import {\n  CommonActions,\n  DefaultRouterOptions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n  RouterConfigOptions,\n  RouterFactory,\n} from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\n\nimport Group from './Group';\nimport isArrayEqual from './isArrayEqual';\nimport isRecordEqual from './isRecordEqual';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport Screen from './Screen';\nimport {\n  DefaultNavigatorOptions,\n  EventMapBase,\n  EventMapCore,\n  NavigatorScreenParams,\n  PrivateValueStore,\n  RouteConfig,\n} from './types';\nimport useChildListeners from './useChildListeners';\nimport useComponent from './useComponent';\nimport useCurrentRender from './useCurrentRender';\nimport useDescriptors, { ScreenConfigWithParent } from './useDescriptors';\nimport useEventEmitter from './useEventEmitter';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useFocusEvents from './useFocusEvents';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useOnGetState from './useOnGetState';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useScheduleUpdate from './useScheduleUpdate';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype NavigatorRoute<State extends NavigationState> = {\n  key: string;\n  params?: NavigatorScreenParams<ParamListBase, State>;\n};\n\nconst isValidKey = (key: unknown) =>\n  key === undefined || (typeof key === 'string' && key !== '');\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>(\n  children: React.ReactNode,\n  groupKey?: string,\n  groupOptions?: ScreenConfigWithParent<\n    State,\n    ScreenOptions,\n    EventMap\n  >['options']\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the screen '${\n              child.props.name\n            }'. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          props: child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap\n          >,\n        });\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the group. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children,\n            child.props.navigationKey,\n            child.type !== Group\n              ? groupOptions\n              : groupOptions != null\n              ? [...groupOptions, child.props.screenOptions]\n              : [child.props.screenOptions]\n          )\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${\n        React.isValidElement(child)\n          ? `'${\n              typeof child.type === 'string' ? child.type : child.type?.name\n            }'${\n              child.props?.name ? ` for the screen '${child.props.name}'` : ''\n            }`\n          : typeof child === 'object'\n          ? JSON.stringify(child)\n          : `'${String(child)}'`\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component, getComponent } = config.props;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (\n        children != null ||\n        component !== undefined ||\n        getComponent !== undefined\n      ) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\n          );\n        }\n\n        if (typeof component === 'function' && component.name === 'component') {\n          // Inline anonymous functions passed in the `component` prop will have the name of the prop\n          // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n          // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n          console.warn(\n            `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n          );\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<\n    ParamListBase,\n    State,\n    ScreenOptions,\n    EventMap\n  > &\n    RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute<State>\n    | undefined;\n\n  const { children, screenListeners, ...rest } = options;\n  const { current: router } = React.useRef<Router<State, any>>(\n    createRouter({\n      ...(rest as unknown as RouterOptions),\n      ...(route?.params &&\n      route.params.state == null &&\n      route.params.initial !== false &&\n      typeof route.params.screen === 'string'\n        ? { initialRouteName: route.params.screen }\n        : null),\n    })\n  );\n\n  const routeConfigs =\n    getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(children);\n\n  const screens = routeConfigs.reduce<\n    Record<string, ScreenConfigWithParent<State, ScreenOptions, EventMap>>\n  >((acc, config) => {\n    if (config.props.name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`\n      );\n    }\n\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config.props.name);\n  const routeKeyList = routeNames.reduce<Record<string, React.Key | undefined>>(\n    (acc, curr) => {\n      acc[curr] = screens[curr].keys.map((key) => key ?? '').join(':');\n      return acc;\n    },\n    {}\n  );\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      acc[curr] = initialParams;\n      return acc;\n    },\n    {}\n  );\n  const routeGetIdList = routeNames.reduce<\n    RouterConfigOptions['routeGetIdList']\n  >(\n    (acc, curr) =>\n      Object.assign(acc, {\n        [curr]: screens[curr].props.getId,\n      }),\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state) => state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial,\n  } = React.useContext(NavigationStateContext);\n\n  const stateCleanedUp = React.useRef(false);\n\n  const cleanUpState = React.useCallback(() => {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n\n  const setState = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) => {\n      if (stateCleanedUp.current) {\n        // State might have been already cleaned up due to unmount\n        // We do not want to expose API allowing to override this\n        // This would lead to old data preservation on main navigator unmount\n        return;\n      }\n      setCurrentState(state);\n    },\n    [setCurrentState]\n  );\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    const initialRouteParamList = routeNames.reduce<\n      Record<string, object | undefined>\n    >((acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      const initialParamsFromParams =\n        route?.params?.state == null &&\n        route?.params?.initial !== false &&\n        route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    }, {});\n\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (\n      (currentState === undefined || !isStateValid(currentState)) &&\n      route?.params?.state == null\n    ) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList,\n        }),\n        true,\n      ];\n    } else {\n      return [\n        router.getRehydratedState(\n          route?.params?.state ?? (currentState as PartialState<State>),\n          {\n            routeNames,\n            routeParamList: initialRouteParamList,\n            routeGetIdList,\n          }\n        ),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames, route.params etc. in the dep list\n    // below. We want to avoid forcing a new state to be calculated in those cases\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  const previousRouteKeyListRef = React.useRef(routeKeyList);\n\n  React.useEffect(() => {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n\n  const previousRouteKeyList = previousRouteKeyListRef.current;\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initalized locally\n    // So it'll be `undefined` or stale until the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (\n    !isArrayEqual(state.routeNames, routeNames) ||\n    !isRecordEqual(routeKeyList, previousRouteKeyList)\n  ) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(\n        (name) =>\n          previousRouteKeyList.hasOwnProperty(name) &&\n          routeKeyList[name] !== previousRouteKeyList[name]\n      ),\n    });\n  }\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n\n    let action: CommonActions.Action | undefined;\n\n    if (\n      typeof route.params.state === 'object' &&\n      route.params.state != null &&\n      route.params !== previousParams\n    ) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (\n      typeof route.params.screen === 'string' &&\n      ((route.params.initial === false && isFirstStateInitialization) ||\n        route.params !== previousParams)\n    ) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path,\n      });\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action\n      ? router.getStateForAction(nextState, action, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        })\n      : null;\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n            routeGetIdList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n  const initializedStateRef = React.useRef<State>();\n  initializedStateRef.current = initializedState;\n\n  const getState = React.useCallback((): State => {\n    const currentState = getCurrentState();\n\n    return isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n  }, [getCurrentState, isStateInitialized]);\n\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\n    let routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        // Get an array of listeners for all screens + common listeners on navigator\n        ...[\n          screenListeners,\n          ...routeNames.map((name) => {\n            const { listeners } = screens[name].props;\n            return listeners;\n          }),\n        ].map((listeners) => {\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      // We don't want same listener to be called multiple times for same event\n      // So we remove any duplicate functions from the array\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const { listeners: childListeners, addListener } = useChildListeners();\n\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    },\n    emitter,\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<\n    State,\n    ActionHelpers,\n    NavigationAction,\n    EventMap\n  >({\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus,\n  });\n\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState,\n  });\n\n  const descriptors = useDescriptors<\n    State,\n    ActionHelpers,\n    ScreenOptions,\n    EventMap\n  >({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  const NavigationContent = useComponent(NavigationHelpersContext.Provider, {\n    value: navigation,\n  });\n\n  return {\n    state,\n    navigation,\n    descriptors,\n    NavigationContent,\n  };\n}\n"]}