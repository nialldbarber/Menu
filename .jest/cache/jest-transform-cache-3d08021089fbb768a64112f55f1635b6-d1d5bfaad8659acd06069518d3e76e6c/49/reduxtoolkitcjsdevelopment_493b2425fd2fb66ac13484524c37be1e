6e2143ad22d0e90ed0f5d619177b8b4f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");

    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __generator = this && this.__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function sent() {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) {
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var __spreadArray = this && this.__spreadArray || function (to, from) {
  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {
    to[j] = from[i];
  }

  return to;
};

var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;

var __defNormalProp = function __defNormalProp(obj, key, value) {
  return key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value: value
  }) : obj[key] = value;
};

var __spreadValues = function __spreadValues(a, b) {
  for (var prop in b || (b = {})) {
    if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
  }

  if (__getOwnPropSymbols) for (var _i = 0, _c = __getOwnPropSymbols(b); _i < _c.length; _i++) {
    var prop = _c[_i];
    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
  }
  return a;
};

var __spreadProps = function __spreadProps(a, b) {
  return __defProps(a, __getOwnPropDescs(b));
};

var __markAsModule = function __markAsModule(target) {
  return __defProp(target, "__esModule", {
    value: true
  });
};

var __export = function __export(target, all) {
  for (var name in all) {
    __defProp(target, name, {
      get: all[name],
      enumerable: true
    });
  }
};

var __reExport = function __reExport(target, module2, desc) {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    var _loop_1 = function _loop_1(key) {
      if (!__hasOwnProp.call(target, key) && key !== "default") __defProp(target, key, {
        get: function get() {
          return module2[key];
        },
        enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable
      });
    };

    for (var _i = 0, _c = __getOwnPropNames(module2); _i < _c.length; _i++) {
      var key = _c[_i];

      _loop_1(key);
    }
  }

  return target;
};

var __toModule = function __toModule(module2) {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {
    get: function get() {
      return module2.default;
    },
    enumerable: true
  } : {
    value: module2,
    enumerable: true
  })), module2);
};

var __async = function __async(__this, __arguments, generator) {
  return new Promise(function (resolve, reject) {
    var fulfilled = function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };

    var rejected = function rejected(value) {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };

    var step = function step(x) {
      return x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    };

    step((generator = generator.apply(__this, __arguments)).next());
  });
};

__markAsModule(exports);

__export(exports, {
  MiddlewareArray: function MiddlewareArray() {
    return _MiddlewareArray;
  },
  configureStore: function configureStore() {
    return _configureStore;
  },
  createAction: function createAction() {
    return _createAction;
  },
  createAsyncThunk: function createAsyncThunk() {
    return _createAsyncThunk;
  },
  createDraftSafeSelector: function createDraftSafeSelector() {
    return _createDraftSafeSelector;
  },
  createEntityAdapter: function createEntityAdapter() {
    return _createEntityAdapter;
  },
  createImmutableStateInvariantMiddleware: function createImmutableStateInvariantMiddleware() {
    return _createImmutableStateInvariantMiddleware;
  },
  createNextState: function createNextState() {
    return import_immer5.default;
  },
  createReducer: function createReducer() {
    return _createReducer;
  },
  createSelector: function createSelector() {
    return import_reselect2.createSelector;
  },
  createSerializableStateInvariantMiddleware: function createSerializableStateInvariantMiddleware() {
    return _createSerializableStateInvariantMiddleware;
  },
  createSlice: function createSlice() {
    return _createSlice;
  },
  current: function current() {
    return import_immer5.current;
  },
  findNonSerializableValue: function findNonSerializableValue() {
    return _findNonSerializableValue;
  },
  freeze: function freeze() {
    return import_immer5.freeze;
  },
  getDefaultMiddleware: function getDefaultMiddleware() {
    return _getDefaultMiddleware;
  },
  getType: function getType() {
    return _getType;
  },
  isAllOf: function isAllOf() {
    return _isAllOf;
  },
  isAnyOf: function isAnyOf() {
    return _isAnyOf;
  },
  isAsyncThunkAction: function isAsyncThunkAction() {
    return _isAsyncThunkAction;
  },
  isDraft: function isDraft() {
    return import_immer5.isDraft;
  },
  isFulfilled: function isFulfilled() {
    return _isFulfilled;
  },
  isImmutableDefault: function isImmutableDefault() {
    return _isImmutableDefault;
  },
  isPending: function isPending() {
    return _isPending;
  },
  isPlain: function isPlain() {
    return _isPlain;
  },
  isPlainObject: function isPlainObject() {
    return _isPlainObject;
  },
  isRejected: function isRejected() {
    return _isRejected;
  },
  isRejectedWithValue: function isRejectedWithValue() {
    return _isRejectedWithValue;
  },
  miniSerializeError: function miniSerializeError() {
    return _miniSerializeError;
  },
  nanoid: function nanoid() {
    return _nanoid;
  },
  original: function original() {
    return import_immer5.original;
  },
  unwrapResult: function unwrapResult() {
    return _unwrapResult;
  }
});

var import_immer4 = __toModule(require("immer"));

__reExport(exports, __toModule(require("redux")));

var import_immer5 = __toModule(require("immer"));

var import_reselect2 = __toModule(require("reselect"));

var import_immer = __toModule(require("immer"));

var import_reselect = __toModule(require("reselect"));

var _createDraftSafeSelector = function _createDraftSafeSelector() {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }

  var selector = (0, import_reselect.createSelector).apply(void 0, args);

  var wrappedSelector = function wrappedSelector(value) {
    var rest = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      rest[_i - 1] = arguments[_i];
    }

    return selector.apply(void 0, __spreadArray([(0, import_immer.isDraft)(value) ? (0, import_immer.current)(value) : value], rest));
  };

  return wrappedSelector;
};

var import_redux2 = __toModule(require("redux"));

var import_redux = __toModule(require("redux"));

var composeWithDevTools = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : function () {
  if (arguments.length === 0) return void 0;
  if (typeof arguments[0] === "object") return import_redux.compose;
  return import_redux.compose.apply(null, arguments);
};
var devToolsEnhancer = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__ : function () {
  return function (noop) {
    return noop;
  };
};

function _isPlainObject(value) {
  if (typeof value !== "object" || value === null) return false;
  var proto = Object.getPrototypeOf(value);
  if (proto === null) return true;
  var baseProto = proto;

  while (Object.getPrototypeOf(baseProto) !== null) {
    baseProto = Object.getPrototypeOf(baseProto);
  }

  return proto === baseProto;
}

var import_redux_thunk = __toModule(require("redux-thunk"));

function getTimeMeasureUtils(maxDelay, fnName) {
  var elapsed = 0;
  return {
    measureTime: function measureTime(fn) {
      var started = Date.now();

      try {
        return fn();
      } finally {
        var finished = Date.now();
        elapsed += finished - started;
      }
    },
    warnIfExceeded: function warnIfExceeded() {
      if (elapsed > maxDelay) {
        console.warn(fnName + " took " + elapsed + "ms, which is more than the warning threshold of " + maxDelay + "ms. \nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\nIt is disabled in production builds, so you don't need to worry about that.");
      }
    }
  };
}

var _MiddlewareArray = function (_super) {
  __extends(MiddlewareArray, _super);

  function MiddlewareArray() {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    var _this = _super.apply(this, args) || this;

    Object.setPrototypeOf(_this, MiddlewareArray.prototype);
    return _this;
  }

  Object.defineProperty(MiddlewareArray, Symbol.species, {
    get: function get() {
      return MiddlewareArray;
    },
    enumerable: false,
    configurable: true
  });

  MiddlewareArray.prototype.concat = function () {
    var arr = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      arr[_i] = arguments[_i];
    }

    return _super.prototype.concat.apply(this, arr);
  };

  MiddlewareArray.prototype.prepend = function () {
    var arr = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      arr[_i] = arguments[_i];
    }

    if (arr.length === 1 && Array.isArray(arr[0])) {
      return new (MiddlewareArray.bind.apply(MiddlewareArray, __spreadArray([void 0], arr[0].concat(this))))();
    }

    return new (MiddlewareArray.bind.apply(MiddlewareArray, __spreadArray([void 0], arr.concat(this))))();
  };

  return MiddlewareArray;
}(Array);

var isProduction = false;
var prefix = "Invariant failed";

function invariant(condition, message) {
  if (condition) {
    return;
  }

  if (isProduction) {
    throw new Error(prefix);
  }

  throw new Error(prefix + ": " + (message || ""));
}

function stringify(obj, serializer, indent, decycler) {
  return JSON.stringify(obj, getSerialize(serializer, decycler), indent);
}

function getSerialize(serializer, decycler) {
  var stack = [],
      keys = [];
  if (!decycler) decycler = function decycler(_, value) {
    if (stack[0] === value) return "[Circular ~]";
    return "[Circular ~." + keys.slice(0, stack.indexOf(value)).join(".") + "]";
  };
  return function (key, value) {
    if (stack.length > 0) {
      var thisPos = stack.indexOf(this);
      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);
      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);
      if (~stack.indexOf(value)) value = decycler.call(this, key, value);
    } else stack.push(value);

    return serializer == null ? value : serializer.call(this, key, value);
  };
}

function _isImmutableDefault(value) {
  return typeof value !== "object" || value === null || typeof value === "undefined" || Object.isFrozen(value);
}

function trackForMutations(isImmutable, ignorePaths, obj) {
  var trackedProperties = trackProperties(isImmutable, ignorePaths, obj);
  return {
    detectMutations: function detectMutations() {
      return _detectMutations(isImmutable, ignorePaths, trackedProperties, obj);
    }
  };
}

function trackProperties(isImmutable, ignorePaths, obj, path) {
  if (ignorePaths === void 0) {
    ignorePaths = [];
  }

  if (path === void 0) {
    path = "";
  }

  var tracked = {
    value: obj
  };

  if (!isImmutable(obj)) {
    tracked.children = {};

    for (var key in obj) {
      var childPath = path ? path + "." + key : key;

      if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {
        continue;
      }

      tracked.children[key] = trackProperties(isImmutable, ignorePaths, obj[key], childPath);
    }
  }

  return tracked;
}

function _detectMutations(isImmutable, ignorePaths, trackedProperty, obj, sameParentRef, path) {
  if (ignorePaths === void 0) {
    ignorePaths = [];
  }

  if (sameParentRef === void 0) {
    sameParentRef = false;
  }

  if (path === void 0) {
    path = "";
  }

  var prevObj = trackedProperty ? trackedProperty.value : void 0;
  var sameRef = prevObj === obj;

  if (sameParentRef && !sameRef && !Number.isNaN(obj)) {
    return {
      wasMutated: true,
      path: path
    };
  }

  if (isImmutable(prevObj) || isImmutable(obj)) {
    return {
      wasMutated: false
    };
  }

  var keysToDetect = {};

  for (var key in trackedProperty.children) {
    keysToDetect[key] = true;
  }

  for (var key in obj) {
    keysToDetect[key] = true;
  }

  for (var key in keysToDetect) {
    var childPath = path ? path + "." + key : key;

    if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {
      continue;
    }

    var result = _detectMutations(isImmutable, ignorePaths, trackedProperty.children[key], obj[key], sameRef, childPath);

    if (result.wasMutated) {
      return result;
    }
  }

  return {
    wasMutated: false
  };
}

function _createImmutableStateInvariantMiddleware(options) {
  if (options === void 0) {
    options = {};
  }

  if (false) {
    return function () {
      return function (next) {
        return function (action) {
          return next(action);
        };
      };
    };
  }

  var _c = options.isImmutable,
      isImmutable = _c === void 0 ? _isImmutableDefault : _c,
      ignoredPaths = options.ignoredPaths,
      _d = options.warnAfter,
      warnAfter = _d === void 0 ? 32 : _d,
      ignore = options.ignore;
  ignoredPaths = ignoredPaths || ignore;
  var track = trackForMutations.bind(null, isImmutable, ignoredPaths);
  return function (_c) {
    var getState = _c.getState;
    var state = getState();
    var tracker = track(state);
    var result;
    return function (next) {
      return function (action) {
        var measureUtils = getTimeMeasureUtils(warnAfter, "ImmutableStateInvariantMiddleware");
        measureUtils.measureTime(function () {
          state = getState();
          result = tracker.detectMutations();
          tracker = track(state);
          invariant(!result.wasMutated, "A state mutation was detected between dispatches, in the path '" + (result.path || "") + "'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)");
        });
        var dispatchedAction = next(action);
        measureUtils.measureTime(function () {
          state = getState();
          result = tracker.detectMutations();
          tracker = track(state);
          result.wasMutated && invariant(!result.wasMutated, "A state mutation was detected inside a dispatch, in the path: " + (result.path || "") + ". Take a look at the reducer(s) handling the action " + stringify(action) + ". (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)");
        });
        measureUtils.warnIfExceeded();
        return dispatchedAction;
      };
    };
  };
}

function _isPlain(val) {
  var type = typeof val;
  return type === "undefined" || val === null || type === "string" || type === "boolean" || type === "number" || Array.isArray(val) || _isPlainObject(val);
}

function _findNonSerializableValue(value, path, isSerializable, getEntries, ignoredPaths) {
  if (path === void 0) {
    path = "";
  }

  if (isSerializable === void 0) {
    isSerializable = _isPlain;
  }

  if (ignoredPaths === void 0) {
    ignoredPaths = [];
  }

  var foundNestedSerializable;

  if (!isSerializable(value)) {
    return {
      keyPath: path || "<root>",
      value: value
    };
  }

  if (typeof value !== "object" || value === null) {
    return false;
  }

  var entries = getEntries != null ? getEntries(value) : Object.entries(value);
  var hasIgnoredPaths = ignoredPaths.length > 0;

  for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
    var _c = entries_1[_i],
        key = _c[0],
        nestedValue = _c[1];
    var nestedPath = path ? path + "." + key : key;

    if (hasIgnoredPaths && ignoredPaths.indexOf(nestedPath) >= 0) {
      continue;
    }

    if (!isSerializable(nestedValue)) {
      return {
        keyPath: nestedPath,
        value: nestedValue
      };
    }

    if (typeof nestedValue === "object") {
      foundNestedSerializable = _findNonSerializableValue(nestedValue, nestedPath, isSerializable, getEntries, ignoredPaths);

      if (foundNestedSerializable) {
        return foundNestedSerializable;
      }
    }
  }

  return false;
}

function _createSerializableStateInvariantMiddleware(options) {
  if (options === void 0) {
    options = {};
  }

  if (false) {
    return function () {
      return function (next) {
        return function (action) {
          return next(action);
        };
      };
    };
  }

  var _c = options.isSerializable,
      isSerializable = _c === void 0 ? _isPlain : _c,
      getEntries = options.getEntries,
      _d = options.ignoredActions,
      ignoredActions = _d === void 0 ? [] : _d,
      _e = options.ignoredActionPaths,
      ignoredActionPaths = _e === void 0 ? ["meta.arg", "meta.baseQueryMeta"] : _e,
      _f = options.ignoredPaths,
      ignoredPaths = _f === void 0 ? [] : _f,
      _g = options.warnAfter,
      warnAfter = _g === void 0 ? 32 : _g,
      _h = options.ignoreState,
      ignoreState = _h === void 0 ? false : _h;
  return function (storeAPI) {
    return function (next) {
      return function (action) {
        if (ignoredActions.length && ignoredActions.indexOf(action.type) !== -1) {
          return next(action);
        }

        var measureUtils = getTimeMeasureUtils(warnAfter, "SerializableStateInvariantMiddleware");
        measureUtils.measureTime(function () {
          var foundActionNonSerializableValue = _findNonSerializableValue(action, "", isSerializable, getEntries, ignoredActionPaths);

          if (foundActionNonSerializableValue) {
            var keyPath = foundActionNonSerializableValue.keyPath,
                value = foundActionNonSerializableValue.value;
            console.error("A non-serializable value was detected in an action, in the path: `" + keyPath + "`. Value:", value, "\nTake a look at the logic that dispatched this action: ", action, "\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)", "\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)");
          }
        });
        var result = next(action);

        if (!ignoreState) {
          measureUtils.measureTime(function () {
            var state = storeAPI.getState();

            var foundStateNonSerializableValue = _findNonSerializableValue(state, "", isSerializable, getEntries, ignoredPaths);

            if (foundStateNonSerializableValue) {
              var keyPath = foundStateNonSerializableValue.keyPath,
                  value = foundStateNonSerializableValue.value;
              console.error("A non-serializable value was detected in the state, in the path: `" + keyPath + "`. Value:", value, "\nTake a look at the reducer(s) handling this action type: " + action.type + ".\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)");
            }
          });
          measureUtils.warnIfExceeded();
        }

        return result;
      };
    };
  };
}

function isBoolean(x) {
  return typeof x === "boolean";
}

function curryGetDefaultMiddleware() {
  return function curriedGetDefaultMiddleware(options) {
    return _getDefaultMiddleware(options);
  };
}

function _getDefaultMiddleware(options) {
  if (options === void 0) {
    options = {};
  }

  var _c = options.thunk,
      thunk = _c === void 0 ? true : _c,
      _d = options.immutableCheck,
      immutableCheck = _d === void 0 ? true : _d,
      _e = options.serializableCheck,
      serializableCheck = _e === void 0 ? true : _e;
  var middlewareArray = new _MiddlewareArray();

  if (thunk) {
    if (isBoolean(thunk)) {
      middlewareArray.push(import_redux_thunk.default);
    } else {
      middlewareArray.push(import_redux_thunk.default.withExtraArgument(thunk.extraArgument));
    }
  }

  if (true) {
    if (immutableCheck) {
      var immutableOptions = {};

      if (!isBoolean(immutableCheck)) {
        immutableOptions = immutableCheck;
      }

      middlewareArray.unshift(_createImmutableStateInvariantMiddleware(immutableOptions));
    }

    if (serializableCheck) {
      var serializableOptions = {};

      if (!isBoolean(serializableCheck)) {
        serializableOptions = serializableCheck;
      }

      middlewareArray.push(_createSerializableStateInvariantMiddleware(serializableOptions));
    }
  }

  return middlewareArray;
}

var IS_PRODUCTION = false;

function _configureStore(options) {
  var curriedGetDefaultMiddleware = curryGetDefaultMiddleware();

  var _c = options || {},
      _d = _c.reducer,
      reducer = _d === void 0 ? void 0 : _d,
      _e = _c.middleware,
      middleware = _e === void 0 ? curriedGetDefaultMiddleware() : _e,
      _f = _c.devTools,
      devTools = _f === void 0 ? true : _f,
      _g = _c.preloadedState,
      preloadedState = _g === void 0 ? void 0 : _g,
      _h = _c.enhancers,
      enhancers = _h === void 0 ? void 0 : _h;

  var rootReducer;

  if (typeof reducer === "function") {
    rootReducer = reducer;
  } else if (_isPlainObject(reducer)) {
    rootReducer = (0, import_redux2.combineReducers)(reducer);
  } else {
    throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');
  }

  var finalMiddleware = middleware;

  if (typeof finalMiddleware === "function") {
    finalMiddleware = finalMiddleware(curriedGetDefaultMiddleware);

    if (!IS_PRODUCTION && !Array.isArray(finalMiddleware)) {
      throw new Error("when using a middleware builder function, an array of middleware must be returned");
    }
  }

  if (!IS_PRODUCTION && finalMiddleware.some(function (item) {
    return typeof item !== "function";
  })) {
    throw new Error("each middleware provided to configureStore must be a function");
  }

  var middlewareEnhancer = (0, import_redux2.applyMiddleware).apply(void 0, finalMiddleware);
  var finalCompose = import_redux2.compose;

  if (devTools) {
    finalCompose = composeWithDevTools(__spreadValues({
      trace: !IS_PRODUCTION
    }, typeof devTools === "object" && devTools));
  }

  var storeEnhancers = [middlewareEnhancer];

  if (Array.isArray(enhancers)) {
    storeEnhancers = __spreadArray([middlewareEnhancer], enhancers);
  } else if (typeof enhancers === "function") {
    storeEnhancers = enhancers(storeEnhancers);
  }

  var composedEnhancer = finalCompose.apply(void 0, storeEnhancers);
  return (0, import_redux2.createStore)(rootReducer, preloadedState, composedEnhancer);
}

function _createAction(type, prepareAction) {
  function actionCreator() {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    if (prepareAction) {
      var prepared = prepareAction.apply(void 0, args);

      if (!prepared) {
        throw new Error("prepareAction did not return an object");
      }

      return __spreadValues(__spreadValues({
        type: type,
        payload: prepared.payload
      }, "meta" in prepared && {
        meta: prepared.meta
      }), "error" in prepared && {
        error: prepared.error
      });
    }

    return {
      type: type,
      payload: args[0]
    };
  }

  actionCreator.toString = function () {
    return "" + type;
  };

  actionCreator.type = type;

  actionCreator.match = function (action) {
    return action.type === type;
  };

  return actionCreator;
}

function isFSA(action) {
  return _isPlainObject(action) && typeof action.type === "string" && Object.keys(action).every(isValidKey);
}

function isValidKey(key) {
  return ["type", "payload", "error", "meta"].indexOf(key) > -1;
}

function _getType(actionCreator) {
  return "" + actionCreator;
}

var import_immer2 = __toModule(require("immer"));

function executeReducerBuilderCallback(builderCallback) {
  var actionsMap = {};
  var actionMatchers = [];
  var defaultCaseReducer;
  var builder = {
    addCase: function addCase(typeOrActionCreator, reducer) {
      if (true) {
        if (actionMatchers.length > 0) {
          throw new Error("`builder.addCase` should only be called before calling `builder.addMatcher`");
        }

        if (defaultCaseReducer) {
          throw new Error("`builder.addCase` should only be called before calling `builder.addDefaultCase`");
        }
      }

      var type = typeof typeOrActionCreator === "string" ? typeOrActionCreator : typeOrActionCreator.type;

      if (type in actionsMap) {
        throw new Error("addCase cannot be called with two reducers for the same action type");
      }

      actionsMap[type] = reducer;
      return builder;
    },
    addMatcher: function addMatcher(matcher, reducer) {
      if (true) {
        if (defaultCaseReducer) {
          throw new Error("`builder.addMatcher` should only be called before calling `builder.addDefaultCase`");
        }
      }

      actionMatchers.push({
        matcher: matcher,
        reducer: reducer
      });
      return builder;
    },
    addDefaultCase: function addDefaultCase(reducer) {
      if (true) {
        if (defaultCaseReducer) {
          throw new Error("`builder.addDefaultCase` can only be called once");
        }
      }

      defaultCaseReducer = reducer;
      return builder;
    }
  };
  builderCallback(builder);
  return [actionsMap, actionMatchers, defaultCaseReducer];
}

function isStateFunction(x) {
  return typeof x === "function";
}

function _createReducer(initialState, mapOrBuilderCallback, actionMatchers, defaultCaseReducer) {
  if (actionMatchers === void 0) {
    actionMatchers = [];
  }

  var _c = typeof mapOrBuilderCallback === "function" ? executeReducerBuilderCallback(mapOrBuilderCallback) : [mapOrBuilderCallback, actionMatchers, defaultCaseReducer],
      actionsMap = _c[0],
      finalActionMatchers = _c[1],
      finalDefaultCaseReducer = _c[2];

  var getInitialState;

  if (isStateFunction(initialState)) {
    getInitialState = function getInitialState() {
      return (0, import_immer2.default)(initialState(), function () {});
    };
  } else {
    var frozenInitialState_1 = (0, import_immer2.default)(initialState, function () {});

    getInitialState = function getInitialState() {
      return frozenInitialState_1;
    };
  }

  function reducer(state, action) {
    if (state === void 0) {
      state = getInitialState();
    }

    var caseReducers = __spreadArray([actionsMap[action.type]], finalActionMatchers.filter(function (_c) {
      var matcher = _c.matcher;
      return matcher(action);
    }).map(function (_c) {
      var reducer2 = _c.reducer;
      return reducer2;
    }));

    if (caseReducers.filter(function (cr) {
      return !!cr;
    }).length === 0) {
      caseReducers = [finalDefaultCaseReducer];
    }

    return caseReducers.reduce(function (previousState, caseReducer) {
      if (caseReducer) {
        if ((0, import_immer2.isDraft)(previousState)) {
          var draft = previousState;
          var result = caseReducer(draft, action);

          if (typeof result === "undefined") {
            return previousState;
          }

          return result;
        } else if (!(0, import_immer2.isDraftable)(previousState)) {
          var result = caseReducer(previousState, action);

          if (typeof result === "undefined") {
            if (previousState === null) {
              return previousState;
            }

            throw Error("A case reducer on a non-draftable value must not return undefined");
          }

          return result;
        } else {
          return (0, import_immer2.default)(previousState, function (draft) {
            return caseReducer(draft, action);
          });
        }
      }

      return previousState;
    }, state);
  }

  reducer.getInitialState = getInitialState;
  return reducer;
}

function getType2(slice, actionKey) {
  return slice + "/" + actionKey;
}

function _createSlice(options) {
  var name = options.name;

  if (!name) {
    throw new Error("`name` is a required option for createSlice");
  }

  var initialState = typeof options.initialState == "function" ? options.initialState : (0, import_immer5.default)(options.initialState, function () {});
  var reducers = options.reducers || {};
  var reducerNames = Object.keys(reducers);
  var sliceCaseReducersByName = {};
  var sliceCaseReducersByType = {};
  var actionCreators = {};
  reducerNames.forEach(function (reducerName) {
    var maybeReducerWithPrepare = reducers[reducerName];
    var type = getType2(name, reducerName);
    var caseReducer;
    var prepareCallback;

    if ("reducer" in maybeReducerWithPrepare) {
      caseReducer = maybeReducerWithPrepare.reducer;
      prepareCallback = maybeReducerWithPrepare.prepare;
    } else {
      caseReducer = maybeReducerWithPrepare;
    }

    sliceCaseReducersByName[reducerName] = caseReducer;
    sliceCaseReducersByType[type] = caseReducer;
    actionCreators[reducerName] = prepareCallback ? _createAction(type, prepareCallback) : _createAction(type);
  });

  function buildReducer() {
    var _c = typeof options.extraReducers === "function" ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers],
        _d = _c[0],
        extraReducers = _d === void 0 ? {} : _d,
        _e = _c[1],
        actionMatchers = _e === void 0 ? [] : _e,
        _f = _c[2],
        defaultCaseReducer = _f === void 0 ? void 0 : _f;

    var finalCaseReducers = __spreadValues(__spreadValues({}, extraReducers), sliceCaseReducersByType);

    return _createReducer(initialState, finalCaseReducers, actionMatchers, defaultCaseReducer);
  }

  var _reducer;

  return {
    name: name,
    reducer: function reducer(state, action) {
      if (!_reducer) _reducer = buildReducer();
      return _reducer(state, action);
    },
    actions: actionCreators,
    caseReducers: sliceCaseReducersByName,
    getInitialState: function getInitialState() {
      if (!_reducer) _reducer = buildReducer();
      return _reducer.getInitialState();
    }
  };
}

function getInitialEntityState() {
  return {
    ids: [],
    entities: {}
  };
}

function createInitialStateFactory() {
  function getInitialState(additionalState) {
    if (additionalState === void 0) {
      additionalState = {};
    }

    return (0, _extends2.default)(getInitialEntityState(), additionalState);
  }

  return {
    getInitialState: getInitialState
  };
}

function createSelectorsFactory() {
  function getSelectors(selectState) {
    var selectIds = function selectIds(state) {
      return state.ids;
    };

    var selectEntities = function selectEntities(state) {
      return state.entities;
    };

    var selectAll = _createDraftSafeSelector(selectIds, selectEntities, function (ids, entities) {
      return ids.map(function (id) {
        return entities[id];
      });
    });

    var selectId = function selectId(_, id) {
      return id;
    };

    var selectById = function selectById(entities, id) {
      return entities[id];
    };

    var selectTotal = _createDraftSafeSelector(selectIds, function (ids) {
      return ids.length;
    });

    if (!selectState) {
      return {
        selectIds: selectIds,
        selectEntities: selectEntities,
        selectAll: selectAll,
        selectTotal: selectTotal,
        selectById: _createDraftSafeSelector(selectEntities, selectId, selectById)
      };
    }

    var selectGlobalizedEntities = _createDraftSafeSelector(selectState, selectEntities);

    return {
      selectIds: _createDraftSafeSelector(selectState, selectIds),
      selectEntities: selectGlobalizedEntities,
      selectAll: _createDraftSafeSelector(selectState, selectAll),
      selectTotal: _createDraftSafeSelector(selectState, selectTotal),
      selectById: _createDraftSafeSelector(selectGlobalizedEntities, selectId, selectById)
    };
  }

  return {
    getSelectors: getSelectors
  };
}

var import_immer3 = __toModule(require("immer"));

function createSingleArgumentStateOperator(mutator) {
  var operator = createStateOperator(function (_, state) {
    return mutator(state);
  });
  return function operation(state) {
    return operator(state, void 0);
  };
}

function createStateOperator(mutator) {
  return function operation(state, arg) {
    function isPayloadActionArgument(arg2) {
      return isFSA(arg2);
    }

    var runMutator = function runMutator(draft) {
      if (isPayloadActionArgument(arg)) {
        mutator(arg.payload, draft);
      } else {
        mutator(arg, draft);
      }
    };

    if ((0, import_immer3.isDraft)(state)) {
      runMutator(state);
      return state;
    } else {
      return (0, import_immer3.default)(state, runMutator);
    }
  };
}

function selectIdValue(entity, selectId) {
  var key = selectId(entity);

  if (key === void 0) {
    console.warn("The entity passed to the `selectId` implementation returned undefined.", "You should probably provide your own `selectId` implementation.", "The entity that was passed:", entity, "The `selectId` implementation:", selectId.toString());
  }

  return key;
}

function ensureEntitiesArray(entities) {
  if (!Array.isArray(entities)) {
    entities = Object.values(entities);
  }

  return entities;
}

function splitAddedUpdatedEntities(newEntities, selectId, state) {
  newEntities = ensureEntitiesArray(newEntities);
  var added = [];
  var updated = [];

  for (var _i = 0, newEntities_1 = newEntities; _i < newEntities_1.length; _i++) {
    var entity = newEntities_1[_i];
    var id = selectIdValue(entity, selectId);

    if (id in state.entities) {
      updated.push({
        id: id,
        changes: entity
      });
    } else {
      added.push(entity);
    }
  }

  return [added, updated];
}

function createUnsortedStateAdapter(selectId) {
  function addOneMutably(entity, state) {
    var key = selectIdValue(entity, selectId);

    if (key in state.entities) {
      return;
    }

    state.ids.push(key);
    state.entities[key] = entity;
  }

  function addManyMutably(newEntities, state) {
    newEntities = ensureEntitiesArray(newEntities);

    for (var _i = 0, newEntities_2 = newEntities; _i < newEntities_2.length; _i++) {
      var entity = newEntities_2[_i];
      addOneMutably(entity, state);
    }
  }

  function setOneMutably(entity, state) {
    var key = selectIdValue(entity, selectId);

    if (!(key in state.entities)) {
      state.ids.push(key);
    }

    state.entities[key] = entity;
  }

  function setManyMutably(newEntities, state) {
    newEntities = ensureEntitiesArray(newEntities);

    for (var _i = 0, newEntities_3 = newEntities; _i < newEntities_3.length; _i++) {
      var entity = newEntities_3[_i];
      setOneMutably(entity, state);
    }
  }

  function setAllMutably(newEntities, state) {
    newEntities = ensureEntitiesArray(newEntities);
    state.ids = [];
    state.entities = {};
    addManyMutably(newEntities, state);
  }

  function removeOneMutably(key, state) {
    return removeManyMutably([key], state);
  }

  function removeManyMutably(keys, state) {
    var didMutate = false;
    keys.forEach(function (key) {
      if (key in state.entities) {
        delete state.entities[key];
        didMutate = true;
      }
    });

    if (didMutate) {
      state.ids = state.ids.filter(function (id) {
        return id in state.entities;
      });
    }
  }

  function removeAllMutably(state) {
    (0, _extends2.default)(state, {
      ids: [],
      entities: {}
    });
  }

  function takeNewKey(keys, update, state) {
    var original2 = state.entities[update.id];
    var updated = (0, _extends2.default)({}, original2, update.changes);
    var newKey = selectIdValue(updated, selectId);
    var hasNewKey = newKey !== update.id;

    if (hasNewKey) {
      keys[update.id] = newKey;
      delete state.entities[update.id];
    }

    state.entities[newKey] = updated;
    return hasNewKey;
  }

  function updateOneMutably(update, state) {
    return updateManyMutably([update], state);
  }

  function updateManyMutably(updates, state) {
    var newKeys = {};
    var updatesPerEntity = {};
    updates.forEach(function (update) {
      if (update.id in state.entities) {
        updatesPerEntity[update.id] = {
          id: update.id,
          changes: __spreadValues(__spreadValues({}, updatesPerEntity[update.id] ? updatesPerEntity[update.id].changes : null), update.changes)
        };
      }
    });
    updates = Object.values(updatesPerEntity);
    var didMutateEntities = updates.length > 0;

    if (didMutateEntities) {
      var didMutateIds = updates.filter(function (update) {
        return takeNewKey(newKeys, update, state);
      }).length > 0;

      if (didMutateIds) {
        state.ids = state.ids.map(function (id) {
          return newKeys[id] || id;
        });
      }
    }
  }

  function upsertOneMutably(entity, state) {
    return upsertManyMutably([entity], state);
  }

  function upsertManyMutably(newEntities, state) {
    var _c = splitAddedUpdatedEntities(newEntities, selectId, state),
        added = _c[0],
        updated = _c[1];

    updateManyMutably(updated, state);
    addManyMutably(added, state);
  }

  return {
    removeAll: createSingleArgumentStateOperator(removeAllMutably),
    addOne: createStateOperator(addOneMutably),
    addMany: createStateOperator(addManyMutably),
    setOne: createStateOperator(setOneMutably),
    setMany: createStateOperator(setManyMutably),
    setAll: createStateOperator(setAllMutably),
    updateOne: createStateOperator(updateOneMutably),
    updateMany: createStateOperator(updateManyMutably),
    upsertOne: createStateOperator(upsertOneMutably),
    upsertMany: createStateOperator(upsertManyMutably),
    removeOne: createStateOperator(removeOneMutably),
    removeMany: createStateOperator(removeManyMutably)
  };
}

function createSortedStateAdapter(selectId, sort) {
  var _c = createUnsortedStateAdapter(selectId),
      removeOne = _c.removeOne,
      removeMany = _c.removeMany,
      removeAll = _c.removeAll;

  function addOneMutably(entity, state) {
    return addManyMutably([entity], state);
  }

  function addManyMutably(newEntities, state) {
    newEntities = ensureEntitiesArray(newEntities);
    var models = newEntities.filter(function (model) {
      return !(selectIdValue(model, selectId) in state.entities);
    });

    if (models.length !== 0) {
      merge(models, state);
    }
  }

  function setOneMutably(entity, state) {
    return setManyMutably([entity], state);
  }

  function setManyMutably(newEntities, state) {
    newEntities = ensureEntitiesArray(newEntities);

    if (newEntities.length !== 0) {
      merge(newEntities, state);
    }
  }

  function setAllMutably(newEntities, state) {
    newEntities = ensureEntitiesArray(newEntities);
    state.entities = {};
    state.ids = [];
    addManyMutably(newEntities, state);
  }

  function updateOneMutably(update, state) {
    return updateManyMutably([update], state);
  }

  function takeUpdatedModel(models, update, state) {
    if (!(update.id in state.entities)) {
      return false;
    }

    var original2 = state.entities[update.id];
    var updated = (0, _extends2.default)({}, original2, update.changes);
    var newKey = selectIdValue(updated, selectId);
    delete state.entities[update.id];
    models.push(updated);
    return newKey !== update.id;
  }

  function updateManyMutably(updates, state) {
    var models = [];
    updates.forEach(function (update) {
      return takeUpdatedModel(models, update, state);
    });

    if (models.length !== 0) {
      merge(models, state);
    }
  }

  function upsertOneMutably(entity, state) {
    return upsertManyMutably([entity], state);
  }

  function upsertManyMutably(newEntities, state) {
    var _c = splitAddedUpdatedEntities(newEntities, selectId, state),
        added = _c[0],
        updated = _c[1];

    updateManyMutably(updated, state);
    addManyMutably(added, state);
  }

  function areArraysEqual(a, b) {
    if (a.length !== b.length) {
      return false;
    }

    for (var i = 0; i < a.length && i < b.length; i++) {
      if (a[i] === b[i]) {
        continue;
      }

      return false;
    }

    return true;
  }

  function merge(models, state) {
    models.forEach(function (model) {
      state.entities[selectId(model)] = model;
    });
    var allEntities = Object.values(state.entities);
    allEntities.sort(sort);
    var newSortedIds = allEntities.map(selectId);
    var ids = state.ids;

    if (!areArraysEqual(ids, newSortedIds)) {
      state.ids = newSortedIds;
    }
  }

  return {
    removeOne: removeOne,
    removeMany: removeMany,
    removeAll: removeAll,
    addOne: createStateOperator(addOneMutably),
    updateOne: createStateOperator(updateOneMutably),
    upsertOne: createStateOperator(upsertOneMutably),
    setOne: createStateOperator(setOneMutably),
    setMany: createStateOperator(setManyMutably),
    setAll: createStateOperator(setAllMutably),
    addMany: createStateOperator(addManyMutably),
    updateMany: createStateOperator(updateManyMutably),
    upsertMany: createStateOperator(upsertManyMutably)
  };
}

function _createEntityAdapter(options) {
  if (options === void 0) {
    options = {};
  }

  var _c = __spreadValues({
    sortComparer: false,
    selectId: function selectId(instance) {
      return instance.id;
    }
  }, options),
      selectId = _c.selectId,
      sortComparer = _c.sortComparer;

  var stateFactory = createInitialStateFactory();
  var selectorsFactory = createSelectorsFactory();
  var stateAdapter = sortComparer ? createSortedStateAdapter(selectId, sortComparer) : createUnsortedStateAdapter(selectId);
  return __spreadValues(__spreadValues(__spreadValues({
    selectId: selectId,
    sortComparer: sortComparer
  }, stateFactory), selectorsFactory), stateAdapter);
}

var urlAlphabet = "ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW";

var _nanoid = function _nanoid(size) {
  if (size === void 0) {
    size = 21;
  }

  var id = "";
  var i = size;

  while (i--) {
    id += urlAlphabet[Math.random() * 64 | 0];
  }

  return id;
};

var commonProperties = ["name", "message", "stack", "code"];

var RejectWithValue = function () {
  function RejectWithValue(payload, meta) {
    this.payload = payload;
    this.meta = meta;
  }

  return RejectWithValue;
}();

var FulfillWithMeta = function () {
  function FulfillWithMeta(payload, meta) {
    this.payload = payload;
    this.meta = meta;
  }

  return FulfillWithMeta;
}();

var _miniSerializeError = function _miniSerializeError(value) {
  if (typeof value === "object" && value !== null) {
    var simpleError = {};

    for (var _i = 0, commonProperties_1 = commonProperties; _i < commonProperties_1.length; _i++) {
      var property = commonProperties_1[_i];

      if (typeof value[property] === "string") {
        simpleError[property] = value[property];
      }
    }

    return simpleError;
  }

  return {
    message: String(value)
  };
};

function _createAsyncThunk(typePrefix, payloadCreator, options) {
  var fulfilled = _createAction(typePrefix + "/fulfilled", function (payload, requestId, arg, meta) {
    return {
      payload: payload,
      meta: __spreadProps(__spreadValues({}, meta || {}), {
        arg: arg,
        requestId: requestId,
        requestStatus: "fulfilled"
      })
    };
  });

  var pending = _createAction(typePrefix + "/pending", function (requestId, arg, meta) {
    return {
      payload: void 0,
      meta: __spreadProps(__spreadValues({}, meta || {}), {
        arg: arg,
        requestId: requestId,
        requestStatus: "pending"
      })
    };
  });

  var rejected = _createAction(typePrefix + "/rejected", function (error, requestId, arg, payload, meta) {
    return {
      payload: payload,
      error: (options && options.serializeError || _miniSerializeError)(error || "Rejected"),
      meta: __spreadProps(__spreadValues({}, meta || {}), {
        arg: arg,
        requestId: requestId,
        rejectedWithValue: !!payload,
        requestStatus: "rejected",
        aborted: (error == null ? void 0 : error.name) === "AbortError",
        condition: (error == null ? void 0 : error.name) === "ConditionError"
      })
    };
  });

  var displayedWarning = false;
  var AC = typeof AbortController !== "undefined" ? AbortController : function () {
    function class_1() {
      this.signal = {
        aborted: false,
        addEventListener: function addEventListener() {},
        dispatchEvent: function dispatchEvent() {
          return false;
        },
        onabort: function onabort() {},
        removeEventListener: function removeEventListener() {}
      };
    }

    class_1.prototype.abort = function () {
      if (true) {
        if (!displayedWarning) {
          displayedWarning = true;
          console.info("This platform does not implement AbortController. \nIf you want to use the AbortController to react to `abort` events, please consider importing a polyfill like 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only'.");
        }
      }
    };

    return class_1;
  }();

  function actionCreator(arg) {
    return function (dispatch, getState, extra) {
      var requestId = (options == null ? void 0 : options.idGenerator) ? options.idGenerator(arg) : _nanoid();
      var abortController = new AC();
      var abortReason;
      var abortedPromise = new Promise(function (_, reject) {
        return abortController.signal.addEventListener("abort", function () {
          return reject({
            name: "AbortError",
            message: abortReason || "Aborted"
          });
        });
      });
      var started = false;

      function abort(reason) {
        if (started) {
          abortReason = reason;
          abortController.abort();
        }
      }

      var promise = function () {
        return __async(this, null, function () {
          var _a, _b, finalAction, conditionResult, err_1, skipDispatch;

          return __generator(this, function (_c) {
            switch (_c.label) {
              case 0:
                _c.trys.push([0, 4,, 5]);

                conditionResult = (_a = options == null ? void 0 : options.condition) == null ? void 0 : _a.call(options, arg, {
                  getState: getState,
                  extra: extra
                });
                if (!isThenable(conditionResult)) return [3, 2];
                return [4, conditionResult];

              case 1:
                conditionResult = _c.sent();
                _c.label = 2;

              case 2:
                if (conditionResult === false) {
                  throw {
                    name: "ConditionError",
                    message: "Aborted due to condition callback returning false."
                  };
                }

                started = true;
                dispatch(pending(requestId, arg, (_b = options == null ? void 0 : options.getPendingMeta) == null ? void 0 : _b.call(options, {
                  requestId: requestId,
                  arg: arg
                }, {
                  getState: getState,
                  extra: extra
                })));
                return [4, Promise.race([abortedPromise, Promise.resolve(payloadCreator(arg, {
                  dispatch: dispatch,
                  getState: getState,
                  extra: extra,
                  requestId: requestId,
                  signal: abortController.signal,
                  rejectWithValue: function rejectWithValue(value, meta) {
                    return new RejectWithValue(value, meta);
                  },
                  fulfillWithValue: function fulfillWithValue(value, meta) {
                    return new FulfillWithMeta(value, meta);
                  }
                })).then(function (result) {
                  if (result instanceof RejectWithValue) {
                    throw result;
                  }

                  if (result instanceof FulfillWithMeta) {
                    return fulfilled(result.payload, requestId, arg, result.meta);
                  }

                  return fulfilled(result, requestId, arg);
                })])];

              case 3:
                finalAction = _c.sent();
                return [3, 5];

              case 4:
                err_1 = _c.sent();
                finalAction = err_1 instanceof RejectWithValue ? rejected(null, requestId, arg, err_1.payload, err_1.meta) : rejected(err_1, requestId, arg);
                return [3, 5];

              case 5:
                skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;

                if (!skipDispatch) {
                  dispatch(finalAction);
                }

                return [2, finalAction];
            }
          });
        });
      }();

      return (0, _extends2.default)(promise, {
        abort: abort,
        requestId: requestId,
        arg: arg,
        unwrap: function unwrap() {
          return promise.then(_unwrapResult);
        }
      });
    };
  }

  return (0, _extends2.default)(actionCreator, {
    pending: pending,
    rejected: rejected,
    fulfilled: fulfilled,
    typePrefix: typePrefix
  });
}

function _unwrapResult(action) {
  if (action.meta && action.meta.rejectedWithValue) {
    throw action.payload;
  }

  if (action.error) {
    throw action.error;
  }

  return action.payload;
}

function isThenable(value) {
  return value !== null && typeof value === "object" && typeof value.then === "function";
}

var hasMatchFunction = function hasMatchFunction(v) {
  return v && typeof v.match === "function";
};

var matches = function matches(matcher, action) {
  if (hasMatchFunction(matcher)) {
    return matcher.match(action);
  } else {
    return matcher(action);
  }
};

function _isAnyOf() {
  var matchers = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    matchers[_i] = arguments[_i];
  }

  return function (action) {
    return matchers.some(function (matcher) {
      return matches(matcher, action);
    });
  };
}

function _isAllOf() {
  var matchers = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    matchers[_i] = arguments[_i];
  }

  return function (action) {
    return matchers.every(function (matcher) {
      return matches(matcher, action);
    });
  };
}

function hasExpectedRequestMetadata(action, validStatus) {
  if (!action || !action.meta) return false;
  var hasValidRequestId = typeof action.meta.requestId === "string";
  var hasValidRequestStatus = validStatus.indexOf(action.meta.requestStatus) > -1;
  return hasValidRequestId && hasValidRequestStatus;
}

function isAsyncThunkArray(a) {
  return typeof a[0] === "function" && "pending" in a[0] && "fulfilled" in a[0] && "rejected" in a[0];
}

function _isPending() {
  var asyncThunks = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    asyncThunks[_i] = arguments[_i];
  }

  if (asyncThunks.length === 0) {
    return function (action) {
      return hasExpectedRequestMetadata(action, ["pending"]);
    };
  }

  if (!isAsyncThunkArray(asyncThunks)) {
    return _isPending()(asyncThunks[0]);
  }

  return function (action) {
    var matchers = asyncThunks.map(function (asyncThunk) {
      return asyncThunk.pending;
    });

    var combinedMatcher = _isAnyOf.apply(void 0, matchers);

    return combinedMatcher(action);
  };
}

function _isRejected() {
  var asyncThunks = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    asyncThunks[_i] = arguments[_i];
  }

  if (asyncThunks.length === 0) {
    return function (action) {
      return hasExpectedRequestMetadata(action, ["rejected"]);
    };
  }

  if (!isAsyncThunkArray(asyncThunks)) {
    return _isRejected()(asyncThunks[0]);
  }

  return function (action) {
    var matchers = asyncThunks.map(function (asyncThunk) {
      return asyncThunk.rejected;
    });

    var combinedMatcher = _isAnyOf.apply(void 0, matchers);

    return combinedMatcher(action);
  };
}

function _isRejectedWithValue() {
  var asyncThunks = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    asyncThunks[_i] = arguments[_i];
  }

  var hasFlag = function hasFlag(action) {
    return action && action.meta && action.meta.rejectedWithValue;
  };

  if (asyncThunks.length === 0) {
    return function (action) {
      var combinedMatcher = _isAllOf(_isRejected.apply(void 0, asyncThunks), hasFlag);

      return combinedMatcher(action);
    };
  }

  if (!isAsyncThunkArray(asyncThunks)) {
    return _isRejectedWithValue()(asyncThunks[0]);
  }

  return function (action) {
    var combinedMatcher = _isAllOf(_isRejected.apply(void 0, asyncThunks), hasFlag);

    return combinedMatcher(action);
  };
}

function _isFulfilled() {
  var asyncThunks = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    asyncThunks[_i] = arguments[_i];
  }

  if (asyncThunks.length === 0) {
    return function (action) {
      return hasExpectedRequestMetadata(action, ["fulfilled"]);
    };
  }

  if (!isAsyncThunkArray(asyncThunks)) {
    return _isFulfilled()(asyncThunks[0]);
  }

  return function (action) {
    var matchers = asyncThunks.map(function (asyncThunk) {
      return asyncThunk.fulfilled;
    });

    var combinedMatcher = _isAnyOf.apply(void 0, matchers);

    return combinedMatcher(action);
  };
}

function _isAsyncThunkAction() {
  var asyncThunks = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    asyncThunks[_i] = arguments[_i];
  }

  if (asyncThunks.length === 0) {
    return function (action) {
      return hasExpectedRequestMetadata(action, ["pending", "fulfilled", "rejected"]);
    };
  }

  if (!isAsyncThunkArray(asyncThunks)) {
    return _isAsyncThunkAction()(asyncThunks[0]);
  }

  return function (action) {
    var matchers = [];

    for (var _i = 0, asyncThunks_1 = asyncThunks; _i < asyncThunks_1.length; _i++) {
      var asyncThunk = asyncThunks_1[_i];
      matchers.push(asyncThunk.pending, asyncThunk.rejected, asyncThunk.fulfilled);
    }

    var combinedMatcher = _isAnyOf.apply(void 0, matchers);

    return combinedMatcher(action);
  };
}

(0, import_immer4.enableES5)();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,