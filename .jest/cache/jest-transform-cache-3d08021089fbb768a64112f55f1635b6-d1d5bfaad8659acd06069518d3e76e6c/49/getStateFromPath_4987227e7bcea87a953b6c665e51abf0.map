{"version":3,"sources":["getStateFromPath.tsx"],"names":["initialRoutes","options","initialRouteName","parentScreens","screens","remaining","routes","segment","name","decodeURIComponent","createNestedStateObject","configs","Object","key","createNormalizedConfigs","a","b","aParts","bParts","i","Math","aWildCard","bWildCard","acc","config","intersects","pattern","match","c","remainingPath","matchAgainstConfigs","regex","undefined","current","result","joinPaths","paths","p","matchedParams","params","value","routeNames","routeConfig","parentPattern","createConfigItem","initials","nestedConfig","it","screen","path","parse","findParseConfigForRoute","routeName","findInitialRoute","sameParents","createStateObject","index","initialRoute","state","route","nestedState","nestedStateIndex","parseQueryParams","flatConfig","query","queryString","parseConfig"],"mappings":"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","sourcesContent":["import type {\n  InitialState,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\n\nimport findFocusedRoute from './findFocusedRoute';\nimport type { PathConfigMap } from './types';\nimport validatePathConfig from './validatePathConfig';\n\ntype Options<ParamList extends {}> = {\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  parentScreens: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\ntype ParsedRoute = {\n  name: string;\n  path?: string;\n  params?: Record<string, any> | undefined;\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath<ParamList extends {}>(\n  path: string,\n  options?: Options<ParamList>\n): ResultState | undefined {\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  let initialRoutes: InitialRouteConfig[] = [];\n\n  if (options?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: [],\n    });\n  }\n\n  const screens = options?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment) => {\n        const name = decodeURIComponent(segment);\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(path, routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          key,\n          screens as PathConfigMap<object>,\n          [],\n          initialRoutes,\n          []\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n        // if b is longer, b get higher priority\n        if (aParts[i] == null) {\n          return 1;\n        }\n        // if a is longer, a get higher priority\n        if (bParts[i] == null) {\n          return -1;\n        }\n        const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n        const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n        // if both are wildcard we compare next component\n        if (aWildCard && bWildCard) {\n          continue;\n        }\n        // if only a is wild card, b get higher priority\n        if (aWildCard) {\n          return 1;\n        }\n        // if only b is wild card, a get higher priority\n        if (bWildCard) {\n          return -1;\n        }\n      }\n      return bParts.length - aParts.length;\n    });\n\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length\n          ? b.every((it, i) => a[i] === it)\n          : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\n          `Found conflicting screens with the same pattern. The pattern '${\n            config.pattern\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\n            ' > '\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config,\n    });\n  }, {});\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        path,\n        match.routeNames.map((name) => ({ name })),\n        initialRoutes,\n        configs\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  // We match the whole path against the regex instead of segments\n  // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n  const { routes, remainingPath } = matchAgainstConfigs(\n    remaining,\n    configs.map((c) => ({\n      ...c,\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n    }))\n  );\n\n  if (routes !== undefined) {\n    // This will always be empty if full path matched\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routes: ParsedRoute[] | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      const matchedParams = config.pattern\n        ?.split('/')\n        .filter((p) => p.startsWith(':'))\n        .reduce<Record<string, any>>(\n          (acc, p, i) =>\n            Object.assign(acc, {\n              // The param segments appear every second item starting from 2 in the regex match result\n              [p]: match![(i + 1) * 2].replace(/\\//, ''),\n            }),\n          {}\n        );\n\n      routes = config.routeNames.map((name) => {\n        const config = configs.find((c) => c.screen === name);\n        const params = config?.path\n          ?.split('/')\n          .filter((p) => p.startsWith(':'))\n          .reduce<Record<string, any>>((acc, p) => {\n            const value = matchedParams[p];\n\n            if (value) {\n              const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = config.parse?.[key] ? config.parse[key](value) : value;\n            }\n\n            return acc;\n          }, {});\n\n        if (params && Object.keys(params).length) {\n          return { name, params };\n        }\n\n        return { name };\n      });\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routes, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  screen: string,\n  routeConfig: PathConfigMap<object>,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentScreens: string[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  parentScreens.push(screen);\n\n  // @ts-expect-error: we can't strongly typecheck this for now\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\n          \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n        );\n      }\n\n      pattern =\n        config.exact !== true\n          ? joinPaths(parentPattern || '', config.path || '')\n          : config.path || '';\n\n      configs.push(\n        createConfigItem(\n          screen,\n          routeNames,\n          pattern!,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens,\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          nestedConfig,\n          config.screens as PathConfigMap<object>,\n          routeNames,\n          initials,\n          [...parentScreens],\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  parentScreens: string[],\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName\n          ? config.initialRouteName\n          : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  route: ParsedRoute,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, route],\n      };\n    } else {\n      return {\n        routes: [route],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { ...route, state: { routes: [] } }],\n      };\n    } else {\n      return {\n        routes: [{ ...route, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  path: string,\n  routes: ParsedRoute[],\n  initialRoutes: InitialRouteConfig[],\n  flatConfig?: RouteConfig[]\n) => {\n  let state: InitialState;\n  let route = routes.shift() as ParsedRoute;\n  const parentScreens: string[] = [];\n\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n  parentScreens.push(route.name);\n\n  state = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as ParsedRoute)) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  route = findFocusedRoute(state) as ParsedRoute;\n  route.path = path;\n\n  const params = parseQueryParams(\n    path,\n    flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined\n  );\n\n  if (params) {\n    route.params = { ...route.params, ...params };\n  }\n\n  return state;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"]}