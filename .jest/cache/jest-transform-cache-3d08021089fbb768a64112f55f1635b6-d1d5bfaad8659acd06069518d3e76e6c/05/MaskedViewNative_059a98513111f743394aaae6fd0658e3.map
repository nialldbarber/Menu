{"version":3,"sources":["MaskedViewNative.tsx"],"names":["RNCMaskedView","require","isMaskedViewAvailable","UIManager","rest"],"mappings":";;;;;;;;;;;;AAGA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,IAAA,aAAA;;AAEA,IAAI;AAGFA,EAAAA,aAAa,GAAGC,OAAO,CAAPA,uCAAO,CAAPA,CAAhBD,OAAAA;AAHF,CAAA,CAIE,OAAA,CAAA,EAAU,CAEX;;AAED,IAAME,qBAAqB,GACzBC,YAAAA,CAAAA,SAAAA,CAAAA,oBAAAA,CAAAA,eAAAA,KADF,IAAA;;AAGe,SAAA,UAAA,OAAkD;AAAA,MAA9B,QAA8B,QAA9B,QAA8B;AAAA,MAAfC,IAAe;;AAC/D,MAAIF,qBAAqB,IAAzB,aAAA,EAA4C;AAC1C,WAAO,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA,IAAA,EAAP,QAAO,CAAP;AACD;;AAED,SAAA,QAAA;AACD","sourcesContent":["/**\n * The native MaskedView that we explicitly re-export for supported platforms: Android, iOS.\n */\nimport * as React from 'react';\nimport { UIManager } from 'react-native';\n\ntype MaskedViewType =\n  typeof import('@react-native-masked-view/masked-view').default;\n\ntype Props = React.ComponentProps<MaskedViewType> & {\n  children: React.ReactElement;\n};\n\nlet RNCMaskedView: MaskedViewType | undefined;\n\ntry {\n  // Add try/catch to support usage even if it's not installed, since it's optional.\n  // Newer versions of Metro will handle it properly.\n  RNCMaskedView = require('@react-native-masked-view/masked-view').default;\n} catch (e) {\n  // Ignore\n}\n\nconst isMaskedViewAvailable =\n  UIManager.getViewManagerConfig('RNCMaskedView') != null;\n\nexport default function MaskedView({ children, ...rest }: Props) {\n  if (isMaskedViewAvailable && RNCMaskedView) {\n    return <RNCMaskedView {...rest}>{children}</RNCMaskedView>;\n  }\n\n  return children;\n}\n"]}